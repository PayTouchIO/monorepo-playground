version: 2.1

workflows:
  version: 2
  QA:
    jobs:
      # determine which projects/jobs need to be rerun and which can be skipped
      - tag-changed-projects

      # compile
      - sbt-paytouch:
          name: sbt-paytouch-compile
          config: main
          task: compile
          requires:
            - tag-changed-projects
          # resource_class: medium+
      - domain:
          name: domain-compile
          config: main
          task: compile
          requires:
            - sbt-paytouch-compile
          # resource_class: medium+
      - pt_core:
          name: pt_core-compile
          config: main
          task: compile
          requires:
            - domain-compile
          # resource_class: medium+
      - pt_ordering:
          name: pt_ordering-compile
          config: main
          task: compile
          requires:
            - pt_core-compile
          # resource_class: medium+

      # test:compile
      - sbt-paytouch:
          name: sbt-paytouch-test:compile
          config: test
          task: test:compile
          requires:
            - sbt-paytouch-compile
          # resource_class: medium+
      - domain:
          name: domain-test:compile
          config: test
          task: test:compile
          requires:
            - domain-compile
          # resource_class: medium+
      - pt_core:
          name: pt_core-test:compile
          config: test
          task: test:compile
          requires:
            - pt_core-compile
          # resource_class: medium+
      - pt_ordering:
          name: pt_ordering-test:compile
          config: test
          task: test:compile
          requires:
            - pt_ordering-compile
          # resource_class: medium+

      # test
      - sbt-paytouch:
          name: sbt-paytouch-test
          config: test
          task: test
          requires:
            - sbt-paytouch-test:compile
          # resource_class: medium
      - domain:
          name: domain-test
          config: test
          task: test
          requires:
            - domain-test:compile
          # resource_class: medium
      - pt_core:
          name: pt_core-test
          config: test
          task: test
          requires:
            - pt_core-test:compile
          # resource_class: medium
      - pt_ordering:
          name: pt_ordering-test
          config: test
          task: test
          requires:
            - pt_ordering-test:compile
          # resource_class: medium

jobs:
  tag-changed-projects:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - checkout
      - run:
          name: Determining which projects were changed since the last successful run
          shell: /bin/bash
          command: tools/ci/core/build.sh
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - projects-with-changes
  sbt-paytouch:
    parameters:
      config:
        description: main or test
        type: enum
        enum: ["main", "test"]
      task:
        description: compile, test:compile or test
        type: enum
        enum: ["compile", "test:compile", "test"]
      resource_class:
        type: string
        default: small
    executor: jdk
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Determining weather project was changed since the last successful run
          command: |
            echo Projects with changes:
            cat /tmp/workspace/projects-with-changes
            echo
            if [ -z $(grep sbt-paytouch /tmp/workspace/projects-with-changes) ]; then
              circleci-agent step halt
            fi
      - restore_single_project_depenencies:
          project: sbt-paytouch
      - run:
          name: Running the actual job
          command: |
            cd sbt-paytouch
            if [ << parameters.task >> = "compile" ]; then
              sbt test:update scalafmtSbtCheck scalafmtCheckAll compile
            else
              sbt << parameters.task >>
            fi
      - cache_dependencies_across_workflows:
          project: sbt-paytouch
      - cache_compilation_within_workflow:
          project: sbt-paytouch
          config: << parameters.config >>

  domain:
    parameters:
      config:
        description: main or test
        type: enum
        enum: ["main", "test"]
      task:
        description: compile, test:compile or test
        type: enum
        enum: ["compile", "test:compile", "test"]
      resource_class:
        type: string
        default: small
    executor: jdk
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Determining weather project was changed since the last successful run
          command: |
            echo Projects with changes:
            cat /tmp/workspace/projects-with-changes
            echo
            if [ -z $(grep domain /tmp/workspace/projects-with-changes) ]; then
              circleci-agent step halt
            fi
      - restore_single_project_depenencies:
          project: sbt-paytouch
      - restore_single_project_depenencies:
          project: domain
      - restore_all_compilations
      - run:
          name: Running the actual job
          command: |
            cd domain
            if [ << parameters.task >> = "compile" ]; then
              sbt test:update scalafmtSbtCheck scalafmtCheckAll compile
            else
              sbt << parameters.task >>
            fi
      - cache_dependencies_across_workflows:
          project: domain
      - cache_compilation_within_workflow:
          project: domain
          config: << parameters.config >>

  pt_core:
    parameters:
      config:
        description: main or test
        type: enum
        enum: ["main", "test"]
      task:
        description: compile, test:compile or test
        type: enum
        enum: ["compile", "test:compile", "test"]
      resource_class:
        type: string
        default: small
    executor: jdk
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Determining weather project was changed since the last successful run
          command: |
            echo Projects with changes:
            cat /tmp/workspace/projects-with-changes
            echo
            if [ -z $(grep pt_core /tmp/workspace/projects-with-changes) ]; then
              circleci-agent step halt
            fi
      - restore_single_project_depenencies:
          project: sbt-paytouch
      - restore_single_project_depenencies:
          project: domain
      - restore_single_project_depenencies:
          project: pt_core
      - restore_all_compilations
      - run:
          name: Running the actual job
          command: |
            cd pt_core
            if [ << parameters.task >> = "compile" ]; then
              sbt test:update scalafmtSbtCheck scalafmtCheckAll compile
            else
              sbt << parameters.task >>
            fi
      - cache_dependencies_across_workflows:
          project: pt_core
      - cache_compilation_within_workflow:
          project: pt_core
          config: << parameters.config >>

  pt_ordering:
    parameters:
      config:
        description: main or test
        type: enum
        enum: ["main", "test"]
      task:
        description: compile, test:compile or test
        type: enum
        enum: ["compile", "test:compile", "test"]
      resource_class:
        type: string
        default: small
    executor: jdk
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Determining weather project was changed since the last successful run
          command: |
            echo Projects with changes:
            cat /tmp/workspace/projects-with-changes
            echo
            if [ -z $(grep pt_ordering /tmp/workspace/projects-with-changes) ]; then
              circleci-agent step halt
            fi
      - restore_single_project_depenencies:
          project: sbt-paytouch
      - restore_single_project_depenencies:
          project: domain
      - restore_single_project_depenencies:
          project: pt_core
      - restore_single_project_depenencies:
          project: pt_ordering
      - restore_all_compilations
      - run:
          name: Running the actual job
          command: |
            cd pt_ordering
            if [ << parameters.task >> = "compile" ]; then
              sbt test:update scalafmtSbtCheck scalafmtCheckAll compile
            else
              sbt << parameters.task >>
            fi
      - cache_dependencies_across_workflows:
          project: pt_ordering

executors:
  jdk:
    docker:
      - image: circleci/openjdk:8

commands:
  cache_dependencies_across_workflows:
    description: "Caches coursier, ivy2, m2 and sbt artifacts."
    parameters:
      project:
        type: string
    steps:
      - save_cache:
          key: v0-<< parameters.project >>-dependencies-{{ checksum "sbt-paytouch/project/plugins.sbt" }}-{{ checksum "sbt-paytouch/build.sbt" }}-{{ checksum "sbt-paytouch/src/main/scala/io/paytouch/sbtplugin/Paytouch.scala" }}
          paths:
            - ~/.cache/coursier
            - ~/.ivy2/cache
            - ~/.m2
            - ~/.sbt

  restore_single_project_depenencies:
    description: Restores coursier, ivy2, m2 and sbt artifacts from cache.
    parameters:
      project:
        description: project
        type: string
    steps:
      - restore_cache:
          name: Restoring << parameters.project >> dependencies
          key: v0-<< parameters.project >>-dependencies-{{ checksum "sbt-paytouch/project/plugins.sbt" }}-{{ checksum "sbt-paytouch/build.sbt" }}-{{ checksum "sbt-paytouch/src/main/scala/io/paytouch/sbtplugin/Paytouch.scala" }}

  cache_compilation_within_workflow:
    description: Caches sbt output (the target) folder.
    parameters:
      project:
        type: string
      config:
        description: will be used as suffix for the cache since workspaces are prepend only we can't reuse the names
        type: enum
        enum: ["main", "test"]
    steps:
      - run:
          name: Work around incremental compilation issues by preserving timestamps in nanoseconds
          command: |
            cd << parameters.project >>
            find -name target -exec tar -zcf targets-<< parameters.config >>.tar.gz -H posix {} +
      - persist_to_workspace:
          root: ~/project
          paths:
            - << parameters.project >>/targets-<< parameters.config >>.tar.gz

  # restore_all_compilations executes instantly so we can always restore all compilations
  # even the ones that we don't need or the ones that don't exist yet.
  restore_all_compilations:
    description: "Restores sbt output (the target) folder from cache."
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - restore_single_project_compilation:
          project: sbt-paytouch
      - restore_single_project_compilation:
          project: domain
      - restore_single_project_compilation:
          project: pt_core
      - restore_single_project_compilation:
          project: pt_ordering

  restore_single_project_compilation:
    description: "Restores sbt output (the target) folder from cache."
    parameters:
      project:
        description: project
        type: string
    steps:
      - run:
          name: Restoring << parameters.project >> compilation (succeeds even if restoration fails)
          command: |
            tar -xf /tmp/workspace/<< parameters.project >>/targets-main.tar.gz --directory ~/project/<< parameters.project >> || true
            tar -xf /tmp/workspace/<< parameters.project >>/targets-test.tar.gz --directory ~/project/<< parameters.project >> || true
