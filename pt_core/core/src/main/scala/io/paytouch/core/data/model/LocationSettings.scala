package io.paytouch.core.data.model

import java.time.ZonedDateTime
import java.util.UUID

import io.paytouch.core.data.model.enums.ScopeType
import io.paytouch.core.entities.enums.CashDrawerManagementMode
import io.paytouch.core.entities.enums.TipsHandlingMode
import io.paytouch.core.entities.ResettableBigDecimal

final case class LocationSettingsRecord(
    id: UUID,
    merchantId: UUID,
    locationId: UUID,
    orderRoutingAuto: Boolean,
    orderTypeDineIn: Boolean,
    orderTypeTakeOut: Boolean,
    orderTypeDeliveryRestaurant: Boolean,
    orderTypeInStore: Boolean,
    orderTypeInStorePickUp: Boolean,
    orderTypeDeliveryRetail: Boolean,
    webStorefrontActive: Boolean,
    mobileStorefrontActive: Boolean,
    facebookStorefrontActive: Boolean,
    invoicesActive: Boolean,
    discountBelowCostActive: Boolean,
    cashDrawerManagementActive: Boolean,
    cashDrawerManagement: CashDrawerManagementMode,
    giftCardsActive: Boolean,
    paymentTypeCreditCard: Boolean,
    paymentTypeCash: Boolean,
    paymentTypeDebitCard: Boolean,
    paymentTypeCheck: Boolean,
    paymentTypeGiftCard: Boolean,
    paymentTypeStoreCredit: Boolean,
    paymentTypeEbt: Boolean,
    paymentTypeApplePay: Boolean,
    tipsHandling: TipsHandlingMode,
    tipsOnDeviceEnabled: Boolean,
    bypassSignatureAmount: BigDecimal,
    onlineStorefrontEnabled: Boolean,
    deliveryProvidersEnabled: Boolean,
    maxDrivingDistanceInMeters: Option[BigDecimal],
    orderAutocomplete: Boolean,
    preauthEnabled: Boolean,
    nextOrderNumberScopeType: ScopeType,
    cfd: Option[CfdSettings],
    onlineOrder: Option[OnlineOrderSettings],
    rapidoEnabled: Boolean,
    createdAt: ZonedDateTime,
    updatedAt: ZonedDateTime,
  ) extends SlickMerchantRecord
       with SlickOneToOneWithLocationRecord

case class LocationSettingsUpdate(
    id: Option[UUID],
    merchantId: Option[UUID],
    locationId: Option[UUID],
    orderRoutingAuto: Option[Boolean],
    orderTypeDineIn: Option[Boolean],
    orderTypeTakeOut: Option[Boolean],
    orderTypeDeliveryRestaurant: Option[Boolean],
    orderTypeInStore: Option[Boolean],
    orderTypeInStorePickUp: Option[Boolean],
    orderTypeDeliveryRetail: Option[Boolean],
    webStorefrontActive: Option[Boolean],
    mobileStorefrontActive: Option[Boolean],
    facebookStorefrontActive: Option[Boolean],
    invoicesActive: Option[Boolean],
    discountBelowCostActive: Option[Boolean],
    cashDrawerManagementActive: Option[Boolean],
    cashDrawerManagement: Option[CashDrawerManagementMode],
    giftCardsActive: Option[Boolean],
    paymentTypeCreditCard: Option[Boolean],
    paymentTypeCash: Option[Boolean],
    paymentTypeDebitCard: Option[Boolean],
    paymentTypeCheck: Option[Boolean],
    paymentTypeGiftCard: Option[Boolean],
    paymentTypeStoreCredit: Option[Boolean],
    paymentTypeEbt: Option[Boolean],
    paymentTypeApplePay: Option[Boolean],
    tipsHandling: Option[TipsHandlingMode],
    tipsOnDeviceEnabled: Option[Boolean],
    bypassSignatureAmount: Option[BigDecimal],
    onlineStorefrontEnabled: Option[Boolean],
    deliveryProvidersEnabled: Option[Boolean],
    maxDrivingDistanceInMeters: ResettableBigDecimal,
    orderAutocomplete: Option[Boolean],
    preauthEnabled: Option[Boolean],
    nextOrderNumberScopeType: Option[ScopeType],
    cfd: Option[CfdSettingsUpdate],
    onlineOrder: Option[OnlineOrderSettingsUpdate],
    rapidoEnabled: Option[Boolean],
  ) extends SlickMerchantUpdate[LocationSettingsRecord] {
  def toRecord: LocationSettingsRecord = {
    require(merchantId.isDefined, s"Impossible to convert LocationSettingsUpdate without a merchant id. [$this]")
    require(locationId.isDefined, s"Impossible to convert LocationSettingsUpdate without a location id. [$this]")
    LocationSettingsRecord(
      id = id.getOrElse(UUID.randomUUID),
      merchantId = merchantId.get,
      locationId = locationId.get,
      orderRoutingAuto = orderRoutingAuto.getOrElse(true),
      orderTypeDineIn = orderTypeDineIn.getOrElse(false),
      orderTypeTakeOut = orderTypeTakeOut.getOrElse(false),
      orderTypeDeliveryRestaurant = orderTypeDeliveryRestaurant.getOrElse(false),
      orderTypeInStore = orderTypeInStore.getOrElse(false),
      orderTypeInStorePickUp = orderTypeInStorePickUp.getOrElse(false),
      orderTypeDeliveryRetail = orderTypeDeliveryRetail.getOrElse(false),
      webStorefrontActive = webStorefrontActive.getOrElse(false),
      mobileStorefrontActive = mobileStorefrontActive.getOrElse(false),
      facebookStorefrontActive = facebookStorefrontActive.getOrElse(false),
      invoicesActive = invoicesActive.getOrElse(false),
      discountBelowCostActive = discountBelowCostActive.getOrElse(false),
      cashDrawerManagementActive = cashDrawerManagementActive.getOrElse(false),
      cashDrawerManagement = cashDrawerManagement.getOrElse(CashDrawerManagementMode.Disabled),
      giftCardsActive = giftCardsActive.getOrElse(false),
      paymentTypeCreditCard = paymentTypeCreditCard.getOrElse(false),
      paymentTypeCash = paymentTypeCash.getOrElse(false),
      paymentTypeDebitCard = paymentTypeDebitCard.getOrElse(false),
      paymentTypeCheck = paymentTypeCheck.getOrElse(false),
      paymentTypeGiftCard = paymentTypeGiftCard.getOrElse(false),
      paymentTypeStoreCredit = paymentTypeStoreCredit.getOrElse(false),
      paymentTypeEbt = paymentTypeEbt.getOrElse(false),
      paymentTypeApplePay = paymentTypeApplePay.getOrElse(false),
      tipsHandling = tipsHandling.getOrElse(TipsHandlingMode.TipJar),
      tipsOnDeviceEnabled = tipsOnDeviceEnabled.getOrElse(false),
      bypassSignatureAmount = bypassSignatureAmount.getOrElse(0),
      onlineStorefrontEnabled = onlineStorefrontEnabled.getOrElse(false),
      deliveryProvidersEnabled = deliveryProvidersEnabled.getOrElse(false),
      maxDrivingDistanceInMeters = maxDrivingDistanceInMeters,
      orderAutocomplete = orderAutocomplete.getOrElse(true),
      preauthEnabled = preauthEnabled.getOrElse(false),
      nextOrderNumberScopeType = nextOrderNumberScopeType.getOrElse(ScopeType.Location),
      cfd = cfd.map(_.toRecord),
      onlineOrder = onlineOrder.map(_.toRecord),
      rapidoEnabled = rapidoEnabled.getOrElse(false),
      createdAt = now,
      updatedAt = now,
    )
  }

  def updateRecord(record: LocationSettingsRecord): LocationSettingsRecord =
    LocationSettingsRecord(
      id = id.getOrElse(record.id),
      merchantId = merchantId.getOrElse(record.merchantId),
      locationId = locationId.getOrElse(record.locationId),
      orderRoutingAuto = orderRoutingAuto.getOrElse(record.orderRoutingAuto),
      orderTypeDineIn = orderTypeDineIn.getOrElse(record.orderTypeDineIn),
      orderTypeTakeOut = orderTypeTakeOut.getOrElse(record.orderTypeTakeOut),
      orderTypeDeliveryRestaurant = orderTypeDeliveryRestaurant.getOrElse(record.orderTypeDeliveryRestaurant),
      orderTypeInStore = orderTypeInStore.getOrElse(record.orderTypeInStore),
      orderTypeInStorePickUp = orderTypeInStorePickUp.getOrElse(record.orderTypeInStorePickUp),
      orderTypeDeliveryRetail = orderTypeDeliveryRetail.getOrElse(record.orderTypeDeliveryRetail),
      webStorefrontActive = webStorefrontActive.getOrElse(record.webStorefrontActive),
      mobileStorefrontActive = mobileStorefrontActive.getOrElse(record.mobileStorefrontActive),
      facebookStorefrontActive = facebookStorefrontActive.getOrElse(record.facebookStorefrontActive),
      invoicesActive = invoicesActive.getOrElse(record.invoicesActive),
      discountBelowCostActive = discountBelowCostActive.getOrElse(record.discountBelowCostActive),
      cashDrawerManagementActive = cashDrawerManagementActive.getOrElse(record.cashDrawerManagementActive),
      cashDrawerManagement = cashDrawerManagement.getOrElse(record.cashDrawerManagement),
      giftCardsActive = giftCardsActive.getOrElse(record.giftCardsActive),
      paymentTypeCreditCard = paymentTypeCreditCard.getOrElse(record.paymentTypeCreditCard),
      paymentTypeCash = paymentTypeCash.getOrElse(record.paymentTypeCash),
      paymentTypeDebitCard = paymentTypeDebitCard.getOrElse(record.paymentTypeDebitCard),
      paymentTypeCheck = paymentTypeCheck.getOrElse(record.paymentTypeCheck),
      paymentTypeGiftCard = paymentTypeGiftCard.getOrElse(record.paymentTypeGiftCard),
      paymentTypeStoreCredit = paymentTypeStoreCredit.getOrElse(record.paymentTypeStoreCredit),
      paymentTypeEbt = paymentTypeEbt.getOrElse(record.paymentTypeEbt),
      paymentTypeApplePay = paymentTypeApplePay.getOrElse(record.paymentTypeApplePay),
      tipsHandling = tipsHandling.getOrElse(record.tipsHandling),
      tipsOnDeviceEnabled = tipsOnDeviceEnabled.getOrElse(record.tipsOnDeviceEnabled),
      bypassSignatureAmount = bypassSignatureAmount.getOrElse(record.bypassSignatureAmount),
      onlineStorefrontEnabled = onlineStorefrontEnabled.getOrElse(record.onlineStorefrontEnabled),
      deliveryProvidersEnabled = deliveryProvidersEnabled.getOrElse(record.deliveryProvidersEnabled),
      maxDrivingDistanceInMeters = maxDrivingDistanceInMeters.getOrElse(record.maxDrivingDistanceInMeters),
      orderAutocomplete = orderAutocomplete.getOrElse(record.orderAutocomplete),
      preauthEnabled = preauthEnabled.getOrElse(record.preauthEnabled),
      nextOrderNumberScopeType = nextOrderNumberScopeType.getOrElse(record.nextOrderNumberScopeType),
      cfd = cfd.map(_.updateRecord(record.cfd)).orElse(record.cfd),
      onlineOrder = onlineOrder.map(_.updateRecord(record.onlineOrder)).orElse(record.onlineOrder),
      rapidoEnabled = rapidoEnabled.getOrElse(record.rapidoEnabled),
      createdAt = record.createdAt,
      updatedAt = now,
    )
}
