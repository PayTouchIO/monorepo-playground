definitions:
  AcceptanceStatus:
    type: string
    enum: [open, pending, accepted, rejected]
  AcceptanceStatusUpsertion:
    type: string
    enum: [open, pending]
  Address:
    type: object
    properties:
      line1: {type: string}
      line2: {type: string}
      city: {type: string}
      state: {type: string}
      country: {type: string}
      state_data: {$ref: '#/definitions/AddressState'}
      country_data: {$ref: '#/definitions/Country'}
      postal_code: {type: string}
  AddressUpsertion:
    type: object
    properties:
      line1: {type: string}
      line2: {type: string}
      city: {type: string}
      state: {type: string}
      country: {type: string}
      state_code: {type: string}
      country_code: {type: string}
      postal_code: {type: string}
  AddressImproved:
    type: object
    properties:
      line1: {type: string}
      line2: {type: string}
      city: {type: string}
      state: {$ref: '#/definitions/AddressState'}
      country: {$ref: '#/definitions/Country'}
      postal_code: {type: string}
  AddressImprovedUpsertion:
    type: object
    properties:
      line1: {type: string}
      line2: {type: string}
      city: {type: string}
      state_code: {type: string}
      country_code: {type: string}
      postal_code: {type: string}
  Admin:
    type: object
    required: [id, first_name, last_name, email, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      first_name: {type: string}
      last_name: {type: string}
      email: {type: string}
      last_login_at: {type: string, format: date-time}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  AdminCreation:
    type: object
    required: [first_name, last_name, password, email]
    properties:
      first_name: {type: string}
      last_name: {type: string}
      password: {type: string}
      email: {type: string}
  AdminLoginCredentials:
    type: object
    required: [email, password]
    properties:
      email: {type: string}
      password: {type: string}
  AdminResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Admin'}
  AdminUpdate:
    type: object
    properties:
      first_name: {type: string}
      last_name: {type: string}
      password: {type: string}
      email: {type: string}
  ArticleInfo:
    type: object
    required: [id, name]
    properties:
      id: {type: string, format: uuid}
      name: {type: string }
      sku: {type: string }
      upc: {type: string }
      tax_rate_ids:
        type: array
        items: {$ref: '#/definitions/VariantOptionWithType'}
  ArticleLocationUpdate:
    type: object
    required: [price, unit, tax_rate_ids]
    properties:
      price: {type: number, format: double}
      cost: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      margin: {type: number, format: double}
      active: {type: boolean}
      tax_rate_ids:
        type: array
        items: {type: string, format: uuid}
  ArticleScope:
    type: string
    enum: [product, part]
  ArticleType:
    type: string
    enum: [simple, template, variant, gift_card, custom_product]
  Availabilities:
    type: object
    description: a map of the days of the week ('sunday','monday', 'tuesday', ...) to an array of Availability
    additionalProperties:
      type: array
      items: {$ref: '#/definitions/Availability'}
  Availability:
    type: object
    required: [start, end]
    properties:
      start: {type: string, format: time}
      end: {type: string, format: time}
  BarcodeFormat:
    type: string
    enum: [PDF417, Code128]
  BarcodeMetadata:
    type: object
    required: [format, value]
    properties:
      format: {$ref: '#/definitions/BarcodeFormat'}
      value: {type: string}
      width: {type: integer}
      height: {type: integer}
      margin: {type: integer}
  BarcodeResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {type: string}
  Brand:
    type: object
    required: [id, name]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
  BrandCreation:
    type: object
    required: [name]
    properties:
      name: {type: string}
  BrandList:
    type: array
    items: {$ref: '#/definitions/Brand'}
  BrandListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/BrandList'}
  BrandResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Brand'}
  BrandUpdate:
    type: object
    properties:
      name: {type: string}
  BundleCreation:
    type: object
    required: [name, category_ids, supplier_ids, unit, location_overrides]
    properties:
      name: {type: string}
      description: {type: string}
      category_ids:
        type: array
        items: {type: string, format: uuid}
      brand_id: {type: string, format: uuid}
      supplier_ids:
        type: array
        items: {type: string, format: uuid}
      sku: {type: string}
      upc: {type: string}
      cost: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      track_inventory: {type: boolean}
      track_inventory_parts: {type: boolean}
      active: {type: boolean}
      apply_pricing_to_all_locations: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ProductLocationUpdate'
      makes_quantity: {type: number, format: double}
      bundle_sets:
        type: array
        items: {$ref: '#/definitions/BundleSetCreation'}
  BundleOption:
    type: object
    required: [id, article, price_adjustment]
    properties:
      id: {type: string, format: uuid}
      article: {$ref: '#/definitions/ArticleInfo'}
      price_adjustment: {type: number, format: double}
      position: {type: integer }
  BundleOptionUpdate:
    type: object
    required: [id, article_id, price_adjustment]
    properties:
      id: {type: string, format: uuid}
      article_id: {type: string, format: uuid}
      price_adjustment: {type: number, format: double}
  BundleSet:
    type: object
    required: [id, position, min_quantity, max_quantity, options]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      position: {type: integer }
      min_quantity: {type: integer }
      max_quantity: {type: integer }
      options:
        type: array
        items: {$ref: '#/definitions/BundleOption'}
  BundleSetCreation:
    type: object
    required: [id, position, min_quantity, max_quantity, options]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      position: {type: integer }
      min_quantity: {type: integer }
      max_quantity: {type: integer }
      options:
        type: array
        items: {$ref: '#/definitions/BundleOptionUpdate'}
  BundleSetUpdate:
    type: object
    required: [id, position, min_quantity, max_quantity]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      position: {type: integer }
      min_quantity: {type: integer }
      max_quantity: {type: integer }
      options:
        type: array
        items: {$ref: '#/definitions/BundleOptionUpdate'}
  BundleUpdate:
    type: object
    required: [location_overrides]
    properties:
      name: {type: string}
      description: {type: string}
      category_ids:
        type: array
        items: {type: string, format: uuid}
      brand_id: {type: string, format: uuid}
      supplier_ids:
        type: array
        items: {type: string, format: uuid}
      sku: {type: string}
      upc: {type: string}
      cost: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      track_inventory: {type: boolean}
      track_inventory_parts: {type: boolean}
      active: {type: boolean}
      apply_pricing_to_all_locations: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ProductLocationUpdate'
      makes_quantity: {type: number, format: double}
      reason: {$ref: '#/definitions/ChangeReason'}
      notes: {type: string}
      bundle_sets:
        type: array
        items: {$ref: '#/definitions/BundleSetUpdate'}
  BusinessType:
    type: string
    enum: [restaurant, retail, qsr]
  RestaurantType:
    type: string
    enum: [fine_dining, casual_dining, fast_casual, bar_nightclub, cafe, enterprise]
  CancellationStatus:
    type: string
    enum: [requested, acknowledged]
  CardTransactionResultType:
    type: string
    enum: [partial_approval, approved, declined]
  CardTransactionStatusType:
    type: string
    enum: [committed, uncommitted, void, uncommitted_void]
  CardType:
    type: string
    enum: [visa, master_card, maestro, amex, jcb, diners, discover, carte_bleue, carte_blanc, voyager, wex, china_union_pay,
      style, link, interac, laser, other]
  CashDrawer:
    type: object
    required: [id, starting_cash, status, started_at, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      user_id: {type: string, format: uuid}
      employee_id: {type: string, format: uuid}
      name: {type: string}
      starting_cash: {$ref: '#/definitions/MonetaryAmount'}
      ending_cash: {$ref: '#/definitions/MonetaryAmount'}
      cash_sales: {$ref: '#/definitions/MonetaryAmount'}
      cash_refunds: {$ref: '#/definitions/MonetaryAmount'}
      paid_in_and_out: {$ref: '#/definitions/MonetaryAmount'}
      tipped_in: {$ref: '#/definitions/MonetaryAmount'}
      tipped_out: {$ref: '#/definitions/MonetaryAmount'}
      paid_in: {$ref: '#/definitions/MonetaryAmount'}
      paid_out: {$ref: '#/definitions/MonetaryAmount'}
      expected: {$ref: '#/definitions/MonetaryAmount'}
      status: {$ref: '#/definitions/CashDrawerStatus'}
      started_at: {type: string, format: date-time}
      ended_at: {type: string, format: date-time}
      printer_mac_address: {type: string}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  CashDrawerActivity:
    type: object
    required: [id, type, timestamp, current_balance, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      user_id: {type: string, format: uuid}
      order_id: {type: string, format: uuid}
      cash_drawer_id: {type: string, format: uuid}
      type: {$ref: '#/definitions/CashDrawerActivityType'}
      starting_cash: {$ref: '#/definitions/MonetaryAmount'}
      ending_cash: {$ref: '#/definitions/MonetaryAmount'}
      pay_in: {$ref: '#/definitions/MonetaryAmount'}
      pay_out: {$ref: '#/definitions/MonetaryAmount'}
      tip_in: {$ref: '#/definitions/MonetaryAmount'}
      tip_out: {$ref: '#/definitions/MonetaryAmount'}
      current_balance: {$ref: '#/definitions/MonetaryAmount'}
      tip_for_user_id: {type: string, format: uuid}
      timestamp: {type: string, format: date-time}
      notes: {type: string}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  CashDrawerActivityList:
    type: array
    items: {$ref: '#/definitions/CashDrawerActivity'}
  CashDrawerActivityListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/CashDrawerActivityList'}
  CashDrawerActivityResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/CashDrawerActivity'}
  CashDrawerActivityType:
    type: string
    enum: [create, sale, refund, pay_in, pay_out, tip_in, tip_out, no_sale, values_override, end_cash, start_cash]
  CashDrawerActivityUpsertion:
    type: object
    required: [id, user_id, cash_drawer_id, type, current_balance_amount, timestamp]
    properties:
      id: {type: string, format: uuid}
      user_id: {type: string, format: uuid}
      order_id: {type: string, format: uuid}
      cash_drawer_id: {type: string, format: uuid}
      type: {$ref: '#/definitions/CashDrawerActivityType'}
      starting_cash_amount: {type: number, format: double}
      ending_cash_amount: {type: number, format: double}
      pay_in_amount: {type: number, format: double}
      pay_out_amount: {type: number, format: double}
      manual_pay_in_amount: {type: number, format: double}
      manual_pay_out_amount: {type: number, format: double}
      tip_in_amount: {type: number, format: double}
      tip_out_amount: {type: number, format: double}
      current_balance_amount: {type: number, format: double}
      tip_for_user_id: {type: string, format: uuid}
      timestamp: {type: string, format: date-time}
      notes: {type: string}
  CashDrawerList:
    type: array
    items: {$ref: '#/definitions/CashDrawer'}
  CashDrawerListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/CashDrawerList'}
  CashDrawerReason:
    type: object
    required: [position, reason_text, type]
    properties:
      position: {type: integer}
      reason_text: {type: string}
      type: {$ref: '#/definitions/CashDrawerActivityType'}
  CashDrawerReasonList:
    type: array
    items: {$ref: '#/definitions/CashDrawerReason'}
  CashDrawerReasonListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/CashDrawerReasonList'}
  CashDrawerResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/CashDrawer'}
  CashDrawerStatus:
    type: string
    enum: [created, started, ended]
  CashDrawerUpsertion:
    type: object
    required: [location_id, user_id, starting_cash_amount, status, started_at]
    properties:
      location_id: {type: string, format: uuid}
      user_id: {type: string, format: uuid}
      employee_id: {type: string, format: uuid}
      starting_cash_amount: {type: number, format: double}
      ending_cash_amount: {type: number, format: double}
      cash_sales_amount: {type: number, format: double}
      cash_refunds_amount: {type: number, format: double}
      paid_in_and_out_amount: {type: number, format: double}
      paid_in_amount: {type: number, format: double}
      paid_out_amount: {type: number, format: double}
      tipped_in_amount: {type: number, format: double}
      tipped_out_amount: {type: number, format: double}
      expected_amount: {type: number, format: double}
      status: {$ref: '#/definitions/CashDrawerStatus'}
      started_at: {type: string, format: date-time}
      ended_at: {type: string, format: date-time}
      printer_mac_address: {type: string}
      append_acitivities:
        type: array
        items: {$ref: '#/definitions/CashDrawerActivityUpsertion'}
  Catalog:
    type: object
    required: [id, name, type]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      products_count: {type: integer}
      categories_count: {type: integer}
      availabilities: {$ref: '#/definitions/Availabilities'}
      type: {$ref: '#/definitions/CatalogType'}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/CatalogLocation'
  CatalogType:
    type: string
    enum: [default_menu, menu]
  CatalogCategoryCreation:
    type: object
    required: [name, catalog_id]
    properties:
      name: {type: string}
      description: {type: string}
      catalog_id: {type: string, format: uuid}
      position: {type: integer}
      availabilities: {$ref: '#/definitions/Availabilities'}
  CatalogCategoryOption:
    type: object
    required: [category_id, delivery_enabled, take_away_enabled]
    properties:
      category_id: {type: string, format: uuid}
      delivery_enabled: {type: boolean}
      take_away_enabled: {type: boolean}
  CatalogCategoryProductAssignment:
    type: object
    required: [product_id]
    properties:
        product_id: {type: string, format: uuid}
        delivery_enabled: {type: boolean}
        take_away_enabled: {type: boolean}
  CatalogCategoryUpdate:
    type: object
    properties:
      name: {type: string}
      description: {type: string}
      catalog_id: {type: string, format: uuid}
      position: {type: integer}
      availabilities: {$ref: '#/definitions/Availabilities'}
  CatalogCreation:
    type: object
    required: [name]
    properties:
      name: {type: string}
      availabilities: {$ref: '#/definitions/Availabilities'}
  CatalogList:
    type: array
    items: {$ref: '#/definitions/Catalog'}
  CatalogListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/CatalogList'}
  CatalogLocation:
    type: object
    properties:
      availabilities: {$ref: '#/definitions/Availabilities'}
  CatalogResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Catalog'}
  CatalogUpdate:
    type: object
    properties:
      name: {type: string}
      availabilities: {$ref: '#/definitions/Availabilities'}
  Category:
    type: object
    required: [id, name, merchant_id, avatar_image_urls, position]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      merchant_id: {type: string, format: uuid}
      catalog_id: {type: string, format: uuid}
      description: {type: string}
      avatar_bg_color: {type: string}
      avatar_image_url: {type: string}
      avatar_image_urls:
        type: array
        items: {$ref: '#/definitions/ImageUrls'}
      position: {type: integer}
      active: {type: boolean}
      subcategories:
        type: array
        items: {$ref: '#/definitions/Category'}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/CategoryLocation'
      products_count: {type: integer}
      availabilities: {$ref: '#/definitions/Availabilities'}
  CategoryList:
    type: array
    items: {$ref: '#/definitions/Category'}
  CategoryListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/CategoryList'}
  CategoryLocation:
    type: object
    properties:
      active: {type: boolean}
      availabilities: {$ref: '#/definitions/Availabilities'}
  CategoryLocationUpdate:
    type: object
    properties:
      active: {type: boolean}
      availabilities: {$ref: '#/definitions/Availabilities'}
  CategoryPosition:
    type: object
    required: [category_id, position]
    properties:
      category_id: {type: string, format: uuid}
      position: {type: integer}
  CategoryResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Category'}
  CategorySales:
    type: object
    required: [id, name, data]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      data: {$ref: '#/definitions/OrderItemSalesAggregate'}
  CategorySalesList:
    type: array
    items: {$ref: '#/definitions/CategorySales'}
  CategorySalesReportData:
    type: object
    properties:
      timeframe: {$ref: '#/definitions/ReportTimeframe'}
      result: {$ref: '#/definitions/CategorySalesList'}
  CategorySalesReportDataList:
    type: array
    items: {$ref: '#/definitions/CategorySalesReportData'}
  CategorySalesReportResponse:
    type: object
    properties:
      meta: {$ref: '#/definitions/ReportMetadata'}
      data: {$ref: '#/definitions/CategorySalesReportDataList'}
  ChangeReason:
    type: string
    enum: [cost_decrease, cost_increase, discount, manual, price_increase, price_decrease, supplier_increase, supplier_decrease]
  Comment:
    type: object
    required: [id, user, body, created_at]
    properties:
      id: {type: string, format: uuid}
      user: {$ref: '#/definitions/UserInfo'}
      body: {type: string}
      created_at: {type: string, format: date-time}
  CommentCreation:
    type: object
    required: [object_id, body]
    properties:
      object_id: {type: string, format: uuid}
      body: {type: string}
  CommentList:
    type: array
    items: {$ref: '#/definitions/Comment'}
  CommentListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/CommentList'}
  CommentResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Comment'}
  CommentUpdate:
    type: object
    properties:
      object_id: {type: string, format: uuid}
      body: {type: string}
  Coordinates:
    type: object
    properties:
      lat: {type: number, format: double}
      lng: {type: number, format: double}
  CountResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {type: integer}
  Country:
    type: object
    required: [code, name]
    properties:
      code: {type: string}
      name: {type: string}
  CountryList:
    type: array
    items: {$ref: '#/definitions/Country'}
  CountryListResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/CountryList'}
  CustomerAggregate:
    type: object
    required: [count]
    properties:
      count: {type: integer}
      spend: {$ref: '#/definitions/MonetaryAmount'}
  CustomerAggregateList:
    type: array
    items: {$ref: '#/definitions/CustomerAggregate'}
  CustomerAggregateReportData:
    type: object
    properties:
      timeframe: {$ref: '#/definitions/ReportTimeframe'}
      result: {$ref: '#/definitions/CustomerAggregateList'}
  CustomerAggregateReportDataList:
    type: array
    items: {$ref: '#/definitions/CustomerAggregateReportData'}
  CustomerAggregateReportResponse:
    type: object
    properties:
      meta: {$ref: '#/definitions/ReportMetadata'}
      data: {$ref: '#/definitions/CustomerAggregateReportDataList'}
  CustomerMerchant:
    type: object
    required: [id, address, source, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      first_name: {type: string}
      last_name: {type: string}
      dob: {type: string, format: date}
      anniversary: {type: string, format: date}
      email: {type: string}
      phone_number: {type: string}
      address: {$ref: '#/definitions/Address'}
      mobile_storefront_last_login: {type: string, format: date-time}
      web_storefront_last_login: {type: string, format: date-time}
      total_visits: {type: integer}
      total_spend:
        type: array
        items: {$ref: '#/definitions/MonetaryAmount'}
      avg_tips:
        type: array
        items: {$ref: '#/definitions/MonetaryAmount'}
      locations:
        type: array
        items: {$ref: '#/definitions/Location'}
      loyalty_programs:
        type: array
        items: {$ref: '#/definitions/LoyaltyProgram'}
      loyalty_statuses:
        type: array
        items: {$ref: '#/definitions/LoyaltyMembership'}
      loyalty_memberships:
        type: array
        items: {$ref: '#/definitions/LoyaltyMembership'}
      billing_details: {$ref: '#/definitions/LegalDetails'}
      source: {$ref: '#/definitions/CustomerSource'}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  CustomerSource:
    type: string
    enum: [pt_register, pt_dashboard, pt_storefront, uber_eats, door_dash, postmates]
  CustomerSourceAlias:
    type: string
    enum: [all, visible, hidden, pt_register, pt_dashboard, pt_storefront, uber_eats, door_dash, postmates]
  CustomerMerchantList:
    type: array
    items: {$ref: '#/definitions/CustomerMerchant'}
  CustomerMerchantListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/CustomerMerchantList'}
  CustomerMerchantResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/CustomerMerchant'}
  CustomerMerchantUpsertion:
    type: object
    properties:
      first_name: {type: string}
      last_name: {type: string}
      dob: {type: string, format: date}
      anniversary: {type: string, format: date}
      email: {type: string}
      phone_number: {type: string}
      address: {$ref: '#/definitions/AddressUpsertion'}
      enroll_in_loyalty_program_id: {type: string, format: uuid}
      billing_details: {$ref: '#/definitions/LegalDetails'}
  CustomerNote:
    type: object
    required: [id, body, created_at]
    properties:
      id: {type: string, format: uuid}
      body: {type: string}
      created_at: {type: string, format: date-time}
  CustomerTop:
    type: object
    required: [id, profit, spend, margin, visits]
    properties:
      id: {type: string, format: uuid}
      first_name: {type: string}
      last_name: {type: string}
      profit: {$ref: '#/definitions/MonetaryAmount'}
      spend: {$ref: '#/definitions/MonetaryAmount'}
      margin: {type: number, format: double}
      visits: {type: integer}
  CustomerTopList:
    type: array
    items: {$ref: '#/definitions/CustomerTop'}
  CustomerTopReportData:
    type: object
    properties:
      timeframe: {$ref: '#/definitions/ReportTimeframe'}
      result: {$ref: '#/definitions/CustomerTopList'}
  CustomerTopReportDataList:
    type: array
    items: {$ref: '#/definitions/CustomerTopReportData'}
  CustomerTopReportResponse:
    type: object
    properties:
      meta: {$ref: '#/definitions/ReportMetadata'}
      data: {$ref: '#/definitions/CustomerTopReportDataList'}
  CustomersSummary:
    type: object
    required: [count, spend]
    properties:
      count: {type: integer}
      spend: {$ref: '#/definitions/MonetaryAmount'}
  DeliveryAddress:
    type: object
    required: [id, address]
    properties:
      id: {type: string, format: uuid}
      first_name: {type: string}
      last_name: {type: string}
      address: {$ref: '#/definitions/Address'}
      driving_distance_in_meters: {type: number, format: double}
      estimated_driving_time_in_mins: {type: integer}
  DeliveryAddressUpsertion:
    type: object
    required: [id]
    properties:
      id: {type: string, format: uuid}
      first_name: {type: string}
      last_name: {type: string}
      address: {$ref: '#/definitions/AddressUpsertion'}
      driving_distance_in_meters: {type: number, format: double}
      estimated_driving_time_in_mins: {type: number, format: integer}
  Discount:
    type: object
    required: [id, title, type, amount, require_manager_approval]
    properties:
      id: {type: string, format: uuid}
      title: {type: string}
      type: {$ref: '#/definitions/DiscountType'}
      currency: {type: string, format: currency}
      amount: {type: number, format: double}
      require_manager_approval: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ItemLocation'
      availability_hours: {$ref: '#/definitions/Availabilities'}
  DiscountCreation:
    type: object
    required: [title, type, amount]
    properties:
      title: {type: string}
      type: {$ref: '#/definitions/DiscountType'}
      amount: {type: number, format: double}
      require_manager_approval: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ItemLocationUpdate'
        description: a map from location id to a DiscountLocationUpdate
      availability_hours: {$ref: '#/definitions/Availabilities'}
  DiscountList:
    type: array
    items: {$ref: '#/definitions/Discount'}
  DiscountListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/DiscountList'}
  DiscountResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Discount'}
  DiscountType:
    type: string
    enum: [percentage, fixed_amount, custom_price]
  DiscountUpdate:
    type: object
    properties:
      title: {type: string}
      type: {$ref: '#/definitions/DiscountType'}
      amount: {type: number, format: double}
      require_manager_approval: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ItemLocationUpdate'
        description: a map from location id to a DiscountLocationUpdate
      availability_hours: {$ref: '#/definitions/Availabilities'}
  EntityOrdering:
    type: object
    required: [id, position]
    properties:
      id: {type: string, format: uuid}
      position: {type: integer}
  EntityOrderingList:
    type: array
    items: {$ref: '#/definitions/EntityOrdering'}
  Event:
    type: object
    required: [id, action, object, received_at]
    properties:
      id: {type: string, format: uuid}
      action: {$ref: '#/definitions/TrackableAction'}
      object: {$ref: '#/definitions/ExposedName'}
      data: {type: object}
      received_at: {type: string, format: date-time}
  EventList:
    type: array
    items: {$ref: '#/definitions/Event'}
  EventListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/EventList'}
  Export:
    type: object
    required: [id, type, status, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      type: {type: string}
      status: {$ref: '#/definitions/ExportStatus'}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  ExportDownload:
    type: object
    required: [url]
    properties:
      url: {type: string}
  ExportDownloadResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ExportDownload'}
  ExportResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Export'}
  ExportStatus:
    type: string
    enum: [not_started, processing, uploading, completed, failed]
  ExposedName:
    type: string
    enum: [category, product]
  FrequencyInterval:
    type: string
    enum: [day, week, month]
  FulfillmentStatus:
    type: string
    enum: [unfulfilled, fulfilled, partially_fulfilled, canceled]
  GenericListResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        pagination: {$ref: '#/definitions/PaginationLinks'}
  GenericListResponseWithMetadata:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        meta: {$ref: '#/definitions/GenericResponseMetadata'}
  GenericResponse:
    type: object
    properties:
      object: {type: string}
  GenericResponseMetadata:
    type: object
    properties:
      sales_summary: {type: object}
      type_summary: {type: object}
  GiftCard:
    type: object
    required: [id, amounts, business_name, template_created, active, product, avatar_image_urls, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      amounts:
        type: array
        items: {$ref: '#/definitions/MonetaryAmount'}
      business_name: {type: string}
      template_details: {type: string}
      template_created: {type: boolean}
      active: {type: boolean}
      product: {$ref: '#/definitions/Product'}
      avatar_image_urls:
        type: array
        items: {$ref: '#/definitions/ImageUrls'}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  GiftCardCreation:
    type: object
    required: [amounts, name, business_name]
    properties:
      amounts:
        type: array
        items: {type: number, format: double}
      business_name: {type: string}
      template_details: {type: string}
      active: {type: boolean}
      name: {type: string}
      upc: {type: string}
      sku: {type: string}
      image_upload_ids:
        type: array
        items: {type: string, format: uuid}
  GiftCardList:
    type: array
    items: {$ref: '#/definitions/GiftCard'}
  GiftCardListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/GiftCardList'}
  GiftCardPass:
    type: object
    required: [id, lookup_id, gift_card_id, order_item_id, original_balance, balance, pass_public_urls, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      lookup_id: {type: string}
      gift_card_id: {type: string, format: uuid}
      order_item_id: {type: string, format: uuid}
      original_balance: {$ref: '#/definitions/MonetaryAmount'}
      balance: {$ref: '#/definitions/MonetaryAmount'}
      pass_public_urls: {$ref: '#/definitions/PassUrls'}
      transactions:
        type: array
        items: {$ref: '#/definitions/GiftCardPassTransaction'}
      pass_installed_at: {type: string, format: date-time}
      recipient_email: {type: string}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  GiftCardPassAggregate:
    type: object
    required: [count]
    properties:
      count: {type: integer}
      customers: {type: integer}
      total: {$ref: '#/definitions/MonetaryAmount'}
      redeemed: {$ref: '#/definitions/MonetaryAmount'}
      unused: {$ref: '#/definitions/MonetaryAmount'}
  GiftCardPassAggregateList:
    type: array
    items: {$ref: '#/definitions/GiftCardPassAggregate'}
  GiftCardPassAggregateReportData:
    type: object
    properties:
      timeframe: {$ref: '#/definitions/ReportTimeframe'}
      result: {$ref: '#/definitions/GiftCardPassAggregateList'}
  GiftCardPassAggregateReportDataList:
    type: array
    items: {$ref: '#/definitions/GiftCardPassAggregateReportData'}
  GiftCardPassAggregateReportResponse:
    type: object
    properties:
      meta: {$ref: '#/definitions/ReportMetadata'}
      data: {$ref: '#/definitions/GiftCardPassAggregateReportDataList'}
  GiftCardPassCharge:
    type: object
    required: [gift_card_pass_id, amount]
    properties:
      gift_card_pass_id: {type: string, format: uuid}
      amount: {type: number, format: double}
  GiftCardPassInfo:
    type: object
    required: [id, lookup_id]
    properties:
      id: {type: string, format: uuid}
      lookup_id: {type: string}
      online_code: {type: string}
      recipient_email: {type: string}
  GiftCardPassResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/GiftCardPass'}
  GiftCardPassSalesReport:
    type: object
    required: [count, customers, value]
    properties:
      count: {type: integer}
      customers: {type: integer}
      value: {$ref: '#/definitions/MonetaryAmount'}
  GiftCardPassSalesSummary:
    type: object
    required: [purchased, used, unused]
    properties:
      purchased: {$ref: '#/definitions/GiftCardPassSalesReport'}
      used: {$ref: '#/definitions/GiftCardPassSalesReport'}
      unused: {$ref: '#/definitions/GiftCardPassSalesReport'}
  GiftCardPassSalesSummaryResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/GiftCardPassSalesSummary'}
  GiftCardPassTransaction:
    type: object
    required: [id, total, created_at, type, updated_at]
    properties:
      id: {type: string, format: uuid}
      total: {$ref: '#/definitions/MonetaryAmount'}
      created_at: {type: string, format: date-time}
      type: {$ref: '#/definitions/GiftCardPassTransactionType'}
      pass: {$ref: '#/definitions/GiftCardPass'}
      updated_at: {type: string, format: date-time}
  GiftCardPassTransactionResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/GiftCardPassTransaction'}
  GiftCardPassTransactionType:
    type: string
    enum: [payment, refund]
  GiftCardResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/GiftCard'}
  GiftCardUpdate:
    type: object
    properties:
      amounts:
        type: array
        items: {type: number, format: double}
      business_name: {type: string}
      template_details: {type: string}
      active: {type: boolean}
      name: {type: string}
      upc: {type: string}
      sku: {type: string}
      image_upload_ids:
        type: array
        items: {type: string, format: uuid}
  GoogleIdToken:
    type: object
    required: [id_token]
    properties:
      id_token: {type: string}
  Group:
    type: object
    required: [id, name]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      customers:
        type: array
        items: {$ref: '#/definitions/CustomerMerchant'}
      customers_count: {type: integer}
      revenues:
        type: array
        items: {$ref: '#/definitions/MonetaryAmount'}
      visits: {type: integer}
  GroupCreation:
    type: object
    required: [name, customer_ids]
    properties:
      name: {type: string}
      customer_ids:
        type: array
        items: {type: string, format: uuid}
  GroupList:
    type: array
    items: {$ref: '#/definitions/Group'}
  GroupListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/GroupList'}
  GroupResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Group'}
  GroupTop:
    type: object
    required: [id, name, spend, profit, margin, visits]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      spend: {$ref: '#/definitions/MonetaryAmount'}
      profit: {$ref: '#/definitions/MonetaryAmount'}
      margin: {type: number, format: double}
      visits: {type: integer}
  GroupTopList:
    type: array
    items: {$ref: '#/definitions/GroupTop'}
  GroupTopReportData:
    type: object
    properties:
      timeframe: {$ref: '#/definitions/ReportTimeframe'}
      result: {$ref: '#/definitions/GroupTopList'}
  GroupTopReportDataList:
    type: array
    items: {$ref: '#/definitions/GroupTopReportData'}
  GroupTopReportResponse:
    type: object
    properties:
      meta: {$ref: '#/definitions/ReportMetadata'}
      data: {$ref: '#/definitions/GroupTopReportDataList'}
  GroupUpdate:
    type: object
    properties:
      name: {type: string}
      customer_ids:
        type: array
        items: {type: string, format: uuid}
  Id:
    type: object
    required: [id]
    properties:
      id: {type: string, format: uuid}
  IdList:
    type: array
    items: {$ref: '#/definitions/Id'}
  IdListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/IdList'}
  Ids:
    type: object
    required: [ids]
    properties:
      ids:
        type: array
        items: {type: string, format: uuid}
  IdsToValidate:
    type: object
    properties:
      location_ids:
        type: array
        items: {type: string, format: uuid}
      catalog_ids:
        type: array
        items: {type: string, format: uuid}
      image_upload_ids:
        type: string
        description: 'A map of image upload type and image upload ids'
  ImageUploadUrls:
    type: object
    description: A map of image sizes and CDN URLs. If null the upload is not complete.
    additionalProperties:
      type: string
  ImageUpload:
    type: object
    required: [id, file_name, object_type]
    properties:
      id: {type: string, format: uuid}
      urls: {$ref: '#/definitions/ImageUploadUrls'}
      file_name: {type: string}
      object_id: {type: string, format: uuid}
      object_type: {$ref: '#/definitions/ImageUploadType'}
      upload_url: {type: string, description: 'The URL to upload the image directly from the client. The client should make a PUT request with the image to this URL, then call /v2/image_uploads.upload_complete.'}
  ImageUploadResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ImageUpload'}
  ImageUploadType:
    type: string
    enum: [category, product, email_receipt, print_receipt, user, gift_card, loyalty_program, store_hero, store_logo]
  ImageUploadUpsertionV1:
    type: object
    required: [object_type, file, original_file_name]
    properties:
      object_type: {$ref: '#/definitions/ImageUploadType'}
      file: {type: string, format: file}
      original_file_name: {type: string}
  ImageUploadCreation:
    type: object
    required: [object_type, original_file_name]
    properties:
      object_type: {$ref: '#/definitions/ImageUploadType'}
      original_file_name: {type: string}
  ImageUrls:
    type: object
    required: [image_upload_id, urls]
    properties:
      image_upload_id: {type: string, format: uuid}
      urls:
        type: object
        description: 'A map of sizes and S3 urls. If null, the upload is still in progress'
        properties:
          thumbnail: {type: string}
          small: {type: string}
          medium: {type: string}
          large: {type: string}
          original: {type: string}
  Import:
    type: object
    required: [id, type, location_ids, validation_status, import_status, delete_existing, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      type: {$ref: '#/definitions/ImportType'}
      location_ids:
        type: array
        items: {type: string, format: uuid}
      validation_status: {$ref: '#/definitions/ImportStatus'}
      import_status: {$ref: '#/definitions/ImportStatus'}
      validation_errors: {type: object}
      import_summary: {type: object}
      delete_existing: {type: boolean}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  ImportResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Import'}
  ImportStatus:
    type: string
    enum: [not_started, in_progress, failed, successful]
  ImportType:
    type: string
    enum: [product]
  Inventory:
    type: object
    required: [id, name, total_quantity, total_sold, total_revenue, stock_value]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      upc: {type: string}
      sku: {type: string}
      total_quantity: {$ref: '#/definitions/ProductQuantity'}
      total_sold: {$ref: '#/definitions/ProductQuantity'}
      total_revenue:
        type: array
        items: {$ref: '#/definitions/MonetaryAmount'}
      stock_value: {$ref: '#/definitions/MonetaryAmount'}
  InventoryCount:
    type: object
    required: [id, number, products_count, status, synced, created_at]
    properties:
      id: {type: string, format: uuid}
      user: {$ref: '#/definitions/UserInfo'}
      location: {$ref: '#/definitions/Location'}
      number: {type: string}
      products_count: {type: integer}
      value_change: {$ref: '#/definitions/MonetaryAmount'}
      status: {$ref: '#/definitions/InventoryCountStatus'}
      synced: {type: boolean}
      created_at: {type: string, format: date-time}
  InventoryCountCreation:
    type: object
    required: [location_id, products]
    properties:
      location_id: {type: string, format: uuid}
      products:
        type: array
        items: {$ref: '#/definitions/InventoryCountProductUpsertion'}
  InventoryCountList:
    type: array
    items: {$ref: '#/definitions/InventoryCount'}
  InventoryCountListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/InventoryCountList'}
  InventoryCountProduct:
    type: object
    required: [product_id, product_name, product_unit, options]
    properties:
      product_id: {type: string, format: uuid}
      product_name: {type: string}
      product_unit: {$ref: '#/definitions/UnitType'}
      product_cost: {$ref: '#/definitions/MonetaryAmount'}
      expected_quantity: {type: number, format: double}
      counted_quantity: {type: number, format: double}
      value: {$ref: '#/definitions/MonetaryAmount'}
      options:
        type: array
        items: {$ref: '#/definitions/VariantOptionWithType'}
  InventoryCountProductList:
    type: array
    items: {$ref: '#/definitions/InventoryCountProduct'}
  InventoryCountProductListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/InventoryCountProductList'}
  InventoryCountProductUpsertion:
    type: object
    required: [product_id]
    properties:
      product_id: {type: string, format: uuid}
      expected_quantity: {type: number, format: double}
      counted_quantity: {type: number, format: double}
  InventoryCountResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/InventoryCount'}
  InventoryCountStatus:
    type: string
    enum: [matched, unmatched, in_progress]
  InventoryCountUpdate:
    type: object
    properties:
      location_id: {type: string, format: uuid}
      products:
        type: array
        items: {$ref: '#/definitions/InventoryCountProductUpsertion'}
  InventoryList:
    type: array
    items: {$ref: '#/definitions/Inventory'}
  InventoryListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/InventoryList'}
  ItemDiscountUpsertion:
    type: object
    required: [type, amount]
    properties:
      id: {type: string, format: uuid}
      discount_id: {type: string, format: uuid}
      title: {type: string}
      type: {$ref: '#/definitions/DiscountType'}
      amount: {type: number, format: double}
      total_amount: {type: number, format: double}
  ItemLocation:
    type: object
    required: [active]
    properties:
      active: {type: boolean}
  ItemLocationUpdate:
    type: object
    properties:
      active: {type: boolean}
  JetpayConfig:
    type: object
    required: [merchant_id, refund_standard_adjustment_fee]
    properties:
      merchant_id: {type: string}
      refund_standard_adjustment_fee: {type: string}
  Kitchen:
    type: object
    required: [id, location_id, name]
    properties:
      id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      name: {type: string}
      type: {$ref: '#/definitions/KitchenType'}
      active: {type: boolean}
      kds_enabled: {type: boolean}
  KitchenCreation:
    type: object
    required: [location_id, name, type]
    properties:
      location_id: {type: string, format: uuid}
      name: {type: string}
      type: {$ref: '#/definitions/KitchenType'}
      active: {type: boolean}
      kds_enabled: {type: boolean}
  KitchenList:
    type: array
    items: {$ref: '#/definitions/Kitchen'}
  KitchenListResponse:
    allOf:
      - {$ref: '#/definitions/GenericListResponse'}
      - type: object
        properties:
          data: {$ref: '#/definitions/KitchenList'}
  KitchenResponse:
    allOf:
      - {$ref: '#/definitions/GenericResponse'}
      - type: object
        properties:
          data: {$ref: '#/definitions/Kitchen'}
  KitchenType:
    type: string
    enum: [bar, kitchen]
  KitchenUpdate:
    type: object
    properties:
      location_id: {type: string, format: uuid}
      name: {type: string}
      type: {$ref: '#/definitions/KitchenType'}
      active: {type: boolean}
      kds_enabled: {type: boolean}
  LegalDetails:
    type: object
    properties:
      business_name: {type: string}
      vat_id: {type: string}
      address: {$ref: '#/definitions/AddressImproved'}
      invoicing_code: {type: string}
  LoadingStatus:
    type: string
    enum: [not_started, in_progress, failed, successful]
  Location:
    type: object
    required: [id, name, phone_number, active, address, timezone, currency]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      email: {type: string}
      phone_number: {type: string}
      website: {type: string}
      active: {type: boolean}
      address: {$ref: '#/definitions/Address'}
      timezone: {type: string, format: time-zone}
      currency: {type: string, format: currency}
      settings: {$ref: '#/definitions/LocationSettings'}
      tax_rates:
        type: array
        items: {$ref: '#/definitions/TaxRate'}
      opening_hours: {$ref: '#/definitions/Availabilities'}
      coordinates: {$ref: '#/definitions/Coordinates'}
      dummy_data: {type: boolean, description: 'Indicates a location has dummy data for the name and address.'}
  LocationCreation:
    type: object
    required: [name, timezone, opening_hours]
    properties:
      name: {type: string}
      email: {type: string}
      phone_number: {type: string}
      website: {type: string}
      address: {$ref: '#/definitions/AddressUpsertion'}
      timezone: {type: string, format: time-zone}
      opening_hours: {$ref: '#/definitions/Availabilities'}
      initial_order_number: {type: integer}
      coordinates: {$ref: '#/definitions/Coordinates'}
  LocationEmailReceipt:
    type: object
    required: [location_id, address, include_item_description]
    properties:
      location_id: {type: string, format: uuid}
      header_color: {type: string}
      location_name: {type: string}
      address: {$ref: '#/definitions/Address'}
      include_item_description: {type: boolean}
      website_url: {type: string}
      facebook_url: {type: string}
      twitter_url: {type: string}
      image_urls: {$ref: '#/definitions/ImageUrls'}
  LocationEmailReceiptUpdate:
    type: object
    properties:
      header_color: {type: string}
      location_name: {type: string}
      address: {$ref: '#/definitions/AddressUpsertion'}
      include_item_description: {type: boolean}
      website_url: {type: string}
      facebook_url: {type: string}
      twitter_url: {type: string}
      image_upload_id: {type: string, format: uuid}
  LocationGiftCardPasses:
    type: object
    required: [id, name, data]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      address_line1: {type: string}
      data: {$ref: '#/definitions/GiftCardPassAggregate'}
  LocationGiftCardPassesList:
    type: array
    items: {$ref: '#/definitions/LocationGiftCardPasses'}
  LocationGiftCardPassesReportData:
    type: object
    properties:
      timeframe: {$ref: '#/definitions/ReportTimeframe'}
      result: {$ref: '#/definitions/LocationGiftCardPassesList'}
  LocationGiftCardPassesReportDataList:
    type: array
    items: {$ref: '#/definitions/LocationGiftCardPassesReportData'}
  LocationGiftCardPassesReportResponse:
    type: object
    properties:
      meta: {$ref: '#/definitions/ReportMetadata'}
      data: {$ref: '#/definitions/LocationGiftCardPassesReportDataList'}
  LocationList:
    type: array
    items: {$ref: '#/definitions/Location'}
  LocationListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/LocationList'}
  LocationPrintReceipt:
    type: object
    required: [location_id, address, include_item_description]
    properties:
      location_id: {type: string, format: uuid}
      header_color: {type: string}
      location_name: {type: string}
      address: {$ref: '#/definitions/Address'}
      include_item_description: {type: boolean}
      image_urls: {$ref: '#/definitions/ImageUrls'}
  LocationPrintReceiptUpdate:
    type: object
    properties:
      header_color: {type: string}
      location_name: {type: string}
      address: {$ref: '#/definitions/AddressUpsertion'}
      include_item_description: {type: boolean}
      image_upload_id: {type: string, format: uuid}
  LocationReceipt:
    type: object
    required: [location_id, location_name, address, show_custom_text, show_return_policy, email_image_urls, print_image_urls,
      created_at, updated_at]
    properties:
      location_id: {type: string, format: uuid}
      location_name: {type: string}
      header_color: {type: string}
      address: {$ref: '#/definitions/Address'}
      phone_number: {type: string}
      website_url: {type: string}
      facebook_url: {type: string}
      twitter_url: {type: string}
      show_custom_text: {type: boolean}
      custom_text: {type: string}
      show_return_policy: {type: boolean}
      return_policy_text: {type: string}
      email_image_urls:
        type: array
        items: {$ref: '#/definitions/ImageUrls'}
      print_image_urls:
        type: array
        items: {$ref: '#/definitions/ImageUrls'}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  LocationReceiptUpdate:
    type: object
    properties:
      location_name: {type: string}
      header_color: {type: string}
      address: {$ref: '#/definitions/AddressUpsertion'}
      phone_number: {type: string}
      website_url: {type: string}
      facebook_url: {type: string}
      twitter_url: {type: string}
      show_custom_text: {type: boolean}
      custom_text: {type: string}
      show_return_policy: {type: boolean}
      return_policy_text: {type: string}
      email_image_upload_ids:
        type: array
        items: {type: string, format: uuid}
      print_image_upload_ids:
        type: array
        items: {type: string, format: uuid}
  LocationResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Location'}
  LocationSales:
    type: object
    required: [id, name, data]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      address_line1: {type: string}
      data: {$ref: '#/definitions/SalesAggregate'}
  LocationSalesList:
    type: array
    items: {$ref: '#/definitions/LocationSales'}
  LocationSalesReportData:
    type: object
    properties:
      timeframe: {$ref: '#/definitions/ReportTimeframe'}
      result: {$ref: '#/definitions/LocationSalesList'}
  LocationSalesReportDataList:
    type: array
    items: {$ref: '#/definitions/LocationSalesReportData'}
  LocationSalesReportResponse:
    type: object
    properties:
      meta: {$ref: '#/definitions/ReportMetadata'}
      data: {$ref: '#/definitions/LocationSalesReportDataList'}
  LocationSettings:
    type: object
    required: [
      location_id,
      order_routing_auto,
      order_routing_bar,
      order_routing_kitchen,
      order_type_dine_in,
      order_type_take_out,
      order_type_delivery_restaurant,
      order_type_in_store,
      order_type_in_store_pick_up,
      order_type_delivery_retail,
      bar_view_active,
      kitchen_view_active,
      invoices_active,
      discount_below_cost_active,
      cash_drawer_management,
      gift_cards_active,
      payment_type_credit_card,
      payment_type_cash,
      payment_type_debit_card,
      payment_type_check,
      payment_type_gift_card,
      payment_type_store_credit,
      payment_type_ebt,
      payment_type_apple_pay,
      tips_handling,
      tips_on_device_enabled,
      bypass_signature_amount,
      online_storefront_enabled,
      preauth_enabled,
      cfd,
      online_order,
      rapido_enabled,
    ]
    properties:
      location_id: {type: string, format: uuid}
      order_routing_auto: {type: boolean}
      order_routing_bar: {type: boolean}
      order_routing_kitchen: {type: boolean}
      order_type_dine_in: {type: boolean}
      order_type_take_out: {type: boolean}
      order_type_delivery_restaurant: {type: boolean}
      order_type_in_store: {type: boolean}
      order_type_in_store_pick_up: {type: boolean}
      order_type_delivery_retail: {type: boolean}
      bar_view_active: {type: boolean}
      kitchen_view_active: {type: boolean}
      invoices_active: {type: boolean}
      discount_below_cost_active: {type: boolean}
      cash_drawer_management: {$ref: '#/definitions/CashDrawerManagementMode'}
      gift_cards_active: {type: boolean}
      payment_type_credit_card: {type: boolean}
      payment_type_cash: {type: boolean}
      payment_type_debit_card: {type: boolean}
      payment_type_check: {type: boolean}
      payment_type_gift_card: {type: boolean}
      payment_type_store_credit: {type: boolean}
      payment_type_ebt: {type: boolean}
      payment_type_apple_pay: {type: boolean}
      tips_handling: {$ref: '#/definitions/TipsHandlingMode'}
      tips_on_device_enabled: {type: boolean}
      bypass_signature_amount: {type: number, format: double}
      online_storefront_enabled: {type: boolean}
      delivery_providers_enabled: {type: boolean}
      order_autocomplete: {type: boolean}
      preauth_enabled: {type: boolean}
      next_order_number_scope_type: {$ref: '#/definitions/ScopeType'}
      location_email_receipt: {$ref: '#/definitions/LocationEmailReceipt'}
      location_print_receipt: {$ref: '#/definitions/LocationPrintReceipt'}
      location_receipt: {$ref: '#/definitions/LocationReceipt'}
      cfd: {$ref: '#/definitions/CfdSettings'}
      online_order: {$ref: '#/definitions/OnlineOrderSettings'}
      rapido_enabled: {type: boolean}
  CashDrawerManagementMode:
    type: string
    enum: [locked, unlocked, disabled]
  TipsHandlingMode:
    type: string
    enum: [tip_jar, employee_driven, disabled]
  ScopeType:
    type: string
    enum: [merchant, location, location_daily]
  LocationSettingsUpdate:
    type: object
    properties:
      order_routing_auto: {type: boolean}
      order_type_dine_in: {type: boolean}
      order_type_take_out: {type: boolean}
      order_type_delivery_restaurant: {type: boolean}
      order_type_in_store: {type: boolean}
      order_type_in_store_pick_up: {type: boolean}
      order_type_delivery_retail: {type: boolean}
      invoices_active: {type: boolean}
      discount_below_cost_active: {type: boolean}
      cash_drawer_management: {$ref: '#/definitions/CashDrawerManagementMode'}
      gift_cards_active: {type: boolean}
      payment_type_credit_card: {type: boolean}
      payment_type_cash: {type: boolean}
      payment_type_debit_card: {type: boolean}
      payment_type_check: {type: boolean}
      payment_type_gift_card: {type: boolean}
      payment_type_store_credit: {type: boolean}
      payment_type_ebt: {type: boolean}
      payment_type_apple_pay: {type: boolean}
      tips_handling: {$ref: '#/definitions/TipsHandlingMode'}
      tips_on_device_enabled: {type: boolean}
      bypass_signature_amount: {type: number, format: double}
      delivery_providers_enabled: {type: boolean}
      order_autocomplete: {type: boolean}
      preauth_enabled: {type: boolean}
      next_order_number_scope_type: {$ref: '#/definitions/ScopeType'}
      location_email_receipt: {$ref: '#/definitions/LocationEmailReceiptUpdate'}
      location_print_receipt: {$ref: '#/definitions/LocationPrintReceiptUpdate'}
      location_receipt: {$ref: '#/definitions/LocationReceiptUpdate'}
      cfd: {$ref: '#/definitions/CfdSettingsUpdate'}
      online_order: {$ref: '#/definitions/OnlineOrderSettingsUpdate'}
  CfdSettings:
    type: object
    properties:
      show_custom_text: {type: boolean}
      custom_text: {type: string}
      splash_image_urls:
        type: array
        items: {$ref: '#/definitions/ImageUrls'}
  CfdSettingsUpdate:
    type: object
    properties:
      show_custom_text: {type: boolean}
      custom_text: {type: string}
      splash_image_upload_ids:
        type: array
        items: {type: string, format: uuid}
  OnlineOrderSettings:
    type: object
    properties:
      default_estimated_prep_time_in_mins: {type: integer}
  OnlineOrderSettingsUpdate:
    type: object
    properties:
      default_estimated_prep_time_in_mins: {type: integer}
  LocationUpdate:
    type: object
    properties:
      name: {type: string}
      email: {type: string}
      phone_number: {type: string}
      website: {type: string}
      address: {$ref: '#/definitions/AddressUpsertion'}
      timezone: {type: string, format: time-zone}
      opening_hours: {$ref: '#/definitions/Availabilities'}
      initial_order_number: {type: integer}
      coordinates: {$ref: '#/definitions/Coordinates'}
      dummy_data: {type: boolean}
  Auth0Credentials:
    type: object
    required: [token, source]
    properties:
      token: {type: string}
      source: {$ref: '#/definitions/LoginSource'}
  LoginCredentials:
    type: object
    required: [email, password, source]
    properties:
      email: {type: string}
      password: {type: string}
      source: {$ref: '#/definitions/LoginSource'}
  LoginResponse:
    type: object
    required: [data]
    properties:
      data: {$ref: '#/definitions/LoginResponseData'}
  LoginResponseData:
    type: object
    required: [value]
    properties:
      value: {type: string}
      hashed_pin: {type: string}
  LoginSource:
    type: string
    enum: [pt_dashboard, pt_register, pt_tickets, pt_admin]
  LoyaltyMembership:
    type: object
    required: [id, customer_id, loyalty_program_id, lookup_id, points, pass_public_urls, points_to_next_reward, enrolled,
      visits, total_spend]
    properties:
      id: {type: string, format: uuid}
      customer_id: {type: string, format: uuid}
      loyalty_program_id: {type: string, format: uuid}
      lookup_id: {type: string}
      points: {type: integer}
      pass_public_urls: {$ref: '#/definitions/PassUrls'}
      points_to_next_reward: {type: integer}
      customer_opt_in_at: {type: string, format: date-time}
      merchant_opt_in_at: {type: string, format: date-time}
      enrolled: {type: boolean}
      visits: {type: integer}
      total_spend: {$ref: '#/definitions/MonetaryAmount'}
  LoyaltyPoints:
    type: object
    required: [amount, mode]
    properties:
      amount: {type: integer}
      mode: {$ref: '#/definitions/LoyaltyPointsMode'}
  LoyaltyPointsMode:
    type: string
    enum: [actual, potential]
  LoyaltyProgram:
    type: object
    required: [id, name, type, points, points_to_reward, active, rewards, icon_image_urls]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      type: {$ref: '#/definitions/LoyaltyProgramType'}
      points: {type: integer}
      spend_amount_for_points: {type: number, format: double}
      points_to_reward: {type: integer}
      minimum_purchase: {$ref: '#/definitions/MonetaryAmount'}
      signup_reward_enabled: {type: boolean}
      signup_reward_points: {type: integer}
      active: {type: boolean}
      template_details: {type: string}
      welcome_email_subject: {type: string}
      welcome_email_color: {type: string}
      rewards:
        type: array
        items: {$ref: '#/definitions/LoyaltyReward'}
      locations:
        type: array
        items: {$ref: '#/definitions/Location'}
      icon_image_urls:
        type: array
        items: {$ref: '#/definitions/ImageUrls'}
  LoyaltyProgramCreation:
    type: object
    required: [name, type, points, points_to_reward]
    properties:
      name: {type: string}
      type: {$ref: '#/definitions/LoyaltyProgramType'}
      points: {type: integer}
      spend_amount_for_points: {type: number, format: double}
      points_to_reward: {type: integer}
      minimum_purchase_amount: {type: number, format: double}
      signup_reward_enabled: {type: boolean}
      signup_reward_points: {type: integer}
      active: {type: boolean}
      template_details: {type: string}
      welcome_email_subject: {type: string}
      welcome_email_color: {type: string}
      location_ids:
        type: array
        items: {type: string, format: uuid}
      rewards:
        type: array
        items: {$ref: '#/definitions/LoyaltyRewardCreation'}
      image_upload_ids:
        type: array
        items: {type: string, format: uuid}
  LoyaltyProgramList:
    type: array
    items: {$ref: '#/definitions/LoyaltyProgram'}
  LoyaltyProgramListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/LoyaltyProgramList'}
  LoyaltyProgramResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/LoyaltyProgram'}
  LoyaltyProgramType:
    type: string
    enum: [frequency, spend]
  LoyaltyProgramUpdate:
    type: object
    properties:
      name: {type: string}
      type: {$ref: '#/definitions/LoyaltyProgramType'}
      points: {type: integer}
      spend_amount_for_points: {type: number, format: double}
      points_to_reward: {type: integer}
      minimum_purchase_amount: {type: number, format: double}
      signup_reward_enabled: {type: boolean}
      signup_reward_points: {type: integer}
      active: {type: boolean}
      template_details: {type: string}
      welcome_email_subject: {type: string}
      welcome_email_color: {type: string}
      location_ids:
        type: array
        items: {type: string, format: uuid}
      rewards:
        type: array
        items: {$ref: '#/definitions/LoyaltyRewardUpdate'}
      image_upload_ids:
        type: array
        items: {type: string, format: uuid}
  LoyaltyReward:
    type: object
    required: [id, type, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      type: {$ref: '#/definitions/RewardType'}
      amount: {type: number, format: double}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  LoyaltyRewardCreation:
    type: object
    required: [id, type]
    properties:
      id: {type: string, format: uuid}
      type: {$ref: '#/definitions/RewardType'}
      amount: {type: number, format: double}
  LoyaltyRewardUpdate:
    type: object
    required: [id]
    properties:
      id: {type: string, format: uuid}
      type: {$ref: '#/definitions/RewardType'}
      amount: {type: number, format: double}
  Merchant:
    type: object
    required: [id, business_type, restaurant_type, payment_processor, payment_processor_config, currency, name, display_name, logo_urls, mode, loading_status, default_zone_id, setup_completed, features]
    properties:
      id: {type: string, format: uuid}
      business_type: {$ref: '#/definitions/BusinessType'}
      restaurant_type: {$ref: '#/definitions/RestaurantType'}
      payment_processor: {$ref: '#/definitions/PaymentProcessor'}
      payment_processor_config: {$ref: '#/definitions/PaymentProcessorConfigUnionType'}
      currency: {type: string, format: currency}
      name: {type: string}
      display_name: {type: string}
      logo_urls:
        type: array
        items: {$ref: '#/definitions/ImageUrls'}
      owner_user: {$ref: '#/definitions/User'}
      mode: {$ref: '#/definitions/MerchantMode'}
      loading_status: {$ref: '#/definitions/LoadingStatus'}
      default_zone_id: {type: string, format: time-zone}
      setup_completed: {type: boolean}
      setup_steps:
        type: object
        additionalProperties:
          type: array
          items: {$ref: '#/definitions/MerchantSetupStatus'}
      features: {$ref: '#/definitions/MerchantFeatures'}
      legal_details: {$ref: '#/definitions/LegalDetails'}
      legal_country: {$ref: '#/definitions/Country'}
      setup_type: {$ref: '#/definitions/SetupType'}
  MerchantCreation:
    type: object
    required: [business_type, business_name, restaurant_type, currency, first_name, last_name, password, email, zone_id]
    properties:
      business_type: {$ref: '#/definitions/BusinessType'}
      business_name: {type: string}
      address: {type: AddressUpsertion, description: 'Address to use for the default location'}
      restaurant_type: {$ref: '#/definitions/RestaurantType'}
      currency: {type: string, format: currency}
      first_name: {type: string}
      last_name: {type: string}
      password: {type: string}
      email: {type: string}
      zone_id: {type: string, format: time-zone}
      legal_details: {$ref: '#/definitions/LegalDetails'}
      pin: {type: string}
      worldpay: {$ref: '#/definitions/WorldpayConfig', description: 'If not passed, a default will be used'}
      features: {$ref: '#/definitions/MerchantFeaturesUpsertion', description: 'If any keys are not passed, the default values will be used'}
      mode: {$ref: '#/definitions/MerchantMode'}
      setup_type: {$ref: '#/definitions/SetupType'}
      dummy_data: {type: boolean, description: 'Sets the dummy data flag for dashboard use'}
  MerchantListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/MerchantList'}
  MerchantList:
    type: array
    items: {$ref: '#/definitions/Merchant'}
  MerchantMode:
    type: string
    enum: [demo, production]
  MerchantNote:
    type: object
    required: [id, body, created_at]
    properties:
      id: {type: string, format: uuid}
      user: {$ref: '#/definitions/UserInfo'}
      body: {type: string}
      created_at: {type: string, format: date-time}
  MerchantNoteUpsertion:
    type: object
    required: [id, user_id, body, created_at]
    properties:
      id: {type: string, format: uuid}
      user_id: {type: string, format: uuid}
      body: {type: string}
      created_at: {type: string, format: date-time}
  MerchantResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Merchant'}
  MerchantSetupStatus:
    type: string
    enum: [pending, completed, skipped]
  AdminMerchantUpdate:
    type: object
    properties:
      business_type: {$ref: '#/definitions/BusinessType'}
      business_name: {type: string}
      restaurant_type: {$ref: '#/definitions/RestaurantType'}
      worldpay: {$ref: '#/definitions/WorldpayConfig', description: 'If not passed, a default will be used'}
      legal_details: {$ref: '#/definitions/LegalDetails'}
      zone_id: {type: string, format: time-zone}
      features: {$ref: '#/definitions/MerchantFeaturesUpsertion', description: 'Partial updates are supported at the first level, e.g. if you just want to change something under the sales key, you can pass just that.'}
      setup_type: {$ref: '#/definitions/SetupType'}
  MerchantFeatures:
    type: object
    required: [sales, reports, gift_cards, inventory, tables, employees, customers, coupons, loyalty, engagement, online_store]
    properties:
      pos: {$ref: '#/definitions/MerchantFeature'}
      sales: {$ref: '#/definitions/MerchantFeature'}
      reports: {$ref: '#/definitions/MerchantFeature'}
      gift_cards: {$ref: '#/definitions/MerchantFeature'}
      inventory: {$ref: '#/definitions/MerchantFeature'}
      tables: {$ref: '#/definitions/MerchantFeature'}
      employees: {$ref: '#/definitions/MerchantFeature'}
      customers: {$ref: '#/definitions/MerchantFeature'}
      coupons: {$ref: '#/definitions/MerchantFeature'}
      loyalty: {$ref: '#/definitions/MerchantFeature'}
      engagement: {$ref: '#/definitions/MerchantFeature'}
      online_store: {$ref: '#/definitions/MerchantFeature'}
  MerchantFeature:
    type: object
    required: [enabled]
    properties:
      enabled: {type: boolean}
  MerchantFeaturesUpsertion:
    type: object
    properties:
      pos: {$ref: '#/definitions/MerchantFeature'}
      sales: {$ref: '#/definitions/MerchantFeature'}
      reports: {$ref: '#/definitions/MerchantFeature'}
      gift_cards: {$ref: '#/definitions/MerchantFeature'}
      inventory: {$ref: '#/definitions/MerchantFeature'}
      tables: {$ref: '#/definitions/MerchantFeature'}
      employees: {$ref: '#/definitions/MerchantFeature'}
      customers: {$ref: '#/definitions/MerchantFeature'}
      coupons: {$ref: '#/definitions/MerchantFeature'}
      loyalty: {$ref: '#/definitions/MerchantFeature'}
      engagement: {$ref: '#/definitions/MerchantFeature'}
      online_store: {$ref: '#/definitions/MerchantFeature'}
  ApiMerchantUpdate:
    type: object
    properties:
      business_name: {type: string}
      restaurant_type: {$ref: '#/definitions/RestaurantType'}
      legal_details: {$ref: '#/definitions/LegalDetails'}
      zone_id: {type: string, format: time-zone}
  ModifierOption:
    type: object
    required: [id, name, price, position, active]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      price: {$ref: '#/definitions/MonetaryAmount'}
      maximum_count: {type: integer}
      position: {type: integer}
      active: {type: boolean}
  ModifierOptionUpsertion:
    type: object
    required: [id, name, price, position, active]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      price: {$ref: '#/definitions/MonetaryAmount'}
      position: {type: integer}
      active: {type: boolean}
  ModifierPosition:
    type: object
    required: [modifier_set_id, position]
    properties:
      modifier_set_id: {type: string, format: uuid}
      position: {type: integer}
  ModifierSet:
    type: object
    required: [id, type, name, minimum_option_count, single_choice, force, hide_on_receipts]
    properties:
      id: {type: string, format: uuid}
      type: {$ref: '#/definitions/ModifierSetType'}
      name: {type: string}
      minimum_option_count: {type: integer}
      maximum_option_count: {type: integer}
      maximum_single_option_count: {type: integer}
      single_choice: {type: boolean}
      force: {type: boolean}
      hide_on_receipts: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ItemLocation'
      options:
        type: array
        items: {$ref: '#/definitions/ModifierOption'}
      products_count: {type: integer}
  ModifierSetCreation:
    type: object
    required: [type, name, force, minimum_option_count]
    properties:
      type: {$ref: '#/definitions/ModifierSetType'}
      name: {type: string}
      minimum_option_count: {type: integer}
      maximum_option_count: {type: integer}
      maximum_single_option_count: {type: integer}
      single_choice: {type: boolean}
      force: {type: boolean}
      hide_on_receipts: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ItemLocationUpdate'
      options:
        type: array
        items: {$ref: '#/definitions/ModifierOptionUpsertion'}
  ModifierSetList:
    type: array
    items: {$ref: '#/definitions/ModifierSet'}
  ModifierSetListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ModifierSetList'}
  ModifierSetProductsAssignment:
    type: object
    required: [product_ids]
    properties:
      product_ids:
        type: array
        items: {type: string, format: uuid}
  ModifierSetResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ModifierSet'}
  ModifierSetType:
    type: string
    enum: [hold, addon, neutral]
  ModifierSetUpdate:
    type: object
    properties:
      type: {$ref: '#/definitions/ModifierSetType'}
      name: {type: string}
      minimum_option_count: {type: integer}
      maximum_option_count: {type: integer}
      maximum_single_option_count: {type: integer}
      single_choice: {type: boolean}
      force: {type: boolean}
      hide_on_receipts: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ItemLocationUpdate'
      options:
        type: array
        items: {$ref: '#/definitions/ModifierOptionUpsertion'}
  MonetaryAmount:
    type: object
    required: [amount, currency]
    properties:
      amount: {type: string}
      currency: {type: string, format: currency}
  MonetaryRange:
    type: object
    required: [min, max]
    properties:
      min: {$ref: '#/definitions/MonetaryAmount'}
      max: {$ref: '#/definitions/MonetaryAmount'}
  OnlineOrderAttribute:
    type: object
    required: [id, acceptance_status]
    properties:
      id: {type: string, format: uuid}
      acceptance_status: {$ref: '#/definitions/AcceptanceStatus'}
      rejection_reason: {type: string}
      prepare_by_time: {type: string}
      prepare_by_date_time: {type: string, format: date-time}
      estimated_prep_time_in_mins: {type: integer}
      accepted_at: {type: string, format: date-time}
      rejected_at: {type: string, format: date-time}
      estimated_ready_at: {type: string, format: date-time}
      estimated_delivered_at: {type: string, format: date-time}
      cancellation_status: {$ref: '#/definitions/CancellationStatus'}
      cancellation_reason: {type: string}
  OnlineOrderAttributeUpsertion:
    type: object
    required: [id]
    properties:
      id: {type: string}
      email: {type: string}
      firstName: {type: string}
      lastName: {type: string}
      phoneNumber: {type: string}
      prepare_by_time: {type: string}
      prepare_by_date_time: {type: string, format: date-time}
      estimated_prep_time_in_mins: {type: integer}
      acceptance_status: {$ref: '#/definitions/AcceptanceStatusUpsertion'}
      cancellation_status: {$ref: '#/definitions/CancellationStatus'}
      cancellation_reason: {type: string}
  OrderAcception:
    type: object
    properties:
      estimated_prep_time_in_mins: {type: integer}
  OrderRejection:
    type: object
    properties:
      rejection_reason: {type: string}
  Order:
    type: object
    required: [id, tax_rates, customer_notes, merchant_notes, order_routing_statuses, status_transitions, is_invoice, is_fiscal, assigned_users,
      discount_details, rewards, received_at, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      location: {$ref: '#/definitions/Location'}
      device_id: {type: string, format: uuid}
      creator_user_id: {type: string, format: uuid}
      creator_user: {$ref: '#/definitions/UserInfo'}
      customer: {$ref: '#/definitions/CustomerMerchant'}
      number: {type: string}
      tag: {type: string}
      source: {$ref: '#/definitions/Source'}
      type: {$ref: '#/definitions/OrderType'}
      payment_type: {$ref: '#/definitions/OrderPaymentType'}
      total: {$ref: '#/definitions/MonetaryAmount'}
      subtotal: {$ref: '#/definitions/MonetaryAmount'}
      discount: {$ref: '#/definitions/MonetaryAmount'}
      tax: {$ref: '#/definitions/MonetaryAmount'}
      tip: {$ref: '#/definitions/MonetaryAmount'}
      ticket_discount: {$ref: '#/definitions/MonetaryAmount'}
      delivery_fee: {$ref: '#/definitions/MonetaryAmount'}
      tax_rates:
        type: array
        items: {$ref: '#/definitions/OrderTaxRate'}
      customer_notes:
        type: array
        items: {$ref: '#/definitions/CustomerNote'}
      merchant_notes:
        type: array
        items: {$ref: '#/definitions/MerchantNote'}
      payment_status: {$ref: '#/definitions/PaymentStatus'}
      status: {$ref: '#/definitions/OrderStatus'}
      fulfillment_status: {$ref: '#/definitions/FulfillmentStatus'}
      order_routing_statuses: {$ref: '#/definitions/OrderRoutingStatusesByType'}
      order_routing_kitchen_statuses: {$ref: '#/definitions/OrderRoutingStatusesByKitchen'}
      status_transitions:
        type: array
        items: {$ref: '#/definitions/StatusTransition'}
      is_invoice: {type: boolean}
      is_fiscal: {type: boolean}
      version: {type: integer}
      payment_transactions:
        type: array
        items: {$ref: '#/definitions/PaymentTransaction'}
      items:
        type: array
        items: {$ref: '#/definitions/OrderItem'}
      assigned_users:
        type: array
        items: {$ref: '#/definitions/UserInfo'}
      discount_details:
        type: array
        items: {$ref: '#/definitions/OrderDiscount'}
      rewards:
        type: array
        items: {$ref: '#/definitions/RewardRedemption'}
      bundles:
        type: array
        items: {$ref: '#/definitions/OrderBundle'}
      tips_assignments:
        type: array
        items: {$ref: '#/definitions/TipsAssignment'}
      loyalty_points: {$ref: '#/definitions/LoyaltyPoints'}
      delivery_address: {$ref: '#/definitions/DeliveryAddress'}
      online_order_attribute: {$ref: '#/definitions/OnlineOrderAttribute'}
      delivery_provider: {$ref: '#/definitions/DeliveryProvider'}
      delivery_provider_id: {type: string}
      delivery_provider_number: {type: string}
      seating: {$ref: '#/definitions/Seating'}
      received_at: {type: string, format: date-time}
      completed_at: {type: string, format: date-time}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  OrderAggregate:
    type: object
    required: [count]
    properties:
      count: {type: integer}
      profit: {$ref: '#/definitions/MonetaryAmount'}
      revenue: {$ref: '#/definitions/MonetaryAmount'}
      waiting_time_in_seconds: {type: integer}
  OrderAggregateList:
    type: array
    items: {$ref: '#/definitions/OrderAggregate'}
  OrderAggregateReportData:
    type: object
    properties:
      timeframe: {$ref: '#/definitions/ReportTimeframe'}
      result: {$ref: '#/definitions/OrderAggregateList'}
  OrderAggregateReportDataList:
    type: array
    items: {$ref: '#/definitions/OrderAggregateReportData'}
  OrderAggregateReportResponse:
    type: object
    properties:
      meta: {$ref: '#/definitions/ReportMetadata'}
      data: {$ref: '#/definitions/OrderAggregateReportDataList'}
  OrderBundle:
    type: object
    required: [id]
    properties:
      id: {type: string, format: uuid}
      bundle_order_item_id: {type: string, format: uuid}
      order_bundle_sets:
        type: array
        items: {$ref: '#/definitions/OrderBundleSet'}
  OrderBundleSet:
    type: object
    required: [id]
    properties:
      id: {type: string, format: uuid}
      bundle_set_id: {type: string, format: uuid}
      name: {type: string}
      position: {type: integer}
      order_bundle_options:
        type: array
        items: {$ref: '#/definitions/OrderBundleOption'}
  OrderBundleOption:
    type: object
    required: [id]
    properties:
      id: {type: string, format: uuid}
      bundle_option_id: {type: string, format: uuid}
      article_order_item_id: {type: string, format: uuid}
      position: {type: integer}
      price_adjustment: {type: number, format: double}
  OrderDiscount:
    type: object
    required: [id, order_id, type, amount]
    properties:
      id: {type: string, format: uuid}
      order_id: {type: string, format: uuid}
      discount_id: {type: string, format: uuid}
      title: {type: string}
      type: {$ref: '#/definitions/DiscountType'}
      amount: {type: number, format: double}
      total_amount: {type: number, format: double}
      currency: {type: string, format: currency}
  OrderFeedback:
    type: object
    required: [id, order_id, customer_id, rating, body, read, received_at, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      order_id: {type: string, format: uuid}
      customer_id: {type: string, format: uuid}
      rating: {type: integer}
      body: {type: string}
      read: {type: boolean}
      received_at: {type: string, format: date-time}
      customer: {$ref: '#/definitions/CustomerMerchant'}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  OrderFeedbackList:
    type: array
    items: {$ref: '#/definitions/OrderFeedback'}
  OrderFeedbackListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/OrderFeedbackList'}
  OrderItem:
    type: object
    required: [id, order_id, variant_options, modifier_options, discounts, tax_rates]
    properties:
      id: {type: string, format: uuid}
      order_id: {type: string, format: uuid}
      product_id: {type: string, format: uuid}
      product_name: {type: string}
      product_description: {type: string}
      product_type: {$ref: '#/definitions/ArticleType'}
      quantity: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      payment_status: {$ref: '#/definitions/PaymentStatus'}
      price: {$ref: '#/definitions/MonetaryAmount'}
      cost: {$ref: '#/definitions/MonetaryAmount'}
      discount: {$ref: '#/definitions/MonetaryAmount'}
      tax: {$ref: '#/definitions/MonetaryAmount'}
      base_price: {$ref: '#/definitions/MonetaryAmount'}
      calculated_price: {$ref: '#/definitions/MonetaryAmount'}
      total_price: {$ref: '#/definitions/MonetaryAmount'}
      variant_options:
        type: array
        items: {$ref: '#/definitions/OrderItemVariantOption'}
      modifier_options:
        type: array
        items: {$ref: '#/definitions/OrderItemModifierOption'}
      discounts:
        type: array
        items: {$ref: '#/definitions/OrderItemDiscount'}
      order_routing_status: {$ref: '#/definitions/OrderRoutingStatus'}
      notes: {type: string}
      tax_rates:
        type: array
        items: {$ref: '#/definitions/OrderItemTaxRate'}
      gift_card_pass: {$ref: '#/definitions/GiftCardPassInfo'}
  OrderItemDiscount:
    type: object
    required: [id, order_item_id, type, amount]
    properties:
      id: {type: string, format: uuid}
      order_item_id: {type: string, format: uuid}
      discount_id: {type: string, format: uuid}
      title: {type: string}
      type: {$ref: '#/definitions/DiscountType'}
      amount: {type: number, format: double}
      total_amount: {type: number, format: double}
      currency: {type: string, format: currency}
  OrderItemModifierOption:
    type: object
    required: [id, order_item_id, name, type, price, quantity]
    properties:
      id: {type: string, format: uuid}
      order_item_id: {type: string, format: uuid}
      modifier_option_id: {type: string, format: uuid}
      name: {type: string}
      modifier_set_name: {type: string}
      type: {$ref: '#/definitions/ModifierSetType'}
      price: {$ref: '#/definitions/MonetaryAmount'}
      quantity: {type: number, format: double}
  OrderItemModifierOptionUpsertion:
    type: object
    required: [name, type, price, quantity]
    properties:
      modifier_option_id: {type: string, format: uuid}
      name: {type: string}
      type: {$ref: '#/definitions/ModifierSetType'}
      price: {type: number, format: double}
      quantity: {type: number, format: double}
  OrderItemSalesAggregate:
    type: object
    required: [count]
    properties:
      count: {type: integer}
      discounts: {$ref: '#/definitions/MonetaryAmount'}
      gross_profits: {$ref: '#/definitions/MonetaryAmount'}
      gross_sales: {$ref: '#/definitions/MonetaryAmount'}
      quantity: {type: number, format: double}
      returned_amount: {$ref: '#/definitions/MonetaryAmount'}
      returned_quantity: {type: number, format: double}
      cost: {$ref: '#/definitions/MonetaryAmount'}
      taxable: {$ref: '#/definitions/MonetaryAmount'}
      non_taxable: {$ref: '#/definitions/MonetaryAmount'}
      taxes: {$ref: '#/definitions/MonetaryAmount'}
  OrderItemTaxRate:
    type: object
    required: [id, name, value, apply_to_price, active]
    properties:
      id: {type: string, format: uuid}
      tax_rate_id: {type: string, format: uuid}
      name: {type: string}
      value: {type: number, format: double}
      total_amount: {type: number, format: double}
      apply_to_price: {type: boolean}
      active: {type: boolean}
  OrderItemTaxRateUpsertion:
    type: object
    required: [id, tax_rate_id, name, value, apply_to_price]
    properties:
      id: {type: string, format: uuid}
      tax_rate_id: {type: string, format: uuid}
      name: {type: string}
      value: {type: number, format: double}
      total_amount: {type: number, format: double}
      apply_to_price: {type: boolean}
      active: {type: boolean}
  OrderItemUpsertion:
    type: object
    required: [id, discounts, modifier_options, variant_options, tax_rates]
    properties:
      id: {type: string, format: uuid}
      product_id: {type: string, format: uuid}
      product_name: {type: string}
      product_description: {type: string}
      product_type: {$ref: '#/definitions/ArticleType'}
      quantity: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      payment_status: {$ref: '#/definitions/PaymentStatus'}
      price_amount: {type: number, format: double}
      cost_amount: {type: number, format: double}
      discount_amount: {type: number, format: double}
      tax_amount: {type: number, format: double}
      base_price_amount: {type: number, format: double}
      calculated_price_amount: {type: number, format: double}
      total_price_amount: {type: number, format: double}
      discounts:
        type: array
        items: {$ref: '#/definitions/ItemDiscountUpsertion'}
      modifier_options:
        type: array
        items: {$ref: '#/definitions/OrderItemModifierOptionUpsertion'}
      variant_options:
        type: array
        items: {$ref: '#/definitions/OrderItemVariantOptionUpsertion'}
      notes: {type: string}
      tax_rates:
        type: array
        items: {$ref: '#/definitions/OrderItemTaxRateUpsertion'}
      gift_card_pass_recipient_email: {type: string}
  OrderItemVariantOption:
    type: object
    required: [id, order_item_id, option_name, option_type_name]
    properties:
      id: {type: string, format: uuid}
      order_item_id: {type: string, format: uuid}
      variant_option_id: {type: string, format: uuid}
      option_name: {type: string}
      option_type_name: {type: string}
  OrderItemVariantOptionUpsertion:
    type: object
    properties:
      variant_option_id: {type: string, format: uuid}
      option_name: {type: string}
      option_type_name: {type: string}
  OrderList:
    type: array
    items: {$ref: '#/definitions/Order'}
  OrderListResponse:
    type: object
    properties:
      data: {$ref: '#/definitions/OrderList'}
      meta: {$ref: '#/definitions/OrdersMetadata'}
      pagination: {$ref: '#/definitions/PaginationLinks'}
  OrderPaymentType:
    type: string
    enum: [cash, credit_card, debit_card, check, gift_card, split, delivery_provider]
  OrderResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Order'}
  OrderRoutingStatus:
    type: string
    enum: [new, started, completed, canceled]
  OrderRoutingStatusesByType:
    type: object
    properties:
      bar: {$ref: '#/definitions/OrderRoutingStatus'}
      kitchen: {$ref: '#/definitions/OrderRoutingStatus'}
  OrderRoutingStatusesByKitchen:
    type: object
    additionalProperties:
      type: array
      items: {$ref: '#/definitions/OrderRoutingStatus'}
  OrderStatus:
    type: string
    enum: [received, in_progress, in_kitchen, kitchen_complete, in_bar, bar_complete, ready, picked_up, en_route, delivered,
      completed, canceled]
  OrderTaxRate:
    type: object
    required: [id, name, value, total_amount]
    properties:
      id: {type: string, format: uuid}
      tax_rate_id: {type: string, format: uuid}
      name: {type: string}
      value: {type: number, format: double}
      total_amount: {type: number, format: double}
  OrderTaxRateAggregate:
    type: object
    required: [count]
    properties:
      count: {type: integer}
      amount: {$ref: '#/definitions/MonetaryAmount'}
  OrderTaxRateAggregateList:
    type: array
    items: {$ref: '#/definitions/OrderTaxRateAggregate'}
  OrderTaxRateAggregateReportData:
    type: object
    properties:
      timeframe: {$ref: '#/definitions/ReportTimeframe'}
      result: {$ref: '#/definitions/OrderTaxRateAggregateList'}
  OrderTaxRateAggregateReportDataList:
    type: array
    items: {$ref: '#/definitions/OrderTaxRateAggregateReportData'}
  OrderTaxRateAggregateReportResponse:
    type: object
    properties:
      meta: {$ref: '#/definitions/ReportMetadata'}
      data: {$ref: '#/definitions/OrderTaxRateAggregateReportDataList'}
  OrderTaxRateUpsertion:
    type: object
    required: [id, tax_rate_id, name, value, total_amount]
    properties:
      id: {type: string, format: uuid}
      tax_rate_id: {type: string, format: uuid}
      name: {type: string}
      value: {type: number, format: double}
      total_amount: {type: number, format: double}
  OrderType:
    type: string
    enum: [dine_in, take_out, delivery_restaurant, in_store, in_store_pick_up, delivery_retail]
  OrderUpsertion:
    type: object
    required: [location_id, type, total_amount, subtotal_amount, tax_amount, merchant_notes, payment_status,
      status, is_invoice, payment_transactions, items, discounts, received_at, rewards, source, tax_rates]
    properties:
      location_id: {type: string, format: uuid}
      device_id: {type: string, format: uuid}
      creator_user_id: {type: string, format: uuid}
      customer_id: {type: string, format: uuid}
      tag: {type: string}
      type: {$ref: '#/definitions/OrderType'}
      payment_type: {$ref: '#/definitions/OrderPaymentType'}
      total_amount: {type: number, format: double}
      subtotal_amount: {type: number, format: double}
      discount_amount: {type: number, format: double}
      tax_amount: {type: number, format: double}
      tip_amount: {type: number, format: double}
      ticket_discount_amount: {type: number, format: double}
      delivery_fee_amount: {type: number, format: double}
      merchant_notes:
        type: array
        items: {$ref: '#/definitions/MerchantNoteUpsertion'}
      payment_status: {$ref: '#/definitions/PaymentStatus'}
      source: {$ref: '#/definitions/Source', default: register}
      status: {$ref: '#/definitions/OrderStatus'}
      fulfillment_status: {$ref: '#/definitions/FulfillmentStatus'}
      is_invoice: {type: boolean}
      is_fiscal: {type: boolean}
      version: {type: integer}
      payment_transactions:
        type: array
        items: {$ref: '#/definitions/PaymentTransactionUpsertion'}
      items:
        type: array
        items: {$ref: '#/definitions/OrderItemUpsertion'}
      discounts:
        type: array
        items: {$ref: '#/definitions/ItemDiscountUpsertion'}
      assigned_user_ids:
        type: array
        items: {type: string, format: uuid}
      delivery_address: {$ref: '#/definitions/DeliveryAddressUpsertion'}
      online_order_attribute: {$ref: '#/definitions/OnlineOrderAttributeUpsertion'}
      delivery_provider: {$ref: '#/definitions/DeliveryProvider'}
      delivery_provider_id: {type: string}
      delivery_provider_number: {type: string}
      updated_at: {type: string, format: date-time}
      received_at: {type: string, format: date-time}
      completed_at: {type: string, format: date-time}
      rewards:
        type: array
        items: {$ref: '#/definitions/RewardRedemptionSync'}
      tax_rates:
        type: array
        items: {$ref: '#/definitions/OrderTaxRateUpsertion'}
      bundles:
        type: array
        items: {$ref: '#/definitions/OrderBundle'}
      seating: {$ref: '#/definitions/Seating'}
  OrdersCountByType:
    type: object
    required: [type, count]
    properties:
      type: {$ref: '#/definitions/OrderType'}
      count: {type: integer}
  OrdersMetadata:
    type: object
    properties:
      sales_summary: {$ref: '#/definitions/SalesSummary'}
      type_summary:
        type: array
        items: {$ref: '#/definitions/OrdersCountByType'}
  PaginationLinks:
    type: object
    required: [first, last, per_page, total_count]
    properties:
      prev: {type: string, format: url}
      next: {type: string, format: url}
      first: {type: string, format: url}
      last: {type: string, format: url}
      per_page: {type: integer}
      total_count: {type: integer}
  PartCreation:
    type: object
    required: [name, category_ids, supplier_ids, unit, variants, variant_products, location_overrides]
    properties:
      name: {type: string}
      description: {type: string}
      category_ids:
        type: array
        items: {type: string, format: uuid}
      brand_id: {type: string, format: uuid}
      supplier_ids:
        type: array
        items: {type: string, format: uuid}
      sku: {type: string}
      upc: {type: string}
      cost: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      track_inventory: {type: boolean}
      track_inventory_parts: {type: boolean}
      active: {type: boolean}
      apply_pricing_to_all_locations: {type: boolean}
      variants:
        type: array
        items: {$ref: '#/definitions/VariantOptionTypeUpsertion'}
      variant_products:
        type: array
        items: {$ref: '#/definitions/VariantPartCreation'}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/PartLocationUpdate'
  PartLocationUpdate:
    type: object
    required: [unit]
    properties:
      cost: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      active: {type: boolean}
  PartUpdate:
    type: object
    required: [location_overrides]
    properties:
      name: {type: string}
      description: {type: string}
      category_ids:
        type: array
        items: {type: string, format: uuid}
      brand_id: {type: string, format: uuid}
      supplier_ids:
        type: array
        items: {type: string, format: uuid}
      sku: {type: string}
      upc: {type: string}
      cost: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      track_inventory: {type: boolean}
      track_inventory_parts: {type: boolean}
      active: {type: boolean}
      apply_pricing_to_all_locations: {type: boolean}
      variants:
        type: array
        items: {$ref: '#/definitions/VariantOptionTypeUpsertion'}
      variant_products:
        type: array
        items: {$ref: '#/definitions/VariantPartUpdate'}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/PartLocationUpdate'
      reason: {$ref: '#/definitions/ChangeReason'}
      notes: {type: string}
  PassUrls:
    type: object
    properties:
      ios: {type: string}
      android: {type: string}
  PasswordReset:
    type: object
    properties:
      user_id: {type: string}
      token: {type: string}
      password: {type: string}
  PaySchedule:
    type: string
    enum: [weekly, bi_weekly, monthly]
  PaymentDetails:
    type: object
    properties:
      amount: {type: number, format: double}
      currency: {type: string, format: currency}
      auth_code: {type: string}
      mask_pan: {type: string}
      card_hash: {type: string}
      card_reference: {type: string}
      card_type: {$ref: '#/definitions/CardType'}
      terminal_name: {type: string}
      terminal_id: {type: string}
      transaction_result: {$ref: '#/definitions/CardTransactionResultType'}
      transaction_status: {$ref: '#/definitions/CardTransactionStatusType'}
      transaction_reference: {type: string}
      last4_digits: {type: string}
      paid_in_amount: {type: number, format: double}
      paid_out_amount: {type: number, format: double}
      gift_card_pass_id: {type: string, format: uuid}
      gift_card_pass_transaction_id: {type: string, format: uuid}
      gift_card_pass_lookup_id: {type: string}
      is_standalone: {type: boolean}
      customer_id: {type: string, format: uuid}
      tip_amount: {type: number, format: double}
      preauth: {type: boolean}
      terminal_verification_result: {type: string}
      application_dedicated_file: {type: string}
      transaction_status_info: {type: string}
      application_label: {type: string}
      application_id: {type: string}
      account_id: {type: string}
      payment_account_id: {type: string}
      entry_mode: {type: string}
      transaction_number: {type: string}
      gateway_transaction_reference: {type: string}
      card_holder_name: {type: string}
      cryptogram: {type: string}
      signature_required: {type: boolean}
      pin_verified: {type: boolean}
  PaymentProcessor:
    type: string
    enum: [creditcall, jetpay, worldpay, stripe, paytouch, delivery_provider]
  TransactionPaymentProcessor:
    type: string
    enum: [creditcall, jetpay, worldpay, stripe, paytouch]
  PaymentProcessorConfigUnionType:
    type: object
    properties:
      merchant_id: {type: string}
      terminal_id: {type: string}
      transaction_key: {type: string}
      refund_standard_adjustment_fee: {type: string}
      account_id: {type: string}
      acceptor_id: {type: string}
  PaymentStatus:
    type: string
    enum: [pending, paid, partially_paid, partially_refunded, refunded, voided]
  PaymentTransaction:
    type: object
    required: [id, order_id, payment_processor]
    properties:
      id: {type: string, format: uuid}
      order_id: {type: string, format: uuid}
      customer_id: {type: string, format: uuid}
      type: {$ref: '#/definitions/TransactionType'}
      refunded_payment_transaction_id: {type: string, format: uuid}
      payment_type: {$ref: '#/definitions/TransactionPaymentType'}
      payment_details: {$ref: '#/definitions/PaymentDetails'}
      total_billed_to_customer: {$ref: '#/definitions/MonetaryAmount'}
      version: {type: integer}
      paid_at: {type: string, format: date-time}
      order_item_ids:
        type: array
        items: {type: string, format: uuid}
      fees:
        type: array
        items: {$ref: '#/definitions/PaymentTransactionFee'}
      payment_processor: {$ref: '#/definitions/PaymentProcessor'}
  PaymentTransactionFeeType:
    type: string
    enum: [pax_fee, pax_cash_discount, jetpay_fee, jetpay_cash_discount, delivery_provider_fee]
  PaymentTransactionUpsertion:
    type: object
    required: [id]
    properties:
      id: {type: string, format: uuid}
      type: {$ref: '#/definitions/TransactionType'}
      payment_type: {$ref: '#/definitions/TransactionPaymentType'}
      refunded_payment_transaction_id: {type: string, format: uuid}
      payment_details: {$ref: '#/definitions/PaymentDetails'}
      version: {type: integer}
      paid_at: {type: string, format: date-time}
      order_item_ids:
        type: array
        items: {type: string, format: uuid}
      fees:
        type: array
        items: {$ref: '#/definitions/PaymentTransactionFeeUpsertion'}
      payment_processor: {$ref: '#/definitions/PaymentProcessor'}
  OrderService.PaymentTransactionUpsertion:
    type: object
    required: [id, type, payment_type, payment_details, paid_at, version, payment_processor]
    properties:
      id: {type: string, format: uuid}
      type: {$ref: '#/definitions/TransactionType'}
      payment_type: {$ref: '#/definitions/TransactionPaymentType'}
      payment_details: {$ref: '#/definitions/PaymentDetails'}
      version: {type: integer}
      paid_at: {type: string, format: date-time}
      order_item_ids:
        type: array
        items: {type: string, format: uuid}
      payment_processor: {$ref: '#/definitions/PaymentProcessor'}
  PaymentTransactionFee:
    type: object
    required: [id, name, type, amount]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      type: {$ref: '#/definitions/PaymentTransactionFeeType'}
      amount: {type: number, format: double}
  PaymentTransactionFeeUpsertion:
    type: object
    required: [id, name, type, amount]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      type: {$ref: '#/definitions/PaymentTransactionFeeType'}
      amount: {type: number, format: double}
  Payroll:
    type: object
    required: [user, total_mins, total_delta_mins, total_regular_mins, total_overtime_mins, hourly_rate, hourly_overtime_rate, total_wage, total_tips]
    properties:
      user: {$ref: '#/definitions/UserInfo'}
      total_mins: {type: integer}
      total_delta_mins: {type: integer}
      total_regular_mins: {type: integer}
      total_overtime_mins: {type: integer}
      hourly_rate: {$ref: '#/definitions/MonetaryAmount'}
      hourly_overtime_rate: {$ref: '#/definitions/MonetaryAmount'}
      total_wage: {$ref: '#/definitions/MonetaryAmount'}
      total_tips:
        type: array
        items: {$ref: '#/definitions/MonetaryAmount'}
  PayrollList:
    type: array
    items: {$ref: '#/definitions/Payroll'}
  PayrollListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/PayrollList'}
  Permission:
    type: object
    properties:
      read: {type: boolean}
      create: {type: boolean}
      edit: {type: boolean}
      delete: {type: boolean}
  PermissionUpdate:
    type: object
    properties:
      read: {type: boolean}
      create: {type: boolean}
      edit: {type: boolean}
      delete: {type: boolean}
  Permissions:
    type: object
    properties:
      categories: {$ref: '#/definitions/Permission'}
      cash_drawers: {$ref: '#/definitions/Permission'}
      customers: {$ref: '#/definitions/Permission'}
      discounts: {$ref: '#/definitions/Permission'}
      employee_groups: {$ref: '#/definitions/Permission'}
      employee_payroll: {$ref: '#/definitions/Permission'}
      employees: {$ref: '#/definitions/Permission'}
      employee_time_clock: {$ref: '#/definitions/Permission'}
      inventory: {$ref: '#/definitions/Permission'}
      invoices: {$ref: '#/definitions/Permission'}
      location_settings: {$ref: '#/definitions/Permission'}
      marketing: {$ref: '#/definitions/Permission'}
      modifiers: {$ref: '#/definitions/Permission'}
      orders: {$ref: '#/definitions/Permission'}
      products: {$ref: '#/definitions/Permission'}
      purchase_orders: {$ref: '#/definitions/Permission'}
      reports: {$ref: '#/definitions/Permission'}
      stock_control: {$ref: '#/definitions/Permission'}
      suppliers: {$ref: '#/definitions/Permission'}
      refunds: {$ref: '#/definitions/Permission'}
      gift_cards: {$ref: '#/definitions/Permission'}
  PermissionsUpdate:
    type: object
    properties:
      categories: {$ref: '#/definitions/PermissionUpdate'}
      cash_drawers: {$ref: '#/definitions/PermissionUpdate'}
      customers: {$ref: '#/definitions/PermissionUpdate'}
      discounts: {$ref: '#/definitions/PermissionUpdate'}
      employee_groups: {$ref: '#/definitions/PermissionUpdate'}
      employee_payroll: {$ref: '#/definitions/PermissionUpdate'}
      employees: {$ref: '#/definitions/PermissionUpdate'}
      employee_time_clock: {$ref: '#/definitions/PermissionUpdate'}
      inventory: {$ref: '#/definitions/PermissionUpdate'}
      invoices: {$ref: '#/definitions/PermissionUpdate'}
      location_settings: {$ref: '#/definitions/PermissionUpdate'}
      marketing: {$ref: '#/definitions/PermissionUpdate'}
      modifiers: {$ref: '#/definitions/PermissionUpdate'}
      orders: {$ref: '#/definitions/PermissionUpdate'}
      products: {$ref: '#/definitions/PermissionUpdate'}
      purchase_orders: {$ref: '#/definitions/PermissionUpdate'}
      reports: {$ref: '#/definitions/PermissionUpdate'}
      stock_control: {$ref: '#/definitions/PermissionUpdate'}
      suppliers: {$ref: '#/definitions/PermissionUpdate'}
      refunds: {$ref: '#/definitions/PermissionUpdate'}
      gift_cards: {$ref: '#/definitions/PermissionUpdate'}
  Product:
    type: object
    required: [id, type, scope, is_combo, name, price, unit, has_variant, track_inventory, track_inventory_parts, active,
      apply_pricing_to_all_locations, discountable, avatar_image_urls, is_service, order_routing_bar,
      order_routing_kitchen, order_routing_enabled, has_parts, options, location_overrides, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      type: {$ref: '#/definitions/ArticleType'}
      scope: {$ref: '#/definitions/ArticleScope'}
      is_combo: {type: boolean}
      name: {type: string}
      description: {type: string}
      brand_id: {type: string, format: uuid}
      price: {$ref: '#/definitions/MonetaryAmount'}
      price_range: {$ref: '#/definitions/MonetaryRange'}
      cost: {$ref: '#/definitions/MonetaryAmount'}
      cost_range: {$ref: '#/definitions/MonetaryRange'}
      average_cost: {$ref: '#/definitions/MonetaryAmount'}
      unit: {$ref: '#/definitions/UnitType'}
      margin: {type: number, format: double}
      upc: {type: string}
      sku: {type: string}
      is_variant_of_product_id: {type: string, format: uuid}
      has_variant: {type: boolean}
      track_inventory: {type: boolean}
      track_inventory_parts: {type: boolean}
      active: {type: boolean}
      apply_pricing_to_all_locations: {type: boolean}
      discountable: {type: boolean}
      avatar_bg_color: {type: string}
      avatar_image_urls:
        type: array
        items: {$ref: '#/definitions/ImageUrls'}
      is_service: {type: boolean}
      order_routing_bar: {type: boolean}
      order_routing_kitchen: {type: boolean}
      order_routing_enabled: {type: boolean}
      has_parts: {type: boolean}
      options:
        type: array
        items: {$ref: '#/definitions/VariantOptionWithType'}
      categories:
        type: array
        items: {$ref: '#/definitions/Category'}
      category_ids:
        type: array
        items: {type: string, format: uuid}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ProductLocation'
      variants:
        type: array
        items: {$ref: '#/definitions/VariantOptionType'}
      variant_products:
        type: array
        items: {$ref: '#/definitions/Product'}
      modifiers:
        type: array
        items: {$ref: '#/definitions/ModifierSet'}
      modifier_ids:
        type: array
        items: {type: string, format: uuid}
      modifier_positions:
        type: array
        items: {$ref: '#/definitions/ModifierPosition'}
      stock_level: {type: number, format: double}
      reorder_amount: {type: number, format: double}
      suppliers:
        type: array
        items: {$ref: '#/definitions/SupplierInfo'}
      recipe_details:
        type: array
        items: {$ref: '#/definitions/RecipeDetail'}
      category_positions:
        type: array
        items: {$ref: '#/definitions/CategoryPosition'}
      catalog_categories:
        type: array
        items: {$ref: '#/definitions/Category'}
      catalog_category_options:
        type: array
        items: {$ref: '#/definitions/CatalogCategoryOption'}
      catalog_category_positions:
        type: array
        items: {$ref: '#/definitions/CategoryPosition'}
      bundle_sets:
        type: array
        items: {$ref: '#/definitions/BundleSet'}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  ProductCostHistory:
    type: object
    required: [id, location, timestamp, prev_cost, cost_change, new_cost, reason, user]
    properties:
      id: {type: string, format: uuid}
      location: {$ref: '#/definitions/Location'}
      timestamp: {type: string, format: date-time}
      prev_cost: {$ref: '#/definitions/MonetaryAmount'}
      cost_change: {$ref: '#/definitions/MonetaryAmount'}
      new_cost: {$ref: '#/definitions/MonetaryAmount'}
      reason: {$ref: '#/definitions/ChangeReason'}
      user: {$ref: '#/definitions/UserInfo'}
      notes: {type: string}
  ProductCostHistoryList:
    type: array
    items: {$ref: '#/definitions/ProductCostHistory'}
  ProductCostHistoryListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ProductCostHistoryList'}
  ProductCreation:
    type: object
    required: [name, category_ids, supplier_ids, price, unit, variants, variant_products, location_overrides, image_upload_ids]
    properties:
      name: {type: string}
      description: {type: string}
      category_ids:
        type: array
        items: {type: string, format: uuid}
      brand_id: {type: string, format: uuid}
      supplier_ids:
        type: array
        items: {type: string, format: uuid}
      sku: {type: string}
      upc: {type: string}
      cost: {type: number, format: double}
      price: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      margin: {type: number, format: double}
      track_inventory: {type: boolean}
      track_inventory_parts: {type: boolean}
      active: {type: boolean}
      apply_pricing_to_all_locations: {type: boolean}
      discountable: {type: boolean}
      avatar_bg_color: {type: string}
      is_service: {type: boolean}
      order_routing_bar: {type: boolean}
      order_routing_kitchen: {type: boolean}
      order_routing_enabled: {type: boolean}
      variants:
        type: array
        items: {$ref: '#/definitions/VariantOptionTypeUpsertion'}
      variant_products:
        type: array
        items: {$ref: '#/definitions/VariantProductCreation'}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ProductLocationUpdate'
      image_upload_ids:
        type: array
        items: {type: string, format: uuid}
  ProductList:
    type: array
    items: {$ref: '#/definitions/Product'}
  ProductListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ProductList'}
  ProductLocation:
    type: object
    required: [price, unit]
    properties:
      price: {$ref: '#/definitions/MonetaryAmount'}
      cost: {$ref: '#/definitions/MonetaryAmount'}
      average_cost: {$ref: '#/definitions/MonetaryAmount'}
      unit: {$ref: '#/definitions/UnitType'}
      margin: {type: number, format: double}
      stock: {$ref: '#/definitions/Stock'}
      active: {type: boolean}
      tax_rates:
        type: array
        items: {$ref: '#/definitions/TaxRate'}
      tax_rate_ids:
        type: array
        items: {type: string, format: uuid}
      route_to_kitchen_id: {type: string, format: uuid}
  ProductLocationUpdate:
    type: object
    required: [price, unit, tax_rate_ids]
    properties:
      price: {type: number, format: double}
      cost: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      margin: {type: number, format: double}
      active: {type: boolean}
      tax_rate_ids:
        type: array
        items: {type: string, format: uuid}
      route_to_kitchen_id: {type: string, format: uuid}
  ProductModifierSetsAssignment:
    type: object
    properties:
      modifier_set_ids:
        type: array
        items: {type: string, format: uuid}
      modifier_sets: {$ref: '#/definitions/EntityOrderingList'}
  ProductPart:
    type: object
    required: [part, quantity_needed]
    properties:
      part: {$ref: '#/definitions/Product'}
      quantity_needed: {type: number, format: double}
  ProductPartAssignment:
    type: object
    required: [part_id, quantity_needed]
    properties:
      part_id: {type: string, format: uuid}
      quantity_needed: {type: number, format: double}
  ProductPartAssignments:
    type: array
    items: {$ref: '#/definitions/ProductPartAssignment'}
    properties:
      product_ids:
        type: array
        items: {type: string, format: uuid}
  ProductPartList:
    type: array
    items: {$ref: '#/definitions/ProductPart'}
  ProductPartListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ProductPartList'}
  ProductPriceHistory:
    type: object
    required: [id, location, timestamp, prev_price, price_change, new_price, reason, user]
    properties:
      id: {type: string, format: uuid}
      location: {$ref: '#/definitions/Location'}
      timestamp: {type: string, format: date-time}
      prev_price: {$ref: '#/definitions/MonetaryAmount'}
      price_change: {$ref: '#/definitions/MonetaryAmount'}
      new_price: {$ref: '#/definitions/MonetaryAmount'}
      reason: {$ref: '#/definitions/ChangeReason'}
      user: {$ref: '#/definitions/UserInfo'}
      notes: {type: string}
  ProductPriceHistoryList:
    type: array
    items: {$ref: '#/definitions/ProductPriceHistory'}
  ProductPriceHistoryListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ProductPriceHistoryList'}
  ProductQuantity:
    type: object
    required: [amount, unit]
    properties:
      amount: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
  ProductQuantityHistory:
    type: object
    required: [id, location, timestamp, prev_quantity, new_quantity, new_stock_value, reason]
    properties:
      id: {type: string, format: uuid}
      location: {$ref: '#/definitions/Location'}
      timestamp: {type: string, format: date-time}
      prev_quantity: {type: number, format: double}
      new_quantity: {type: number, format: double}
      new_stock_value: {$ref: '#/definitions/MonetaryAmount'}
      reason: {$ref: '#/definitions/QuantityChangeReason'}
      user: {$ref: '#/definitions/UserInfo'}
      notes: {type: string}
  ProductQuantityHistoryList:
    type: array
    items: {$ref: '#/definitions/ProductQuantityHistory'}
  ProductQuantityHistoryListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ProductQuantityHistoryList'}
  ProductResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Product'}
  ProductRevenue:
    type: object
    required: [product_id, revenue_per_location]
    properties:
      product_id: {type: string, format: uuid}
      revenue_per_location:
        type: array
        items: {$ref: '#/definitions/ProductRevenuePerLocation'}
  ProductRevenuePerLocation:
    type: object
    required: [location_id, avg_price, avg_discount, avg_cost, avg_margin, total_sold, total_revenue, total_tax, total_profit]
    properties:
      location_id: {type: string, format: uuid}
      avg_price: {$ref: '#/definitions/MonetaryAmount'}
      avg_discount: {$ref: '#/definitions/MonetaryAmount'}
      avg_cost: {$ref: '#/definitions/MonetaryAmount'}
      avg_margin: {type: number, format: double}
      total_sold: {$ref: '#/definitions/ProductQuantity'}
      total_revenue: {$ref: '#/definitions/MonetaryAmount'}
      total_tax: {$ref: '#/definitions/MonetaryAmount'}
      total_profit: {$ref: '#/definitions/MonetaryAmount'}
  ProductRevenueResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ProductRevenue'}
  ProductSales:
    type: object
    required: [id, name, data]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      sku: {type: string}
      upc: {type: string}
      deleted_at: {type: string, format: date-time}
      options:
        type: array
        items: {$ref: '#/definitions/VariantOptionWithType'}
      data: {$ref: '#/definitions/OrderItemSalesAggregate'}
  ProductSalesList:
    type: array
    items: {$ref: '#/definitions/ProductSales'}
  ProductSalesReportData:
    type: object
    properties:
      timeframe: {$ref: '#/definitions/ReportTimeframe'}
      result: {$ref: '#/definitions/ProductSalesList'}
  ProductSalesReportDataList:
    type: array
    items: {$ref: '#/definitions/ProductSalesReportData'}
  ProductSalesReportResponse:
    type: object
    properties:
      meta: {$ref: '#/definitions/ReportMetadata'}
      data: {$ref: '#/definitions/ProductSalesReportDataList'}
  ProductTop:
    type: object
    required: [id, name, quantity_sold, net_sales, revenue, profit, margin]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      quantity_sold: {type: number, format: double}
      net_sales: {$ref: '#/definitions/MonetaryAmount'}
      revenue: {$ref: '#/definitions/MonetaryAmount'}
      profit: {$ref: '#/definitions/MonetaryAmount'}
      margin: {type: number, format: double}
      options:
        type: array
        items: {$ref: '#/definitions/VariantOptionWithType'}
  ProductTopList:
    type: array
    items: {$ref: '#/definitions/ProductTop'}
  ProductTopReportData:
    type: object
    properties:
      timeframe: {$ref: '#/definitions/ReportTimeframe'}
      result: {$ref: '#/definitions/ProductTopList'}
  ProductTopReportDataList:
    type: array
    items: {$ref: '#/definitions/ProductTopReportData'}
  ProductTopReportResponse:
    type: object
    properties:
      meta: {$ref: '#/definitions/ReportMetadata'}
      data: {$ref: '#/definitions/ProductTopReportDataList'}
  ProductUpdate:
    type: object
    required: [location_overrides]
    properties:
      name: {type: string}
      description: {type: string}
      category_ids:
        type: array
        items: {type: string, format: uuid}
      brand_id: {type: string, format: uuid}
      supplier_ids:
        type: array
        items: {type: string, format: uuid}
      sku: {type: string}
      upc: {type: string}
      cost: {type: number, format: double}
      price: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      margin: {type: number, format: double}
      track_inventory: {type: boolean}
      track_inventory_parts: {type: boolean}
      active: {type: boolean}
      apply_pricing_to_all_locations: {type: boolean}
      discountable: {type: boolean}
      avatar_bg_color: {type: string}
      is_service: {type: boolean}
      order_routing_bar: {type: boolean}
      order_routing_kitchen: {type: boolean}
      order_routing_enabled: {type: boolean}
      variants:
        type: array
        items: {$ref: '#/definitions/VariantOptionTypeUpsertion'}
      variant_products:
        type: array
        items: {$ref: '#/definitions/VariantProductUpdate'}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ProductLocationUpdate'
      image_upload_ids:
        type: array
        items: {type: string, format: uuid}
      reason: {$ref: '#/definitions/ChangeReason'}
      notes: {type: string}
  ProductsAssignment:
    type: object
    required: [product_ids]
    properties:
      product_ids:
        type: array
        items: {type: string, format: uuid}
  Auth0Registration:
    type: object
    required: [token, business_type, business_name, restaurant_type, currency, zone_id]
    properties:
      token: {type: string}
      business_type: {$ref: '#/definitions/BusinessType'}
      business_name: {type: string}
      address: {type: AddressUpsertion, description: 'Address to use for the default location'}
      restaurant_type: {$ref: '#/definitions/RestaurantType'}
      currency: {type: string, format: currency}
      zone_id: {type: string, format: time-zone}
      pin: {type: string}
      mode: {$ref: '#/definitions/MerchantMode'}
      dummy_data: {type: boolean, description: 'Sets the dummy data flag for dashboard use'}
  PublicMerchantCreation:
    type: object
    required: [business_type, business_name, restaurant_type, currency, first_name, last_name, password, email, zone_id]
    properties:
      business_type: {$ref: '#/definitions/BusinessType'}
      business_name: {type: string}
      address: {type: AddressUpsertion, description: 'Address to use for the default location'}
      restaurant_type: {$ref: '#/definitions/RestaurantType'}
      currency: {type: string, format: currency}
      first_name: {type: string}
      last_name: {type: string}
      password: {type: string}
      email: {type: string}
      zone_id: {type: string, format: time-zone}
      pin: {type: string}
      mode: {$ref: '#/definitions/MerchantMode'}
      dummy_data: {type: boolean, description: 'Sets the dummy data flag for dashboard use'}
  PurchaseOrder:
    type: object
    required: [id, number, status, created_at]
    properties:
      id: {type: string, format: uuid}
      supplier: {$ref: '#/definitions/Supplier'}
      location: {$ref: '#/definitions/Location'}
      receiving_orders:
        type: array
        items: {$ref: '#/definitions/ReceivingOrder'}
      user: {$ref: '#/definitions/UserInfo'}
      number: {type: string}
      payment_status: {$ref: '#/definitions/PurchaseOrderPaymentStatus'}
      expected_delivery_date: {type: string, format: date-time}
      status: {$ref: '#/definitions/ReceivingObjectStatus'}
      ordered_products_count: {type: number, format: double}
      received_products_count: {type: number, format: double}
      notes: {type: string}
      created_at: {type: string, format: date-time}
  PurchaseOrderCreation:
    type: object
    required: [supplier_id, location_id, products]
    properties:
      supplier_id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      payment_status: {$ref: '#/definitions/PurchaseOrderPaymentStatus'}
      expected_delivery_date: {type: string, format: date-time}
      notes: {type: string}
      products:
        type: array
        items: {$ref: '#/definitions/PurchaseOrderProductUpsertion'}
  PurchaseOrderList:
    type: array
    items: {$ref: '#/definitions/PurchaseOrder'}
  PurchaseOrderListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/PurchaseOrderList'}
  PurchaseOrderPaymentStatus:
    type: string
    enum: [unpaid, paid, partial]
  PurchaseOrderProduct:
    type: object
    required: [product_id, product_name, product_unit, quantity_ordered, current_quantity, options]
    properties:
      product_id: {type: string, format: uuid}
      product_name: {type: string}
      product_unit: {$ref: '#/definitions/UnitType'}
      quantity_ordered: {type: number, format: double}
      quantity_received: {type: number, format: double}
      quantity_returned: {type: number, format: double}
      current_quantity: {type: number, format: double}
      average_cost: {$ref: '#/definitions/MonetaryAmount'}
      ordered_cost: {$ref: '#/definitions/MonetaryAmount'}
      received_cost: {$ref: '#/definitions/MonetaryAmount'}
      options:
        type: array
        items: {$ref: '#/definitions/VariantOptionWithType'}
  PurchaseOrderProductList:
    type: array
    items: {$ref: '#/definitions/PurchaseOrderProduct'}
  PurchaseOrderProductListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/PurchaseOrderProductList'}
  PurchaseOrderProductUpsertion:
    type: object
    required: [product_id]
    properties:
      product_id: {type: string, format: uuid}
      quantity: {type: number, format: double}
      cost: {type: number, format: double}
  PurchaseOrderResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/PurchaseOrder'}
  PurchaseOrderUpdate:
    type: object
    properties:
      supplier_id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      payment_status: {$ref: '#/definitions/PurchaseOrderPaymentStatus'}
      expected_delivery_date: {type: string, format: date-time}
      notes: {type: string}
      products:
        type: array
        items: {$ref: '#/definitions/PurchaseOrderProductUpsertion'}
  PusherAuthentication:
    type: object
    required: [channel_name, socket_id]
    properties:
      channel_name: {type: string}
      socket_id: {type: string}
  PusherToken:
    type: object
    required: [auth]
    properties:
      auth: {type: string}
  QuantityChangeReason:
    type: string
    enum: [customer_return, damaged, manual, receiving, sale, spillage, supplier_return, transfer]
  ReceivingObjectStatus:
    type: string
    enum: [created, receiving, partial, completed]
  ReceivingOrder:
    type: object
    required: [id, status, number, synced, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      location: {$ref: '#/definitions/Location'}
      user: {$ref: '#/definitions/UserInfo'}
      receiving_object_type: {$ref: '#/definitions/ReceivingOrderObjectType'}
      purchase_order: {$ref: '#/definitions/PurchaseOrder'}
      transfer_order: {$ref: '#/definitions/TransferOrder'}
      status: {$ref: '#/definitions/ReceivingOrderStatus'}
      number: {type: string}
      synced: {type: boolean}
      products_count: {type: number, format: double}
      stock_value: {$ref: '#/definitions/MonetaryAmount'}
      invoice_number: {type: string}
      payment_method: {$ref: '#/definitions/ReceivingOrderPaymentMethod'}
      payment_status: {$ref: '#/definitions/ReceivingOrderPaymentStatus'}
      payment_due_date: {type: string, format: date-time}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  ReceivingOrderCreation:
    type: object
    required: [location_id, status, products]
    properties:
      location_id: {type: string, format: uuid}
      receiving_object_type: {$ref: '#/definitions/ReceivingOrderObjectType'}
      receiving_object_id: {type: string, format: uuid}
      status: {$ref: '#/definitions/ReceivingOrderStatus'}
      invoice_number: {type: string}
      payment_method: {$ref: '#/definitions/ReceivingOrderPaymentMethod'}
      payment_status: {$ref: '#/definitions/ReceivingOrderPaymentStatus'}
      payment_due_date: {type: string, format: date-time}
      products:
        type: array
        items: {$ref: '#/definitions/ReceivingOrderProductUpsertion'}
  ReceivingOrderList:
    type: array
    items: {$ref: '#/definitions/ReceivingOrder'}
  ReceivingOrderListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ReceivingOrderList'}
  ReceivingOrderObjectType:
    type: string
    enum: [purchase_order, transfer]
  ReceivingOrderPaymentMethod:
    type: string
    enum: [cash, card, check]
  ReceivingOrderPaymentStatus:
    type: string
    enum: [unpaid, paid, partial]
  ReceivingOrderProductDetails:
    type: object
    required: [product_id, product_name, product_unit, quantity_received, current_quantity, received_cost, total_value, options]
    properties:
      product_id: {type: string, format: uuid}
      product_name: {type: string}
      product_unit: {$ref: '#/definitions/UnitType'}
      quantity_ordered: {type: number, format: double}
      quantity_received: {type: number, format: double}
      current_quantity: {type: number, format: double}
      average_cost: {$ref: '#/definitions/MonetaryAmount'}
      ordered_cost: {$ref: '#/definitions/MonetaryAmount'}
      received_cost: {$ref: '#/definitions/MonetaryAmount'}
      total_value: {$ref: '#/definitions/MonetaryAmount'}
      options:
        type: array
        items: {$ref: '#/definitions/VariantOptionWithType'}
  ReceivingOrderProductDetailsList:
    type: array
    items: {$ref: '#/definitions/ReceivingOrderProductDetails'}
  ReceivingOrderProductDetailsListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ReceivingOrderProductDetailsList'}
  ReceivingOrderProductUpsertion:
    type: object
    required: [product_id]
    properties:
      product_id: {type: string, format: uuid}
      quantity: {type: number, format: double}
      cost: {type: number, format: double}
  ReceivingOrderResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ReceivingOrder'}
  ReceivingOrderStatus:
    type: string
    enum: [receiving, received, partial, canceled]
  ReceivingOrderUpdate:
    type: object
    properties:
      location_id: {type: string, format: uuid}
      receiving_object_type: {$ref: '#/definitions/ReceivingOrderObjectType'}
      receiving_object_id: {type: string, format: uuid}
      status: {$ref: '#/definitions/ReceivingOrderStatus'}
      invoice_number: {type: string}
      payment_method: {$ref: '#/definitions/ReceivingOrderPaymentMethod'}
      payment_status: {$ref: '#/definitions/ReceivingOrderPaymentStatus'}
      payment_due_date: {type: string, format: date-time}
      products:
        type: array
        items: {$ref: '#/definitions/ReceivingOrderProductUpsertion'}
  RecipeCreation:
    type: object
    required: [name, category_ids, supplier_ids, unit, location_overrides]
    properties:
      name: {type: string}
      description: {type: string}
      category_ids:
        type: array
        items: {type: string, format: uuid}
      brand_id: {type: string, format: uuid}
      supplier_ids:
        type: array
        items: {type: string, format: uuid}
      sku: {type: string}
      upc: {type: string}
      cost: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      track_inventory: {type: boolean}
      track_inventory_parts: {type: boolean}
      active: {type: boolean}
      apply_pricing_to_all_locations: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/RecipeLocationUpdate'
      makes_quantity: {type: number, format: double}
  RecipeDetail:
    type: object
    required: [id, makes_quantity]
    properties:
      id: {type: string, format: uuid}
      makes_quantity: {type: number, format: double}
  RecipeLocationUpdate:
    type: object
    required: [unit]
    properties:
      cost: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      active: {type: boolean}
  RecipeUpdate:
    type: object
    required: [location_overrides]
    properties:
      name: {type: string}
      description: {type: string}
      category_ids:
        type: array
        items: {type: string, format: uuid}
      brand_id: {type: string, format: uuid}
      supplier_ids:
        type: array
        items: {type: string, format: uuid}
      sku: {type: string}
      upc: {type: string}
      cost: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      track_inventory: {type: boolean}
      track_inventory_parts: {type: boolean}
      active: {type: boolean}
      apply_pricing_to_all_locations: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/RecipeLocationUpdate'
      makes_quantity: {type: number, format: double}
      reason: {$ref: '#/definitions/ChangeReason'}
      notes: {type: string}
  ReportCount:
    type: object
    required: [count]
    properties:
      key: {type: string}
      count: {type: integer}
  ReportCountList:
    type: array
    items: {$ref: '#/definitions/ReportCount'}
  ReportCountReportData:
    type: object
    properties:
      timeframe: {$ref: '#/definitions/ReportTimeframe'}
      result: {$ref: '#/definitions/ReportCountList'}
  ReportCountReportDataList:
    type: array
    items: {$ref: '#/definitions/ReportCountReportData'}
  ReportCountReportResponse:
    type: object
    properties:
      meta: {$ref: '#/definitions/ReportMetadata'}
      data: {$ref: '#/definitions/ReportCountReportDataList'}
  ReportCustomerSummary:
    type: object
    required: [new, returning]
    properties:
      new: {$ref: '#/definitions/CustomersSummary'}
      returning: {$ref: '#/definitions/CustomersSummary'}
  ReportCustomerSummaryPerCurrency:
    type: object
    additionalProperties:
      type: array
      items: {$ref: '#/definitions/ReportCustomerSummary'}
  ReportCustomerSummaryPerCurrencyResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ReportCustomerSummaryPerCurrency'}
  ReportInterval:
    type: string
    enum: [daily, weekly, monthly, yearly, no_interval]
  ReportMetadata:
    type: object
    properties:
      interval: {$ref: '#/definitions/ReportInterval'}
      pagination: {$ref: '#/definitions/PaginationLinks'}
  ReportProfitSummary:
    type: object
    required: [profit]
    properties:
      profit: {$ref: '#/definitions/MonetaryAmount'}
      profit_previous_week: {$ref: '#/definitions/MonetaryAmount'}
      profit_previous_month: {$ref: '#/definitions/MonetaryAmount'}
  ReportProfitSummaryPerCurrency:
    type: object
    additionalProperties:
      type: array
      items: {$ref: '#/definitions/ReportProfitSummary'}
  ReportProfitSummaryPerCurrencyResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ReportProfitSummaryPerCurrency'}
  ReportSalesSummary:
    type: object
    required: [revenue, count, avg_sale]
    properties:
      revenue: {$ref: '#/definitions/MonetaryAmount'}
      count: {type: integer}
      avg_sale: {$ref: '#/definitions/MonetaryAmount'}
  ReportSalesSummaryPerCurrency:
    type: object
    additionalProperties:
      type: array
      items: {$ref: '#/definitions/ReportSalesSummary'}
  ReportSalesSummaryPerCurrencyResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ReportSalesSummaryPerCurrency'}
  ReportTimeframe:
    type: object
    required: [start, end]
    properties:
      start: {type: string, format: date-time}
      end: {type: string, format: date-time}
  ReturnOrder:
    type: object
    required: [id, number, status, synced, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      user: {$ref: '#/definitions/UserInfo'}
      supplier: {$ref: '#/definitions/Supplier'}
      location: {$ref: '#/definitions/Location'}
      purchase_order: {$ref: '#/definitions/PurchaseOrder'}
      number: {type: string}
      notes: {type: string}
      products_count: {type: number, format: double}
      status: {$ref: '#/definitions/ReturnOrderStatus'}
      stock_value: {$ref: '#/definitions/MonetaryAmount'}
      synced: {type: boolean}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  ReturnOrderCreation:
    type: object
    required: [user_id, supplier_id, location_id, status, products]
    properties:
      user_id: {type: string, format: uuid}
      supplier_id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      purchase_order_id: {type: string, format: uuid}
      notes: {type: string}
      status: {$ref: '#/definitions/ReturnOrderStatus'}
      products:
        type: array
        items: {$ref: '#/definitions/ReturnOrderProductUpsertion'}
  ReturnOrderList:
    type: array
    items: {$ref: '#/definitions/ReturnOrder'}
  ReturnOrderListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ReturnOrderList'}
  ReturnOrderProduct:
    type: object
    required: [product_id, product_name, product_unit, reason, current_quantity, options]
    properties:
      product_id: {type: string, format: uuid}
      product_name: {type: string}
      product_unit: {$ref: '#/definitions/UnitType'}
      reason: {$ref: '#/definitions/ReturnOrderReason'}
      quantity: {type: number, format: double}
      current_quantity: {type: number, format: double}
      options:
        type: array
        items: {$ref: '#/definitions/VariantOptionWithType'}
  ReturnOrderProductList:
    type: array
    items: {$ref: '#/definitions/ReturnOrderProduct'}
  ReturnOrderProductListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ReturnOrderProductList'}
  ReturnOrderProductUpsertion:
    type: object
    required: [product_id, reason]
    properties:
      product_id: {type: string, format: uuid}
      reason: {$ref: '#/definitions/ReturnOrderReason'}
      quantity: {type: number, format: double}
  ReturnOrderReason:
    type: string
    enum: [damaged, did_not_order, wrong, other]
  ReturnOrderResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ReturnOrder'}
  ReturnOrderStatus:
    type: string
    enum: [created, sent, canceled, rejected, accepted]
  ReturnOrderUpdate:
    type: object
    properties:
      user_id: {type: string, format: uuid}
      supplier_id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      purchase_order_id: {type: string, format: uuid}
      notes: {type: string}
      status: {$ref: '#/definitions/ReturnOrderStatus'}
      products:
        type: array
        items: {$ref: '#/definitions/ReturnOrderProductUpsertion'}
  RewardRedemption:
    type: object
    required: [id, loyalty_reward_id, loyalty_membership_id, points, status, loyalty_reward_type]
    properties:
      id: {type: string, format: uuid}
      loyalty_reward_id: {type: string, format: uuid}
      loyalty_membership_id: {type: string, format: uuid}
      points: {type: integer}
      status: {$ref: '#/definitions/RewardRedemptionStatus'}
      loyalty_membership: {$ref: '#/definitions/LoyaltyMembership'}
      loyalty_reward_type: {$ref: '#/definitions/RewardType'}
      order_id: {type: string, format: uuid}
      object_id: {type: string, format: uuid}
      object_type: {$ref: '#/definitions/RewardRedemptionType'}
  RewardRedemptionCreation:
    type: object
    required: [loyalty_reward_id, loyalty_membership_id, points]
    properties:
      loyalty_reward_id: {type: string, format: uuid}
      loyalty_membership_id: {type: string, format: uuid}
      points: {type: integer}
  RewardRedemptionList:
    type: array
    items: {$ref: '#/definitions/RewardRedemption'}
  RewardRedemptionListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/RewardRedemptionList'}
  RewardRedemptionResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/RewardRedemption'}
  RewardRedemptionStatus:
    type: string
    enum: [reserved, redeemed, canceled]
  RewardRedemptionSync:
    type: object
    required: [reward_redemption_id, object_id, object_type]
    properties:
      reward_redemption_id: {type: string, format: uuid}
      object_id: {type: string, format: uuid}
      object_type: {$ref: '#/definitions/RewardRedemptionType'}
  RewardRedemptionType:
    type: string
    enum: [order_discount, order_item]
  RewardType:
    type: string
    enum: [free_product, gift_card, discount_percentage, discount_fixed_amount]
  SalesAggregate:
    type: object
    required: [count]
    properties:
      count: {type: integer}
      costs: {$ref: '#/definitions/MonetaryAmount'}
      discounts: {$ref: '#/definitions/MonetaryAmount'}
      gross_profits: {$ref: '#/definitions/MonetaryAmount'}
      gross_sales: {$ref: '#/definitions/MonetaryAmount'}
      net_sales: {$ref: '#/definitions/MonetaryAmount'}
      non_taxable: {$ref: '#/definitions/MonetaryAmount'}
      refunds: {$ref: '#/definitions/MonetaryAmount'}
      taxable: {$ref: '#/definitions/MonetaryAmount'}
      taxes: {$ref: '#/definitions/MonetaryAmount'}
      tips: {$ref: '#/definitions/MonetaryAmount'}
      tender_types:
        type: object
        additionalProperties:
          type: array
          items: {$ref: '#/definitions/MonetaryAmount'}
  SalesAggregateList:
    type: array
    items: {$ref: '#/definitions/SalesAggregate'}
  SalesAggregateReportData:
    type: object
    properties:
      timeframe: {$ref: '#/definitions/ReportTimeframe'}
      result: {$ref: '#/definitions/SalesAggregateList'}
  SalesAggregateReportDataList:
    type: array
    items: {$ref: '#/definitions/SalesAggregateReportData'}
  SalesAggregateReportResponse:
    type: object
    properties:
      meta: {$ref: '#/definitions/ReportMetadata'}
      data: {$ref: '#/definitions/SalesAggregateReportDataList'}
  SalesSummary:
    type: object
    required: [total_gross, total_net]
    properties:
      total_gross:
        type: array
        items: {$ref: '#/definitions/MonetaryAmount'}
      total_net:
        type: array
        items: {$ref: '#/definitions/MonetaryAmount'}
  SendReceiptData:
    type: object
    required: [recipient_email]
    properties:
      recipient_email: {type: string}
  SetupType:
    type: string
    enum: [dash, paytouch]
  Shift:
    type: object
    required: [id, user, start_date, end_date, start_time, end_time, repeat, send_shift_start_notification]
    properties:
      id: {type: string, format: uuid}
      user: {$ref: '#/definitions/UserInfo'}
      start_date: {type: string, format: date}
      end_date: {type: string, format: date}
      start_time: {type: string, format: time}
      end_time: {type: string, format: time}
      unpaid_break_mins: {type: integer}
      repeat: {type: boolean}
      frequency_interval: {$ref: '#/definitions/FrequencyInterval'}
      frequency_count: {type: integer}
      sunday: {type: boolean}
      monday: {type: boolean}
      tuesday: {type: boolean}
      wednesday: {type: boolean}
      thursday: {type: boolean}
      friday: {type: boolean}
      saturday: {type: boolean}
      status: {$ref: '#/definitions/ShiftStatus'}
      bg_color: {type: string}
      send_shift_start_notification: {type: boolean}
      notes: {type: string}
      location: {$ref: '#/definitions/Location'}
  ShiftCreation:
    type: object
    required: [user_id, location_id, start_date, end_date, start_time, end_time]
    properties:
      user_id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      start_date: {type: string, format: date}
      end_date: {type: string, format: date}
      start_time: {type: string, format: time}
      end_time: {type: string, format: time}
      unpaid_break_mins: {type: integer}
      repeat: {type: boolean}
      frequency_interval: {$ref: '#/definitions/FrequencyInterval'}
      frequency_count: {type: integer}
      sunday: {type: boolean}
      monday: {type: boolean}
      tuesday: {type: boolean}
      wednesday: {type: boolean}
      thursday: {type: boolean}
      friday: {type: boolean}
      saturday: {type: boolean}
      status: {$ref: '#/definitions/ShiftStatus'}
      bg_color: {type: string}
      send_shift_start_notification: {type: boolean}
      notes: {type: string}
  ShiftList:
    type: array
    items: {$ref: '#/definitions/Shift'}
  ShiftListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/ShiftList'}
  ShiftResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Shift'}
  ShiftStatus:
    type: string
    enum: [published, draft]
  ShiftUpdate:
    type: object
    properties:
      user_id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      start_date: {type: string, format: date}
      end_date: {type: string, format: date}
      start_time: {type: string, format: time}
      end_time: {type: string, format: time}
      unpaid_break_mins: {type: integer}
      repeat: {type: boolean}
      frequency_interval: {$ref: '#/definitions/FrequencyInterval'}
      frequency_count: {type: integer}
      sunday: {type: boolean}
      monday: {type: boolean}
      tuesday: {type: boolean}
      wednesday: {type: boolean}
      thursday: {type: boolean}
      friday: {type: boolean}
      saturday: {type: boolean}
      status: {$ref: '#/definitions/ShiftStatus'}
      bg_color: {type: string}
      send_shift_start_notification: {type: boolean}
      notes: {type: string}
  Source:
    type: string
    enum: [storefront, register, delivery_provider]
  State:
    type: object
    description: 'In contrast to AddressState name cannot be null'
    required: [code]
    properties:
      name: {type: string}
      code: {type: string}
      country: {$ref: '#/definitions/Country'}
  AddressState:
    type: object
    description: 'In contrast to State name can be null'
    required: [name, code]
    properties:
      name: {type: string}
      code: {type: string}
      country: {$ref: '#/definitions/Country'}
  StateList:
    type: array
    items: {$ref: '#/definitions/State'}
  StateListResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/StateList'}
  StatusTransition:
    type: object
    required: [id, status]
    properties:
      id: {type: string, format: uuid}
      status: {$ref: '#/definitions/OrderStatus'}
      created_at: {type: string, format: date-time}
  Stock:
    type: object
    required: [id, location_id, product_id, quantity, minimum_on_hand, reorder_amount, sell_out_of_stock]
    properties:
      id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      product_id: {type: string, format: uuid}
      quantity: {type: number, format: double}
      minimum_on_hand: {type: number, format: double}
      reorder_amount: {type: number, format: double}
      sell_out_of_stock: {type: boolean}
  StockCreation:
    type: object
    required: [location_id, product_id, quantity, reorder_amount]
    properties:
      location_id: {type: string, format: uuid}
      product_id: {type: string, format: uuid}
      quantity: {type: number, format: double}
      minimum_on_hand: {type: number, format: double}
      reorder_amount: {type: number, format: double}
      sell_out_of_stock: {type: boolean}
  StockCreationList:
    type: array
    items: {$ref: '#/definitions/StockCreation'}
  StockList:
    type: array
    items: {$ref: '#/definitions/Stock'}
  StockListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/StockList'}
  StockUpdate:
    type: object
    required: [location_id, product_id]
    properties:
      location_id: {type: string, format: uuid}
      product_id: {type: string, format: uuid}
      quantity: {type: number, format: double}
      minimum_on_hand: {type: number, format: double}
      reorder_amount: {type: number, format: double}
      sell_out_of_stock: {type: boolean}
      reason: {$ref: '#/definitions/QuantityChangeReason'}
      notes: {type: string}
  StockUpdateList:
    type: array
    items: {$ref: '#/definitions/StockUpdate'}
  SubcategoryUpsertion:
    type: object
    required: [id, name]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      description: {type: string}
      avatar_bg_color: {type: string}
      image_upload_ids:
        type: array
        items: {type: string, format: uuid}
      position: {type: integer}
      active: {type: boolean}
  Supplier:
    type: object
    required: [id, name]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      contact: {type: string}
      address: {type: string}
      secondary_address: {type: string}
      email: {type: string}
      phone_number: {type: string}
      secondary_phone_number: {type: string}
      account_number: {type: string}
      notes: {type: string}
      products_count: {type: integer}
      stock_value: {$ref: '#/definitions/MonetaryAmount'}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ItemLocation'
  SupplierCreation:
    type: object
    required: [name, product_ids]
    properties:
      name: {type: string}
      contact: {type: string}
      address: {type: string}
      secondary_address: {type: string}
      email: {type: string}
      phone_number: {type: string}
      secondary_phone_number: {type: string}
      account_number: {type: string}
      notes: {type: string}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ItemLocationUpdate'
      product_ids:
        type: array
        items: {type: string, format: uuid}
  SupplierInfo:
    type: object
    required: [id, name]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
  SupplierList:
    type: array
    items: {$ref: '#/definitions/Supplier'}
  SupplierListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/SupplierList'}
  SupplierResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Supplier'}
  SupplierUpdate:
    type: object
    properties:
      name: {type: string}
      contact: {type: string}
      address: {type: string}
      secondary_address: {type: string}
      email: {type: string}
      phone_number: {type: string}
      secondary_phone_number: {type: string}
      account_number: {type: string}
      notes: {type: string}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ItemLocationUpdate'
      product_ids:
        type: array
        items: {type: string, format: uuid}
  SystemCategoryCreation:
    type: object
    required: [name, image_upload_ids, subcategories, location_overrides]
    properties:
      name: {type: string}
      description: {type: string}
      avatar_bg_color: {type: string}
      image_upload_ids:
        type: array
        items: {type: string, format: uuid}
      position: {type: integer}
      parent_category_id: {type: string, format: uuid}
      subcategories:
        type: array
        items: {$ref: '#/definitions/SubcategoryUpsertion'}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/CategoryLocationUpdate'
        description: a map from location id to a CategoryLocationUpdate
  SystemCategoryUpdate:
    type: object
    required: [subcategories, location_overrides]
    properties:
      name: {type: string}
      description: {type: string}
      avatar_bg_color: {type: string}
      image_upload_ids:
        type: array
        items: {type: string, format: uuid}
      position: {type: integer}
      parent_category_id: {type: string, format: uuid}
      subcategories:
        type: array
        items: {$ref: '#/definitions/SubcategoryUpsertion'}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/CategoryLocationUpdate'
        description: a map from location id to a CategoryLocationUpdate
  TaxRate:
    type: object
    required: [id, name, value, apply_to_price]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      value: {type: string}
      apply_to_price: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ItemLocation'
  TaxRateCreation:
    type: object
    required: [name, value]
    properties:
      name: {type: string}
      value: {type: number, format: double}
      apply_to_price: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/TaxRateLocationUpdate'
  TaxRateList:
    type: array
    items: {$ref: '#/definitions/TaxRate'}
  TaxRateListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/TaxRateList'}
  TaxRateLocationUpdate:
    type: object
    properties:
      active: {type: boolean}
  TaxRateResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/TaxRate'}
  TaxRateUpdate:
    type: object
    properties:
      name: {type: string}
      value: {type: number, format: double}
      apply_to_price: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/TaxRateLocationUpdate'
  Ticket:
    type: object
    required: [id, location_id, order_id, status, show, order_items, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      order_id: {type: string, format: uuid}
      status: {$ref: '#/definitions/TicketStatus'}
      show: {type: boolean}
      route_to_kitchen_id: {type: string, format: uuid}
      order_items:
        type: array
        items: {$ref: '#/definitions/OrderItem'}
      bundle_order_items:
        type: array
        items: {$ref: '#/definitions/OrderItem'}
      order: {$ref: '#/definitions/Order'}
      started_at: {type: string, format: date-time}
      completed_at: {type: string, format: date-time}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  TicketCreation:
    type: object
    required: [location_id, order_id, order_item_ids]
    properties:
      location_id: {type: string, format: uuid}
      order_id: {type: string, format: uuid}
      order_item_ids:
        type: array
        items: {type: string, format: uuid}
      route_to_kitchen_id: {type: string, format: uuid}
  TicketList:
    type: array
    items: {$ref: '#/definitions/Ticket'}
  TicketListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/TicketList'}
  TicketResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/Ticket'}
  TicketStatus:
    type: string
    enum: [new, in_progress, completed, canceled]
  TicketUpdate:
    type: object
    properties:
      location_id: {type: string, format: uuid}
      order_id: {type: string, format: uuid}
      order_item_ids:
        type: array
        items: {type: string, format: uuid}
      status: {$ref: '#/definitions/TicketStatus'}
      show: {type: boolean}
      route_to_kitchen_id: {type: string, format: uuid}
  TimeCard:
    type: object
    required: [id, user, location, delta_mins, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      user: {$ref: '#/definitions/UserInfo'}
      location: {$ref: '#/definitions/Location'}
      shift: {$ref: '#/definitions/Shift'}
      delta_mins: {type: integer}
      total_mins: {type: integer}
      regular_mins: {type: integer}
      overtime_mins: {type: integer}
      unpaid_break_mins: {type: integer}
      notes: {type: string}
      status: {$ref: '#/definitions/TimeCardStatus'}
      start_at: {type: string, format: date-time}
      end_at: {type: string, format: date-time}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  TimeCardClock:
    type: object
    required: [pin, location_id]
    properties:
      pin: {type: string}
      location_id: {type: string, format: uuid}
  TimeCardCreation:
    type: object
    required: [user_id, location_id]
    properties:
      user_id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      shift_id: {type: string, format: uuid}
      unpaid_break_mins: {type: integer}
      notes: {type: string}
      start_at: {type: string, format: date-time}
      end_at: {type: string, format: date-time}
  TimeCardList:
    type: array
    items: {$ref: '#/definitions/TimeCard'}
  TimeCardListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/TimeCardList'}
  TimeCardResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/TimeCard'}
  TimeCardStatus:
    type: string
    enum: [open, closed]
  TimeCardUpdate:
    type: object
    properties:
      user_id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      shift_id: {type: string, format: uuid}
      unpaid_break_mins: {type: integer}
      notes: {type: string}
      start_at: {type: string, format: date-time}
      end_at: {type: string, format: date-time}
  TimeOffCard:
    type: object
    required: [id, user, paid]
    properties:
      id: {type: string, format: uuid}
      user: {$ref: '#/definitions/UserInfo'}
      paid: {type: boolean}
      type: {$ref: '#/definitions/TimeOffType'}
      notes: {type: string}
      start_at: {type: string, format: date-time}
      end_at: {type: string, format: date-time}
  TimeOffCardCreation:
    type: object
    required: [user_id, paid]
    properties:
      user_id: {type: string, format: uuid}
      paid: {type: boolean}
      type: {$ref: '#/definitions/TimeOffType'}
      notes: {type: string}
      start_at: {type: string, format: date-time}
      end_at: {type: string, format: date-time}
  TimeOffCardList:
    type: array
    items: {$ref: '#/definitions/TimeOffCard'}
  TimeOffCardListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/TimeOffCardList'}
  TimeOffCardResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/TimeOffCard'}
  TimeOffCardUpdate:
    type: object
    properties:
      user_id: {type: string, format: uuid}
      paid: {type: boolean}
      type: {$ref: '#/definitions/TimeOffType'}
      notes: {type: string}
      start_at: {type: string, format: date-time}
      end_at: {type: string, format: date-time}
  TimeOffType:
    type: string
    enum: [holiday, other, personal, sick, vacation]
  TimeZone:
    type: object
    required: [offset, id]
    properties:
      offset: {type: string}
      id: {type: string}
  TimeZoneList:
    type: array
    items: {$ref: '#/definitions/TimeZone'}
  TimeZoneListResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/TimeZoneList'}
  TrackableAction:
    type: string
    enum: [deleted]
  TransactionPaymentType:
    type: string
    enum: [cash, credit_card, debit_card, check, gift_card, delivery_provider]
  TransactionType:
    type: string
    enum: [payment, refund, void, preauth_payment, preauth_void]
  TransferOrder:
    type: object
    required: [id, number, status, type, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      from_location: {$ref: '#/definitions/Location'}
      to_location: {$ref: '#/definitions/Location'}
      user: {$ref: '#/definitions/UserInfo'}
      number: {type: string}
      notes: {type: string}
      status: {$ref: '#/definitions/ReceivingObjectStatus'}
      type: {$ref: '#/definitions/TransferOrderType'}
      products_count: {type: number, format: double}
      stock_value: {$ref: '#/definitions/MonetaryAmount'}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  TransferOrderCreation:
    type: object
    required: [from_location_id, to_location_id, user_id, type, products]
    properties:
      from_location_id: {type: string, format: uuid}
      to_location_id: {type: string, format: uuid}
      user_id: {type: string, format: uuid}
      notes: {type: string}
      type: {$ref: '#/definitions/TransferOrderType'}
      products:
        type: array
        items: {$ref: '#/definitions/TransferOrderProductUpsertion'}
  TransferOrderList:
    type: array
    items: {$ref: '#/definitions/TransferOrder'}
  TransferOrderListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/TransferOrderList'}
  TransferOrderProduct:
    type: object
    required: [product_id, product_name, product_unit, transfer_quantity, from_current_quantity, to_current_quantity, total_value,
      options]
    properties:
      product_id: {type: string, format: uuid}
      product_name: {type: string}
      product_unit: {$ref: '#/definitions/UnitType'}
      transfer_quantity: {type: number, format: double}
      from_current_quantity: {type: number, format: double}
      to_current_quantity: {type: number, format: double}
      total_value: {$ref: '#/definitions/MonetaryAmount'}
      options:
        type: array
        items: {$ref: '#/definitions/VariantOptionWithType'}
  TransferOrderProductList:
    type: array
    items: {$ref: '#/definitions/TransferOrderProduct'}
  TransferOrderProductListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/TransferOrderProductList'}
  TransferOrderProductUpsertion:
    type: object
    required: [product_id]
    properties:
      product_id: {type: string, format: uuid}
      quantity: {type: number, format: double}
  TransferOrderResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/TransferOrder'}
  TransferOrderType:
    type: string
    enum: [ongoing, outgoing]
  TransferOrderUpdate:
    type: object
    properties:
      from_location_id: {type: string, format: uuid}
      to_location_id: {type: string, format: uuid}
      user_id: {type: string, format: uuid}
      notes: {type: string}
      type: {$ref: '#/definitions/TransferOrderType'}
      products:
        type: array
        items: {$ref: '#/definitions/TransferOrderProductUpsertion'}
  UnitType:
    type: string
    enum: [unit, ounce, pound, milligram, gram, kilogram, fl_ounce, pint, milliliter, liter, inch, foot, yard, millimeter,
      centimeter, meter]
  UpdateActiveItem:
    type: object
    required: [item_id, active]
    properties:
      item_id: {type: string, format: uuid}
      active: {type: boolean}
  UpdateActiveItemList:
    type: array
    items: {$ref: '#/definitions/UpdateActiveItem'}
  UpdateActiveLocation:
    type: object
    required: [location_id, active]
    properties:
      location_id: {type: string, format: uuid}
      active: {type: boolean}
  UpdateActiveLocationList:
    type: array
    items: {$ref: '#/definitions/UpdateActiveLocation'}
  User:
    type: object
    required: [id, first_name, last_name, email, merchant_id, address, active, avatar_image_urls, is_owner, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      first_name: {type: string}
      last_name: {type: string}
      email: {type: string}
      merchant_id: {type: string, format: uuid}
      user_role_id: {type: string, format: uuid}
      user_role: {$ref: '#/definitions/UserRole'}
      locations:
        type: array
        items: {$ref: '#/definitions/Location'}
      merchant: {$ref: '#/definitions/Merchant'}
      dob: {type: string, format: date}
      phone_number: {type: string}
      address: {$ref: '#/definitions/Address'}
      avatar_bg_color: {type: string}
      active: {type: boolean}
      hourly_rate: {$ref: '#/definitions/MonetaryAmount'}
      overtime_rate: {$ref: '#/definitions/MonetaryAmount'}
      pay_schedule: {$ref: '#/definitions/PaySchedule'}
      dashboard_last_login_at: {type: string, format: date-time}
      register_last_login_at: {type: string, format: date-time}
      tickets_last_login_at: {type: string, format: date-time}
      avatar_image_urls:
        type: array
        items: {$ref: '#/definitions/ImageUrls'}
      is_owner: {type: boolean}
      access:
        type: array
        items: {$ref: '#/definitions/LoginSource'}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  UserContext:
    type: object
    required: [id, merchant_id, currency, business_type, location_ids, merchant_setup_completed]
    properties:
      id: {type: string, format: uuid}
      merchant_id: {type: string, format: uuid}
      currency: {type: string, format: currency}
      business_type: {$ref: '#/definitions/BusinessType'}
      location_ids:
        type: array
        items: {type: string, format: uuid}
      admin_id: {type: string, format: uuid}
      merchant_setup_completed: {type: boolean}
  UserCreation:
    type: object
    required: [first_name, last_name, password, email, active]
    properties:
      user_role_id: {type: string, format: uuid}
      first_name: {type: string}
      last_name: {type: string}
      password: {type: string}
      pin: {type: string}
      email: {type: string}
      dob: {type: string, format: date}
      phone_number: {type: string}
      address: {$ref: '#/definitions/AddressUpsertion'}
      avatar_bg_color: {type: string}
      active: {type: boolean}
      is_owner: {type: boolean}
      hourly_rate_amount: {type: number, format: double}
      overtime_rate_amount: {type: number, format: double}
      pay_schedule: {$ref: '#/definitions/PaySchedule'}
      avatar_image_id: {type: string, format: uuid}
      location_ids:
        type: array
        items: {type: string, format: uuid}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ItemLocationUpdate'
  UserInfo:
    type: object
    required: [id, first_name, last_name, email]
    properties:
      id: {type: string, format: uuid}
      first_name: {type: string}
      last_name: {type: string}
      email: {type: string}
  UserList:
    type: array
    items: {$ref: '#/definitions/User'}
  UserListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/UserList'}
  UserResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/User'}
  UserRole:
    type: object
    required: [id, name, has_dashboard_access, has_register_access, has_tickets_access, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      has_dashboard_access: {type: boolean}
      has_register_access: {type: boolean}
      has_tickets_access: {type: boolean}
      dashboard: {$ref: '#/definitions/Permissions'}
      register: {$ref: '#/definitions/Permissions'}
      users_count: {type: integer}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  UserRoleCreation:
    type: object
    required: [name, has_dashboard_access, has_register_access, has_tickets_access, dashboard, register]
    properties:
      name: {type: string}
      has_dashboard_access: {type: boolean}
      has_register_access: {type: boolean}
      has_tickets_access: {type: boolean}
      dashboard: {$ref: '#/definitions/PermissionsUpdate'}
      register: {$ref: '#/definitions/PermissionsUpdate'}
  UserRoleList:
    type: array
    items: {$ref: '#/definitions/UserRole'}
  UserRoleListResponse:
    allOf:
    - {$ref: '#/definitions/GenericListResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/UserRoleList'}
  UserRoleResponse:
    allOf:
    - {$ref: '#/definitions/GenericResponse'}
    - type: object
      properties:
        data: {$ref: '#/definitions/UserRole'}
  UserRoleUpdate:
    type: object
    properties:
      name: {type: string}
      has_dashboard_access: {type: boolean}
      has_register_access: {type: boolean}
      has_tickets_access: {type: boolean}
      dashboard: {$ref: '#/definitions/PermissionsUpdate'}
      register: {$ref: '#/definitions/PermissionsUpdate'}
  UserUpdate:
    type: object
    properties:
      user_role_id: {type: string, format: uuid}
      first_name: {type: string}
      last_name: {type: string}
      password: {type: string}
      pin: {type: string}
      email: {type: string}
      dob: {type: string, format: date}
      phone_number: {type: string}
      address: {$ref: '#/definitions/AddressUpsertion'}
      avatar_bg_color: {type: string}
      active: {type: boolean}
      is_owner: {type: boolean}
      hourly_rate_amount: {type: number, format: double}
      overtime_rate_amount: {type: number, format: double}
      pay_schedule: {$ref: '#/definitions/PaySchedule'}
      avatar_image_id: {type: string, format: uuid}
      location_ids:
        type: array
        items: {type: string, format: uuid}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ItemLocationUpdate'
  VariantArticleCreation:
    type: object
    required: [id, option_ids, location_overrides]
    properties:
      id: {type: string, format: uuid}
      option_ids:
        type: array
        items: {type: string, format: uuid}
      sku: {type: string}
      upc: {type: string}
      cost: {type: number, format: double}
      price: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      margin: {type: number, format: double}
      apply_pricing_to_all_locations: {type: boolean}
      discountable: {type: boolean}
      avatar_bg_color: {type: string}
      is_service: {type: boolean}
      order_routing_bar: {type: boolean}
      order_routing_kitchen: {type: boolean}
      order_routing_enabled: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ArticleLocationUpdate'
  VariantArticleUpdate:
    type: object
    required: [id, option_ids, location_overrides]
    properties:
      id: {type: string, format: uuid}
      option_ids:
        type: array
        items: {type: string, format: uuid}
      sku: {type: string}
      upc: {type: string}
      cost: {type: number, format: double}
      price: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      margin: {type: number, format: double}
      apply_pricing_to_all_locations: {type: boolean}
      discountable: {type: boolean}
      avatar_bg_color: {type: string}
      is_service: {type: boolean}
      order_routing_bar: {type: boolean}
      order_routing_kitchen: {type: boolean}
      order_routing_enabled: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ArticleLocationUpdate'
  VariantOption:
    type: object
    required: [id, name, position]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      position: {type: integer}
  VariantOptionType:
    type: object
    required: [id, name, position, options]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      position: {type: integer}
      options:
        type: array
        items: {$ref: '#/definitions/VariantOption'}
  VariantOptionUpsertion:
    type: object
    required: [id, name]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      position: {type: integer}
  VariantOptionTypeUpsertion:
    type: object
    required: [id, name, options]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      position: {type: integer}
      options:
        type: array
        items: {$ref: '#/definitions/VariantOptionUpsertion'}
  VariantOptionWithType:
    type: object
    required: [id, name, type_name]
    properties:
      id: {type: string, format: uuid}
      name: {type: string}
      type_name: {type: string}
      position: {type: integer}
      type_position: {type: integer}
  VariantPartCreation:
    type: object
    required: [id, option_ids, location_overrides]
    properties:
      id: {type: string, format: uuid}
      option_ids:
        type: array
        items: {type: string, format: uuid}
      sku: {type: string}
      upc: {type: string}
      cost: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      apply_pricing_to_all_locations: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/PartLocationUpdate'
  VariantPartUpdate:
    type: object
    required: [id, option_ids, location_overrides]
    properties:
      id: {type: string, format: uuid}
      option_ids:
        type: array
        items: {type: string, format: uuid}
      sku: {type: string}
      upc: {type: string}
      cost: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      apply_pricing_to_all_locations: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/PartLocationUpdate'
  VariantProductCreation:
    type: object
    required: [id, option_ids, location_overrides]
    properties:
      id: {type: string, format: uuid}
      option_ids:
        type: array
        items: {type: string, format: uuid}
      sku: {type: string}
      upc: {type: string}
      cost: {type: number, format: double}
      price: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      margin: {type: number, format: double}
      apply_pricing_to_all_locations: {type: boolean}
      discountable: {type: boolean}
      avatar_bg_color: {type: string}
      is_service: {type: boolean}
      order_routing_bar: {type: boolean}
      order_routing_kitchen: {type: boolean}
      order_routing_enabled: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ProductLocationUpdate'
  VariantProductUpdate:
    type: object
    required: [id, option_ids, location_overrides]
    properties:
      id: {type: string, format: uuid}
      option_ids:
        type: array
        items: {type: string, format: uuid}
      sku: {type: string}
      upc: {type: string}
      cost: {type: number, format: double}
      price: {type: number, format: double}
      unit: {$ref: '#/definitions/UnitType'}
      margin: {type: number, format: double}
      apply_pricing_to_all_locations: {type: boolean}
      discountable: {type: boolean}
      avatar_bg_color: {type: string}
      is_service: {type: boolean}
      order_routing_bar: {type: boolean}
      order_routing_kitchen: {type: boolean}
      order_routing_enabled: {type: boolean}
      location_overrides:
        type: object
        additionalProperties:
          $ref: '#/definitions/ProductLocationUpdate'
  TipsAssignment:
    type: object
    required: [id, location_id, amount, handled_via]
    properties:
      id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      user_id: {type: string, format: uuid}
      order_id: {type: string, format: uuid}
      amount: {$ref: '#/definitions/MonetaryAmount'}
      handled_via: {$ref: '#/definitions/HandledViaType'}
      handled_via_cash_drawer_activity_id: {type: string, format: uuid}
      cash_drawer_activity_id: {type: string, format: uuid}
      payment_type: {$ref: '#/definitions/OrderPaymentType'}
  TipsAssignmentUpsertion:
    type: object
    required: [id, location_id, amount, handled_via]
    properties:
      id: {type: string, format: uuid}
      location_id: {type: string, format: uuid}
      user_id: {type: string, format: uuid}
      order_id: {type: string, format: uuid}
      amount: {type: number, format: double}
      handled_via: {$ref: '#/definitions/HandledViaType'}
      handled_via_cash_drawer_activity_id: {type: string, format: uuid}
      cash_drawer_activity_id: {type: string, format: uuid}
      payment_type: {$ref: '#/definitions/OrderPaymentType'}
  HandledViaType:
    type: string
    enum: [unhandled, cash_drawer_activity, tips_distributed]
  TipsAssignmentsListResponse:
    type: object
    properties:
      data: {$ref: '#/definitions/TipsAssignmentList'}
      pagination: {$ref: '#/definitions/PaginationLinks'}
  TipsAssignmentList:
    type: array
    items: {$ref: '#/definitions/TipsAssignment'}
  Seating:
    type: object
    required: [id, table_id, table_name, table_short_name, table_floor_plan_name, table_section_name, guestsCount, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      table_id: {type: string, format: uuid}
      table_name: {type: string}
      table_short_name: {type: string}
      table_floor_plan_name: {type: string}
      table_section_name: {type: string}
      reservation_id: {type: string, format: uuid}
      guest_name: {type: string}
      guests_count: {type: number, format: integer}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  OauthCode:
    type: object
    required: [code]
    properties:
      code: {type: string, format: uuid}
  Session:
    type: object
    required: [id, source, created_at, updated_at]
    properties:
      id: {type: string, format: uuid}
      source: {$ref: '#/definitions/LoginSource'}
      created_at: {type: string, format: date-time}
      updated_at: {type: string, format: date-time}
  SessionListResponse:
    type: object
    properties:
      data: {$ref: '#/definitions/SessionList'}
      pagination: {$ref: '#/definitions/PaginationLinks'}
  SessionList:
    type: array
    items: {$ref: '#/definitions/TipsAssignment'}
  WorldpayConfig:
    type: object
    required: [account_id, acceptor_id, terminal_id, account_token]
    properties:
      account_id: {type: string}
      acceptor_id: {type: string}
      terminal_id: {type: string}
      account_token: {type: string}
  WorldpayConfigUpsertion:
    type: object
    required: [account_id, acceptor_id, terminal_id, account_token]
    properties:
      account_id: {type: string}
      acceptor_id: {type: string}
      terminal_id: {type: string}
      account_token: {type: string}
  DeliveryProvider:
    type: string
    enum: [uber_eats, postmates, door_dash]
  StripeRefundResponse:
    type: object
    properties:
      data: {$ref: '#/definitions/StripeRefund'}
  StripeRefund:
    type: object
    required: [id, amount, currency, status, charge, payment_intent]
    properties:
      id: {type: string}
      amount: {type: number, format: integer, description: 'refunded amount in cents'}
      currency: {type: string, format: currency}
      status: {type: string, description: 'status of refund'}
      charge: {type: string, description: 'id of the charge (stripes equivalent of a payment transaction) being refunded'}
      payment_intent: {type: string, description: 'id of the payment intent being refunded'}
