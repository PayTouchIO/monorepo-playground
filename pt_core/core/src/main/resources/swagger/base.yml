swagger: '2.0'
info:
  description: This is Paytouch Core API documentation.
  version: 0.1.0
  title: Paytouch Core
  contact: {name: apiteam@paytouch.io}
  license: {name: Apache 2.0, url: 'http://www.apache.org/licenses/LICENSE-2.0.html'}
host: example.com
schemes: [https]
securityDefinitions:
  bearer: {type: apiKey, name: Authorization, in: header}
paths:
  /ping:
    get:
      tags: [utils]
      summary: Checks if API responds something.
      consumes: [application/json]
      produces: [application/json]
      responses:
        '200': {description: API is alive}
  /v1/pusher.auth:
    post:
      tags: [users]
      summary: Verifies users credentials and returns a Pusher token.
      description: If the credentials are wrong or the channel is invalid, we return 403 (Forbidden).
      operationId: pusherAuth
      consumes: [application/json]
      produces: [application/json]
      parameters:
      - in: body
        name: body
        description: Pusher data object to authenticate
        required: true
        schema: {$ref: 'definitions.yml#/definitions/PusherAuthentication'}
      responses:
        '200':
          description: Successfully authenticated
          schema: {$ref: 'definitions.yml#/definitions/PusherToken'}
        '403': {description: Unauthorized}
  /v1/admin/admins.auth:
    post:
      tags: [admins]
      summary: Verifies admins credentials and returns a JWT token.
      description: If the credentials are wrong, we return 403 (Forbidden).
      operationId: adminsAuth
      consumes: [application/json]
      produces: [application/json]
      parameters:
      - in: body
        name: body
        description: Credentials object to authenticate
        required: true
        schema: {$ref: 'definitions.yml#/definitions/AdminLoginCredentials'}
      responses:
        '200':
          description: Successfully authenticated
          schema: {$ref: 'definitions.yml#/definitions/LoginResponse'}
          examples:
            application/json:
              object: login_response
              data: {value: jwtTokenValue, hashedPin: null}
        '401': {description: Unauthorized}

  /v1/admin/admins.google_auth:
    post:
      tags: [admins]
      summary: Verifies the id_token value after Google Sign In auth flow and returns a JWT token.
      description: If the credentials are wrong, we return 403 (Forbidden).
      operationId: adminsGoogleAuth
      consumes: [application/json]
      produces: [application/json]
      parameters:
        - in: body
          name: body
          description: Credentials object to authenticate
          required: true
          schema: {$ref: 'definitions.yml#/definitions/GoogleIdToken'}
      responses:
        '200':
          description: Successfully authenticated
          schema: {$ref: 'definitions.yml#/definitions/LoginResponse'}
          examples:
            application/json:
              object: login_response
              data: {value: jwtTokenValue, hashedPin: null}
        '401': {description: Unauthorized}
  /v1/admin/admins.login_as:
    post:
      tags: [admins]
      summary: Returns a JWT that allows an admin to login in behalf of a user.
      description: ''
      operationId: adminsLoginAs
      consumes: [application/json]
      produces: [application/json]
      parameters:
      - {name: user_id, in: query, type: string, format: uuid, description: the UUID of the user, required: true}
      - name: source
        in: query
        type: string
        enum: [pt_dashboard, pt_kitchen_view, pt_register]
        description: the source from which we need to login
        required: true
      responses:
        '200':
          description: Successfully authenticated
          schema: {$ref: 'definitions.yml#/definitions/LoginResponse'}
          examples:
            application/json:
              object: login_response
              data: {value: jwtTokenValue, hashedPin: hashedPing}
        '404': {description: User id does not exist}
  /v1/admin/admins.create:
    post:
      tags: [admins]
      parameters:
      - {name: admin_id, in: query, type: string, format: uuid, description: the UUID of the admin, required: true}
      - name: admin
        in: body
        description: The admin you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/AdminCreation'}
      summary: Creates a admin
      description: ''
      operationId: createAdmin
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/AdminResponse'}
          examples:
            data: {id: e2ec0c3e-c96a-4884-9717-d54e459dbde0, first_name: Daniela, last_name: Sfregola, email: daniela@paytouch.io}
            object: admin
  /v1/admin/admins.me:
    get:
      tags: [admins]
      summary: Verifies currently logged in admin
      description: ''
      operationId: adminsMe
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: 'expand[]', in: query, type: string, format: string, description: '', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/AdminResponse'}
          examples:
            object: admin
            data: {id: e2ec0c3e-c96a-4884-9717-d54e459dbde0, first_name: Daniela, last_name: Sfregola, email: daniela@paytouch.io,
              last_login_at: null, created_at: '2016-02-17T16:39:51Z', updated_at: '2016-02-17T16:39:51Z'}
  /v1/admin/admins.update:
    put:
      tags: [admins]
      parameters:
      - {name: admin_id, in: query, type: string, format: uuid, description: the UUID of the admin to update, required: true}
      - name: admin
        in: body
        description: The admin you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/AdminUpdate'}
      summary: Updates a admin
      description: ''
      operationId: updateAdmin
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200': {description: OK - entity has been updated}
  /v1/users.auth:
    post:
      tags: [users]
      summary: Verifies users credentials and returns a JWT token.
      description: If the credentials are wrong, we return 403 (Forbidden). If the user is deleted or disabled, we return
        401 (Unauthorized)
      operationId: usersAuth
      consumes: [application/json]
      produces: [application/json]
      parameters:
      - in: body
        name: body
        description: Credentials object to authenticate
        required: true
        schema: {$ref: 'definitions.yml#/definitions/LoginCredentials'}
      responses:
        '200':
          description: Successfully authenticated
          schema: {$ref: 'definitions.yml#/definitions/LoginResponse'}
          examples:
            application/json:
              object: login_response
              data: {value: jwtTokenValue, hashedPin: hashedPin}
        '401': {description: Unauthorized}
  /v1/users.logout:
    post:
      tags: [users]
      summary: Expires the jwt token.
      description: ''
      operationId: usersLogout
      consumes: [application/json]
      produces: [application/json]
      responses:
        '204': {description: Token expired}
  /v1/users.create:
    post:
      tags: [users]
      parameters:
      - {name: user_id, in: query, type: string, format: uuid, description: the UUID of the user, required: true}
      - name: user
        in: body
        description: The user you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/UserCreation'}
      summary: Creates a user
      description: ''
      operationId: createUser
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/UserResponse'}
          examples:
            data: {id: e2ec0c3e-c96a-4884-9717-d54e459dbde0, first_name: Daniela, last_name: Sfregola, email: daniela@paytouch.io,
              merchant_id: d7b82de4-26c7-4bd4-a989-d00ab4d2d445, locations: null, merchant: null, created_at: '2016-02-17T16:39:51Z',
              updated_at: '2016-02-17T16:39:51Z'}
            object: user
  /v1/users.context:
    get:
      tags: [users]
      summary: Returns context information on the current user
      description: Note this is used for authentication purposes by pt_ordering
      operationId: usersContext
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/UserContext'}
  /v1/users.delete:
    post:
      tags: [users]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the users to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes users. It ignores non-existing users or users that do not belong to the user
      description: Note that this is a soft delete -- no user is actually deleted!
      operationId: deleteUsers
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the users have been deleted}
  /v1/users.get:
    get:
      tags: [users]
      description: Note that the permissions fields of the user role are never expanded. Also, when expansing locations, the
        locations themselves will also be expanded.
      operationId: usersGet
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: user_id, in: query, type: string, format: uuid, description: The id of the user to return, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''locations'', ''merchant'', ''access''.', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/UserResponse'}
          examples:
            data:
              id: e2ec0c3e-c96a-4884-9717-d54e459dbde0
              first_name: Daniela
              last_name: Sfregola
              email: daniela@paytouch.io
              phone_number: null
              pay_schedule: null
              avatar_bg_color: null
              dob: null
              avatar_image_urls: null
              user_role: null
              overtime_rate: {amount: 10, currency: USD}
              active: true
              address: null
              hourly_rate: null
              merchant_id: d7b82de4-26c7-4bd4-a989-d00ab4d2d445
              locations: null
              merchant: null
              dashboard_last_login_at: null
              tickets_last_login_at: null
              register_last_login_at: null
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: user
  /v1/users.list:
    get:
      tags: [users]
      description: Note that the permissions fields of the user role are never expanded. Also, when expansing locations, the
        locations themselves will also be expanded.
      operationId: usersList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filters the users by location id, required: false}
      - {name: user_role_id, in: query, type: string, format: uuid, description: Filters the users by user role id, required: false}
      - {name: q, in: query, type: string, description: 'query search over firstName, lastName, email', required: false}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''locations'', ''merchant'', ''access''.', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/UserListResponse'}
          examples:
            data:
            - id: e2ec0c3e-c96a-4884-9717-d54e459dbde0
              first_name: Daniela
              last_name: Sfregola
              email: daniela@paytouch.io
              phone_number: null
              pay_schedule: null
              avatar_bg_color: null
              dob: null
              avatar_image_urls: null
              user_role: null
              overtime_rate: {amount: 10, currency: USD}
              active: true
              address: null
              hourly_rate: null
              merchant_id: d7b82de4-26c7-4bd4-a989-d00ab4d2d445
              locations: null
              merchant: null
              dashboard_last_login_at: null
              kitchen_view_last_login_at: null
              register_last_login_at: null
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: list
  /v1/users.me:
    get:
      tags: [users]
      summary: Verifies currently logged in user
      description: Note that the permissions fields of the user role are always expanded. Also, when expansing locations,
        the locations themselves will also be expanded.
      operationId: usersMe
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''locations'', ''merchant'', ''merchant_setup_steps'', ''access''.', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/UserResponse'}
          examples:
            object: user
            data:
              id: e2ec0c3e-c96a-4884-9717-d54e459dbde0
              first_name: Daniela
              last_name: Sfregola
              email: daniela@paytouch.io
              phone_number: null
              pay_schedule: null
              avatar_bg_color: null
              dob: null
              avatar_image_urls: null
              user_role: null
              overtime_rate: {amount: 10, currency: USD}
              active: true
              address: null
              hourly_rate: null
              merchant_id: d7b82de4-26c7-4bd4-a989-d00ab4d2d445
              locations: null
              merchant: null
              dashboard_last_login_at: null
              kitchen_view_last_login_at: null
              register_last_login_at: null
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
  /v1/users.update:
    put:
      tags: [users]
      parameters:
      - {name: user_id, in: query, type: string, format: uuid, description: the UUID of the user to update, required: true}
      - name: user
        in: body
        description: The user you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/UserUpdate'}
      summary: Updates a user
      description: ''
      operationId: updateUser
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200': {description: OK - entity has been updated}
  /v1/users.update_active:
    post:
      tags: [users]
      parameters:
      - name: body
        in: body
        description: An object mapping users ids to the desired boolean active state. Users not included will not change.
        schema: {$ref: 'definitions.yml#/definitions/UpdateActiveItemList'}
        required: true
      summary: Sets the global active flag for each user provided. Leaves all the other users untouched.
      description: ''
      operationId: usersUpdateActive
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content - users were enabled/disabled}
  /v1/users.start_password_reset:
    post:
      tags: [users]
      parameters:
      - {name: email, in: query, type: string, description: email of the user, required: true}
      summary: Starts password reset for a user.
      description: Note that the response is the same regardless of whether a user with the given email exists. If a user is found an email will be sent with instructions to reset their password.
      operationId: startPasswordReset
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: 'No content'}
  /v1/users.password_reset:
    post:
      tags: [users]
      parameters:
      - name: password reset
        in: body
        required: true
        schema: {$ref: 'definitions.yml#/definitions/PasswordReset'}
      summary: Resets the password for a user and returns a JWT token.
      description: If the password doesn't meet our requirements we return 400 (Bad Request). If the token is expired, has been used or doesn't exist we return 404 (Not Found).
      operationId: passwordReset
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: Successfully authenticated
          schema: {$ref: 'definitions.yml#/definitions/LoginResponse'}
          examples:
            application/json:
              object: login_response
              data: {value: jwtTokenValue, hashedPin: hashedPin}
        '400': {description: Bad Request}
        '404': {description: Not Found}
  /v1/parts.create:
    post:
      tags: [parts]
      parameters:
      - {name: part_id, in: query, type: string, format: uuid, description: the UUID of the part, required: true}
      - name: part
        in: body
        description: The part you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/PartCreation'}
      summary: Creates a part, optionally with variants
      description: ''
      operationId: upsertPart
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ProductResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: Penne
              description: 500gr of awesome penne
              brand_id: 3aef7d02-1380-4ee1-b09e-87f1e36540ec
              price: {amount: '0.54', currency: USD}
              cost: {amount: '0.3', currency: USD}
              unit: unit
              margin: 1.2
              upc: penne-awesome-upc-1234
              sku: penne-awesome-sku-1234
              is_variant_of_part_id: null
              has_variant: false
              track_inventory: false
              active: true
              apply_pricing_to_all_locations: false
              order_routing_bar: false
              order_routing_kitchen: false
              discountable: true
              avatar_bg_color: red
              avatar_image_urls: null
              categories: null
              location_overrides: null
              variants: []
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: part
  /v1/parts.update:
    post:
      tags: [parts]
      parameters:
      - {name: part_id, in: query, type: string, format: uuid, description: the UUID of the part, required: true}
      - name: part
        in: body
        description: The part you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/PartUpdate'}
      summary: Updates a part and its part variants. Supports partial updates. It accepts 'reason' (by default set to 'manual')
        and 'notes' attributes to record price/cost changes. When adding/creating variants, fields will be inherited from
        the main part when needed.
      description: ''
      operationId: updatePart
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/ProductResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: Penne
              description: 500gr of awesome penne
              brand_id: 3aef7d02-1380-4ee1-b09e-87f1e36540ec
              price: {amount: '0.54', currency: USD}
              cost: {amount: '0.3', currency: USD}
              unit: unit
              margin: 1.2
              upc: penne-awesome-upc-1234
              sku: penne-awesome-sku-1234
              is_variant_of_part_id: null
              has_variant: false
              track_inventory: false
              active: true
              apply_pricing_to_all_locations: false
              order_routing_bar: false
              order_routing_kitchen: false
              discountable: true
              avatar_bg_color: red
              avatar_image_urls: null
              categories: null
              location_overrides: null
              variants: []
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: part
  /v1/payment_transactions.validate:
    post:
      tags: [payment_transactions]
      parameters:
      - {name: payment_transaction_id, in: query, type: string, format: uuid, description: the UUID of the payment transaction,
        required: true}
      summary: Check if the payment transaction is still valid, it will return 204 if it was done less than 2 days before
        the call, 400 if is older than 2 days, or 404 if the payment transaction for the id in input is not accessible/found.
      description: Validate payment transaction by id
      operationId: paymentTransactionValidate
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: Valid - payment transaction is still valid (done less than 48 hours before)}
        '400': {description: Invalid - payment transaction is invalid (done less than 48 hours before)}
        '404': {description: NotFound - payment transaction is not found}
  /v1/articles.list:
    get:
      tags: [articles]
      summary: Returns a paginated list of articles for the current merchant.
      description: The articles are returns ordered by name. When filtering by category id, the articles are returned in order
        by category position and product name if the category position is the same. When filtering by q, the search is perform
        by looking at the article name, upc and sku. It differs from products.list because it is possible not to specify a
        scope, while with products.list a scope = product is infered if nothing is sent.
      operationId: articlesList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'location_id[]', in: query, type: string, format: uuid, description: Filter by location ids (a comma separated
          list), required: false}
      - {name: category_id, in: query, type: string, format: uuid, description: Filter by category id, required: false}
      - {name: 'category_id[]', in: query, type: string, format: uuid, description: Filter by category ids (a comma separated
          list), required: false}
      - {name: modifier_set_id, in: query, type: string, format: uuid, description: Filter by modifier set id, required: false}
      - {name: supplier_id, in: query, type: string, format: uuid, description: Filter by supplier id, required: false}
      - {name: loyalty_reward_id, in: query, type: string, format: uuid, description: Filter by loyalty reward id, required: false}
      - {name: q, in: query, type: string, description: Filter by product names + sku + upc matching the query, required: false}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      - {name: low_inventoy, in: query, type: boolean, description: 'Filter by low inventory if true, filter by high inventory
          if false', required: false}
      - {name: is_combo, in: query, type: boolean, description: Filter by is_combo flag, required: false}
      - {name: scope, in: query, type: string, description: 'Filter articles by scope. Valid values (only a single value can
          be given at once): ''product'', ''part''. Note: no default is applied.', required: false}
      - {name: type, in: query, type: string, description: 'Filter articles by type. Valid values (only a single value can
          be given at once): ''simple'', ''template'', ''variant'', ''main'' (simple+template), ''storable'' (simple+variant).
          If both type and type[] are not present, the default type is ''main''.', required: false}
      - {name: 'type[]', in: query, type: string, description: 'Filter articles by multiple types. Valid values (multiple
          values separated by comma are allowed): ''simple'', ''template'', ''variant'', ''main'' (simple+template), ''storable''
          (simple+variant). If both type and type[] are not present, the default type is ''main''.', required: false}
      - {name: 'ids[]', in: query, type: string, format: uuid, description: Filter by article ids (a comma separated
          list), required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''categories'', ''category_ids'', ''variants'', ''modifiers'', ''modifier_ids'',
          ''tax_rates'', ''tax_rate_locations'', ''tax_rate_ids'', ''stock_level'', ''suppliers'', ''recipe_details'', ''category_positions'', ''reorder_amount'',
          ''price_ranges'', ''cost_ranges''.', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ProductListResponse'}
  /v1/products.list:
    get:
      tags: [products]
      summary: Returns a paginated list of products for the current merchant.
      description: The products are returns ordered by name. When filtering by category id, the products are returned in order
        by category position and product name if the category position is the same. When filtering by q, the search is perform
        by looking at the product name, upc and sku.
      operationId: productsList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'location_id[]', in: query, type: string, format: uuid, description: Filter by location ids (a comma separated
          list), required: false}
      - {name: category_id, in: query, type: string, format: uuid, description: Filter by category id, required: false}
      - {name: 'category_id[]', in: query, type: string, format: uuid, description: Filter by category ids (a comma separated
          list), required: false}
      - {name: 'catalog_category_id[]', in: query, type: string, format: uuid, description: Filter by catalog category ids
          (a comma separated list), required: false}
      - {name: modifier_set_id, in: query, type: string, format: uuid, description: Filter by modifier set id, required: false}
      - {name: supplier_id, in: query, type: string, format: uuid, description: Filter by supplier id, required: false}
      - {name: loyalty_reward_id, in: query, type: string, format: uuid, description: Filter by loyalty reward id, required: false}
      - {name: q, in: query, type: string, description: Filter by product names + sku + upc matching the query, required: false}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      - {name: low_inventoy, in: query, type: boolean, description: 'Filter by low inventory if true, filter by high inventory
          if false', required: false}
      - {name: is_combo, in: query, type: boolean, description: Filter by is_combo flag, required: false}
      - {name: scope, in: query, type: string, description: 'Filter articles by scope. Valid values (only a single value can
          be given at once): ''product'', ''part''. If not present, the default scope is ''product''.', required: false}
      - {name: type, in: query, type: string, description: 'Filter articles by type. Valid values (only a single value can
          be given at once): ''simple'', ''template'', ''variant'', ''main'' (simple+template), ''storable'' (simple+variant).
          If both type and type[] are not present, the default type is ''main''.', required: false}
      - {name: 'type[]', in: query, type: string, description: 'Filter articles by multiple types. Valid values (multiple
          values separated by comma are allowed): ''simple'', ''template'', ''variant'', ''main'' (simple+template), ''storable''
          (simple+variant). If both type and type[] are not present, the default type is ''main''.', required: false}
      - {name: 'ids[]', in: query, type: string, format: uuid, description: Filter by product ids (a comma separated
          list), required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''categories'', ''category_ids'', ''variants'', ''modifiers'', ''modifier_ids'',
          ''tax_rates'', ''tax_rate_locations'', ''tax_rate_ids'', ''stock_level'', ''suppliers'', ''recipe_details'', ''category_positions'', ''reorder_amount'',
          ''price_ranges'', ''cost_ranges'', ''catalog_categories'', ''catalog_category_options, ''catalog_category_positions''.', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ProductListResponse'}
          examples:
            data:
            - id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: Penne
              description: 500gr of awesome penne
              brand_id: 3aef7d02-1380-4ee1-b09e-87f1e36540ec
              price: {amount: '0.54', currency: USD}
              cost: {amount: '0.3', currency: USD}
              unit: unit
              upc: penne-awesome-upc-1234
              sku: penne-awesome-sku-1234
              has_variant: false
              track_inventory: false
              apply_pricing_to_all_locations: false
              order_routing_bar: false
              order_routing_kitchen: false
              discountable: true,
              avatar_bg_color: red
              avatar_image_urls: null
              is_service: false
              margin: 11.0
              active: true
              type: simple
              location_overrides:
              - location_id: c611743b-b7f0-3a1c-ac36-8bc2bad25ef4
                price: {amount: 0.54, currency: USD}
                cost: {amount: 0.13, currency: USD}
                unit: unit
                margin: 12.0
                active: true
              modifiers: null
              is_variant_of_product_id: null
              options: []
              variant_products: null
              variants: null
              stock_level: null
              categories: null
              suppliers: null
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: list
  /v1/products.list_popular:
    get:
      tags: [products]
      summary: Returns a list of the two most popular products in the last 2 weeks.
      operationId: productsListPopular
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'location_id[]', in: query, type: string, format: uuid, description: Filter by location ids (a comma separated
          list), required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ProductListResponse'}
  /v1/products.delete:
    post:
      tags: [products]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the products to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes products. It ignores non-existing products or products that do not belong to the user
      description: Note that this is a soft delete -- no product is actually deleted!
      operationId: deleteProducts
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the products have been deleted}
  /v1/products.get:
    get:
      tags: [products]
      summary: Returns the defintion of a product for the current merchant
      description: ''
      operationId: productsGetById
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: product_id, in: query, type: string, format: uuid, description: the UUID of the product, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''categories'', ''variants'', ''modifiers'', ''tax_rates'', ''stock_level'',
          ''suppliers'', ''recipe_details'', ''category_positions'', ''reorder_amount'', ''price_ranges'',''cost_ranges'',
          ''catalog_categories'', ''catalog_category_options'', ''catalog_category_positions''. Note that ''variants'' will
          expand both variants and variant products.', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ProductResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: Penne
              description: 500gr of awesome penne
              brand_id: 3aef7d02-1380-4ee1-b09e-87f1e36540ec
              price: {amount: '0.54', currency: USD}
              cost: {amount: '0.3', currency: USD}
              unit: unit
              margin: 1.23
              upc: penne-awesome-upc-1234
              sku: penne-awesome-sku-1234
              has_variant: false
              track_inventory: false
              apply_pricing_to_all_locations: false
              order_routing_bar: false
              order_routing_kitchen: false
              discountable: true
              avatar_bg_color: red
              avatar_image_urls: null
              is_service: false
              active: true
              type: simple
              location_overrides:
              - location_id: c611743b-b7f0-3a1c-ac36-8bc2bad25ef4
                price: {amount: 0.54, currency: USD}
                cost: {amount: 0.13, currency: USD}
                unit: unit
                margin: 12.0
                active: true
              modifiers: null
              is_variant_of_product_id: null
              options: []
              variant_products: null
              variants: null
              stock_level: null
              categories: null
              suppliers: null
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: product
  /v1/products.create:
    post:
      tags: [products]
      parameters:
      - {name: product_id, in: query, type: string, format: uuid, description: the UUID of the product, required: true}
      - name: product
        in: body
        description: The product you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ProductCreation'}
      summary: Creates a product, optionally with variants
      description: ''
      operationId: upsertProduct
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ProductResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: Penne
              description: 500gr of awesome penne
              brand_id: 3aef7d02-1380-4ee1-b09e-87f1e36540ec
              price: {amount: '0.54', currency: USD}
              cost: {amount: '0.3', currency: USD}
              unit: unit
              margin: 1.2
              upc: penne-awesome-upc-1234
              sku: penne-awesome-sku-1234
              is_variant_of_product_id: null
              has_variant: false
              track_inventory: false
              active: true
              apply_pricing_to_all_locations: false
              order_routing_bar: false
              order_routing_kitchen: false
              discountable: true
              avatar_bg_color: red
              avatar_image_urls: null
              categories: null
              location_overrides: null
              variants: []
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: product
  /v1/products.update:
    post:
      tags: [products]
      parameters:
      - {name: product_id, in: query, type: string, format: uuid, description: the UUID of the product, required: true}
      - name: product
        in: body
        description: The product you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ProductUpdate'}
      summary: Updates a product and its product variants. Supports partial updates. It accepts 'reason' (by default set to
        'manual') and 'notes' attributes to record price/cost changes. When adding/creating variants, fields will be inherited
        from the main product when needed.
      description: ''
      operationId: updateProduct
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/ProductResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: Penne
              description: 500gr of awesome penne
              brand_id: 3aef7d02-1380-4ee1-b09e-87f1e36540ec
              price: {amount: '0.54', currency: USD}
              cost: {amount: '0.3', currency: USD}
              unit: unit
              margin: 1.2
              upc: penne-awesome-upc-1234
              sku: penne-awesome-sku-1234
              is_variant_of_product_id: null
              has_variant: false
              track_inventory: false
              active: true
              apply_pricing_to_all_locations: false
              order_routing_bar: false
              order_routing_kitchen: false
              discountable: true
              avatar_bg_color: red
              avatar_image_urls: null
              categories: null
              location_overrides: null
              variants: []
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: product
  /v1/products.assign_modifier_sets:
    post:
      tags: [products]
      summary: Assigns modifier sets to a product
      description: ''
      operationId: productsAssignModifierSets
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: product_id, in: query, type: string, format: uuid, description: the UUID of the product, required: true}
      - name: productModifierSetsAssignment
        in: body
        description: The modifier set ids to assign to the product
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ProductModifierSetsAssignment'}
      responses:
        '204': {description: OK - No Content}
  /v1/products.add_parts:
    post:
      tags: [products]
      summary: Associates parts to a product
      description: ''
      operationId: productsAddParts
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: product_id, in: query, type: string, format: uuid, description: the UUID of the product, required: true}
      - name: productPartAssignment
        in: body
        description: The part ids and quantities to associate to the product. The list is total, so any previously associated
          part that is not in the list will be removed.
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ProductPartAssignments'}
      responses:
        '204': {description: OK - No Content}
  /v1/products.list_parts:
    get:
      tags: [products]
      summary: Returns a paginated list of parts associated to a product.
      operationId: productPartsList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: product_id, in: query, type: string, format: uuid, description: the UUID of the product id, required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ProductPartListResponse'}
  /v1/products.update_active:
    post:
      tags: [products]
      parameters:
      - {name: product_id, in: query, type: string, format: uuid, description: the UUID of the product, required: true}
      - name: body
        in: body
        description: An object mapping location ids to the desired boolean active state. Locations not included won't be touched.
        schema: {$ref: 'definitions.yml#/definitions/UpdateActiveLocationList'}
        required: true
      summary: Sets the active flag for the product in the given locations to the given state. Leaves all other locations
        untouched.
      description: ''
      operationId: products_updateActiveAtLocations
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content - product was enabled in the given locations}
        '400': {description: Bad Request - some location ids do not exist or are not owned by current user}
  /v1/products.list_inventory:
    get:
      tags: [products]
      parameters:
      - {name: category_id, in: query, type: string, format: uuid, description: Filter by category id, required: false}
      - {name: 'category_id[]', in: query, type: string, format: uuid, description: Filter by category ids (a comma separated
          list), required: false}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by category id, required: false}
      - {name: 'location_id[]', in: query, type: string, format: uuid, description: Filter by location ids (a comma separated
          list), required: false}
      - {name: low, in: query, type: boolean, description: Filter by low inventory, required: false}
      - {name: q, in: query, type: string, description: Filter by product names + sku + upc matching the query, required: false}
      - {name: supplier_id, in: query, type: string, format: uuid, description: Filter by supplier id, required: false}
      summary: Returns a paginated list of product inventory for the current merchant.
      operationId: productsListInventory
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/InventoryListResponse'}
          examples:
            data:
            - id: 59417ae1-bd95-3195-8c26-170227ea235a
              name: Product 1
              upc: a-upc
              sku: a-sku
              total_quantity: {amount: '10', unit: unit}
              total_sold: {amount: '3', unit: unit}
              total_revenue: {amount: '0.9', currency: USD}
              stock_value: {amount: '3.3', currency: USD}
            object: list
  /v1/articles.list_inventory:
    get:
      tags: [products]
      parameters:
      - {name: category_id, in: query, type: string, format: uuid, description: Filter by category id, required: false}
      - {name: 'category_id[]', in: query, type: string, format: uuid, description: Filter by category ids (a comma separated
          list), required: false}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by category id, required: false}
      - {name: 'location_id[]', in: query, type: string, format: uuid, description: Filter by location ids (a comma separated
          list), required: false}
      - {name: low, in: query, type: boolean, description: Filter by low inventory, required: false}
      - {name: q, in: query, type: string, description: Filter by product names + sku + upc matching the query, required: false}
      - {name: supplier_id, in: query, type: string, format: uuid, description: Filter by supplier id, required: false}
      - {name: is_combo, in: query, type: boolean, description: Filter by is_combo flag, required: false}
      - {name: scope, in: query, type: string, description: 'Filter articles by scope. Valid values (only a single value can
          be given at once): ''product'', ''part''. If not present, both products and parts are returned.', required: false}
      - {name: type, in: query, type: string, description: 'Filter articles by type. Valid values (only a single value can
          be given at once): ''simple'', ''template'', ''variant'', ''main'' (simple+template), ''storable'' (simple+variant).
          If both type and type[] are not present, the default type is ''main''.', required: false}
      - {name: 'type[]', in: query, type: string, description: 'Filter articles by multiple types. Valid values (multiple
          values separated by comma are allowed): ''simple'', ''template'', ''variant'', ''main'' (simple+template), ''storable''
          (simple+variant). If both type and type[] are not present, the default type is ''main''.', required: false}
      summary: Returns a paginated list of article inventory for the current merchant.
      operationId: articlesListInventory
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/InventoryListResponse'}
  /v1/products.compute_revenue:
    get:
      tags: [products]
      parameters:
      - {name: product_id, in: query, type: string, format: uuid, description: The id of the product we want to compute the
          revenue., required: true}
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the order location. Example of a valid
          format: ''2011-12-03T10:15:30''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the order location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: false}
      summary: Returns the product revenue of a product for each location
      operationId: productComputeRevenue
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ProductRevenueResponse'}
          examples:
            data:
              product_id: 102565e3-b3d5-37e5-88d3-eb3dd6f3eee6
              revenue_per_location:
              - location_id: 99874f19-f590-3bc6-a739-1977c5d2bc3a
                avg_price: {amount: '103.0', currency: USD}
                avg_discount: {amount: '1.0', currency: USD}
                avg_cost: {amount: '100.0', currency: USD}
                avg_margin: '103.00'
                total_sold: {amount: '11.0000', unit: unit}
                total_revenue: {amount: '1111.0', currency: USD}
                total_tax: {amount: '1.0', currency: USD}
                total_profit: {amount: '11.0', currency: USD}
            object: product_revenue
  /v1/recipes.create:
    post:
      tags: [recipes]
      parameters:
      - {name: recipe_id, in: query, type: string, format: uuid, description: the UUID of the recipe, required: true}
      - name: recipe
        in: body
        description: The recipe you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/RecipeCreation'}
      summary: Creates a recipe, optionally with variants
      description: ''
      operationId: upsertRecipe
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ProductResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: Penne
              description: 500gr of awesome penne
              brand_id: 3aef7d02-1380-4ee1-b09e-87f1e36540ec
              price: {amount: '0.54', currency: USD}
              cost: {amount: '0.3', currency: USD}
              unit: unit
              margin: 1.2
              upc: penne-awesome-upc-1234
              sku: penne-awesome-sku-1234
              is_variant_of_recipe_id: null
              has_variant: false
              track_inventory: false
              active: true
              apply_pricing_to_all_locations: false
              order_routing_bar: false
              order_routing_kitchen: false
              discountable: true
              avatar_bg_color: red
              avatar_image_urls: null
              categories: null
              location_overrides: null
              variants: []
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: recipe
  /v1/recipes.update:
    post:
      tags: [recipes]
      parameters:
      - {name: recipe_id, in: query, type: string, format: uuid, description: the UUID of the recipe, required: true}
      - name: recipe
        in: body
        description: The recipe you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/RecipeUpdate'}
      summary: Updates a recipe and its recipe variants. Supports recipeial updates. It accepts 'reason' (by default set to
        'manual') and 'notes' attributes to record price/cost changes. When adding/creating variants, fields will be inherited
        from the main recipe when needed.
      description: ''
      operationId: updateRecipe
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/ProductResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: Penne
              description: 500gr of awesome penne
              brand_id: 3aef7d02-1380-4ee1-b09e-87f1e36540ec
              price: {amount: '0.54', currency: USD}
              cost: {amount: '0.3', currency: USD}
              unit: unit
              margin: 1.2
              upc: penne-awesome-upc-1234
              sku: penne-awesome-sku-1234
              is_variant_of_recipe_id: null
              has_variant: false
              track_inventory: false
              active: true
              apply_pricing_to_all_locations: false
              order_routing_bar: false
              order_routing_kitchen: false
              discountable: true
              avatar_bg_color: red
              avatar_image_urls: null
              categories: null
              location_overrides: null
              variants: []
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: recipe
  /v1/locations.list:
    get:
      tags: [locations]
      summary: Returns a paginated list of locations for the current merchant
      description: Note this returns only the locations accessible to the logged user
      operationId: locationsList
      parameters:
      - {name: q, in: query, type: string, description: Filter by location names matching the query, required: false}
      - {name: all, in: query, type: boolean, description: 'Returns all locations of a merchant, regardless of user locations.',
        required: false}
      - {name: 'expand[]', in: query, type: string, description: 'Comma separated values of the fields to expand. Possible
          fields to expand: "settings", "tax_rates", "opening_hours"', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/LocationListResponse'}
          examples:
            data:
            - id: c19a6137-9b1b-415c-8f17-4442a2cc6c24
              name: New York Store
              active: true
              address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
              timezone: US/New_york
              phone_number: '+39123123123'
              email: foo@email.it
              settings: null
              tax_rates: null
              opening_hours: null
            object: list
  /v1/locations.get:
    get:
      tags: [locations]
      summary: Returns a paginated list of locations for the current merchant
      description: ''
      operationId: locations_getById
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: The id of the location., required: true}
      - {name: 'expand[]', in: query, type: string, description: 'Comma separated values of the fields to expand. Possible
          fields to expand: "settings", "tax_rates", "opening_hours"', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/LocationResponse'}
          examples:
            data:
              id: c19a6137-9b1b-415c-8f17-4442a2cc6c24
              name: New York Store
              active: true
              address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
              timezone: US/New_york
              phone_number: '+39123123123'
              email: foo@email.it
              settings: null
              tax_rates: null
              opening_hours: null
  /v1/locations.create:
    post:
      tags: [locations]
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: the UUID of the location to create, required: true}
      - name: location
        in: body
        description: The location you want to create. Note that the user creating the location will be automatically associated
          to the location.
        required: true
        schema: {$ref: 'definitions.yml#/definitions/LocationCreation'}
      summary: Creates a location
      description: ''
      operationId: createLocation
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/LocationResponse'}
          examples:
            data:
              id: c19a6137-9b1b-415c-8f17-4442a2cc6c24
              name: New York Store
              active: true
              address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
              timezone: US/New_york
              phone_number: '+39123123123'
              email: foo@email.it
              settings: null
  /v1/locations.deep_copy:
    post:
      tags: [locations]
      parameters:
      - {name: from, in: query, type: string, format: uuid, description: the UUID of the location to copy from, required: true}
      - {name: to, in: query, type: string, format: uuid, description: the UUID of the location to copy to, required: true}
      summary: Copies data from one location to another.
      description: ''
      operationId: deepCopyLocation
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - copying succeeded}
  /v1/locations.delete:
    post:
      tags: [locations]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the locations to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes locations. It ignores non-existing locations or locations that do not belong to the user
      description: Note that this is a soft delete -- no location is actually deleted!
      operationId: deleteLocations
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the locations have been deleted}
  /v1/locations.update_settings:
    post:
      tags: [locations]
      parameters:
      - name: settings
        in: body
        description: The settings to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/LocationSettingsUpdate'}
      summary: It updates location settings.
      description: 'Note that this endpoint supports partial updates: only the field sent will be updated.'
      operationId: updateLocationSettings
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200': {description: OK - location settings have been updated}
  /v1/locations.update:
    post:
      tags: [locations]
      parameters:
      - name: location
        in: body
        description: The location you want to update. Note that the user updating the location will be automatically associated
          to the location.
        required: true
        schema: {$ref: 'definitions.yml#/definitions/LocationUpdate'}
      summary: Updates a location
      description: ''
      operationId: updateLocation
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been update
          schema: {$ref: 'definitions.yml#/definitions/LocationResponse'}
          examples:
            data:
              id: c19a6137-9b1b-415c-8f17-4442a2cc6c24
              name: New York Store
              active: true
              address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
              timezone: US/New_york
              phone_number: '+39123123123'
              email: foo@email.it
              settings: null
              tax_rates: null
  /v1/categories.list:
    get:
      tags: [categories]
      summary: Returns a paginated list of categories for the current merchant.
      description: Subcategories are not provided unless the query parameter expand[]=subcategories is in the URI. The categories
        are returned ordered by category position and name if the position is the same. Note that a main category has always
        active set to null, while a subcategory will always have active defined -- defaulted to true.
      operationId: categoriesList
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: q, in: query, type: string, description: Filter by product names matching the query, required: false}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      - {name: 'expand[]', in: query, type: string, description: 'Comma separated values of the fields to expand. Possible
          fields to expand: ''locations'', ''availabilities'', ''products_count'', ''subcategories''. Note that ''products_count''
          will also be expanded on subcategories if subcategories are enabled.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CategoryListResponse'}
          examples:
            data:
            - {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, name: My Category, description: Some description, avatar_bg_color: null,
              avatar_image_url: null, position: 1, subcategories: null, location_overrides: null, products_count: null}
            object: list
  /v1/categories.update_ordering:
    post:
      tags: [categories]
      parameters:
      - name: ordering
        in: body
        description: The ordering you want to apply to given categories
        required: true
        schema: {$ref: 'definitions.yml#/definitions/EntityOrderingList'}
      summary: Updates the position of a set of category
      description: ''
      operationId: categoriesUpdateOrdering
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content - ordering was applied}
        '400': {description: Bad Request - some category ids do not exist or are not owned by current user}
  /v1/categories.update_products_ordering:
    post:
      tags: [categories]
      parameters:
      - {name: category_id, in: query, type: string, format: uuid, description: the UUID of the category, required: true}
      - name: ordering
        in: body
        description: The ordering you want to apply to given categories
        required: true
        schema: {$ref: 'definitions.yml#/definitions/EntityOrderingList'}
      summary: Updates the position of a set of products in a category
      description: ''
      operationId: updateCategoriesProductsOrdering
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content - ordering was applied}
        '400': {description: Bad Request - some category ids do not exist or are not owned by current user}
  /v1/categories.update_active:
    post:
      tags: [categories]
      parameters:
      - {name: category_id, in: query, type: string, format: uuid, description: the UUID of the category, required: true}
      - name: body
        in: body
        description: An object mapping location ids to the desired boolean active state. Locations not included won't be touched.
        schema: {$ref: 'definitions.yml#/definitions/UpdateActiveLocationList'}
        required: true
      summary: Sets the active flag for the category in the given locations to the given state. Leaves all other locations
        untouched.
      description: ''
      operationId: categories_updateActiveAtLocations
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content - category was enabled in the given locations}
        '400': {description: Bad Request - some location ids do not exist or are not owned by current user}
  /v1/categories.get:
    get:
      tags: [categories]
      summary: Returns a category. NOTE avatar_image_url is not populated as depricated and it will be soon remove. Have a
        look at avatar_image_urls instead.
      description: Subcategories are not provided unless the query parameter expand[]=subcategories is in the URI. Note that
        a main category has always active set to null, while a subcategory will always have active defined -- defaulted to
        true.
      operationId: categoryById
      parameters:
      - {name: category_id, in: query, type: string, format: uuid, description: the UUID of the category, required: true}
      - {name: 'expand[]', in: query, type: string, description: 'Comma separated values of the fields to expand. Possible
          fields to expand: ''locations'', ''availabilities'', ''products_count'', ''subcategories''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CategoryResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, name: My Category, description: Some description, avatar_bg_color: null,
              avatar_image_url: null, position: 1, subcategories: null, location_overrides: null, products_count: null}
            object: category
  /v1/categories.assign_products:
    post:
      tags: [categories]
      summary: Patches a category
      description: ''
      operationId: categoriesPatchById
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: category_id, in: query, type: string, format: uuid, description: the UUID of the category, required: true}
      - name: categoryPatch
        in: body
        description: The category products assignment to apply
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ProductsAssignment'}
      responses:
        '204': {description: OK - No Content}
  /v1/categories.create:
    post:
      tags: [categories]
      parameters:
      - {name: category_id, in: query, type: string, format: uuid, description: the UUID of the category to create, required: true}
      - name: category
        in: body
        description: The category you want to create with optional subcategories and location availabilities
        required: true
        schema: {$ref: 'definitions.yml#/definitions/SystemCategoryCreation'}
      summary: Creates a category.
      description: Note that a main category has always active set to null, while a subcategory will always have active defined
        -- defaulted to true.
      operationId: createCategory
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/CategoryResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: T-shirts
              description: T-shirts
              parent_category_id: 3aef7d02-1380-4ee1-b09e-87f1e36540ec
              position: 1
              active: true
              subcategories: []
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: category
  /v1/categories.update:
    post:
      tags: [categories]
      parameters:
      - {name: category_id, in: query, type: string, format: uuid, description: the UUID of the category, required: true}
      - name: category
        in: body
        description: The category you want to update with optional subcategories and location availabilities
        required: true
        schema: {$ref: 'definitions.yml#/definitions/SystemCategoryUpdate'}
      summary: Updates a category
      description: Note that a main category has always active set to null, while a subcategory will always have active defined
        -- defaulted to true.
      operationId: updateCategory
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/CategoryResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: Penne
              description: 500gr of awesome penne
              parent_category_id: 3aef7d02-1380-4ee1-b09e-87f1e36540ec
              position: 1
              active: true
              subcategories: []
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: category
  /v1/categories.delete:
    post:
      tags: [categories]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the categories to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes categories. It ignores non-existing categories or categories that do not belong to the user
      description: ''
      operationId: deleteCategories
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the categories have been deleted}
  /v1/catalog_categories.list:
    get:
      tags: [catalog_categories]
      summary: Returns a paginated list of catalog categories for the current merchant.
      description: List of catalog categories
      operationId: catalogCategoriesList
      parameters:
      - {name: catalog_id, in: query, type: string, format: uuid, description: Filter by catalog id, required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: q, in: query, type: string, description: Filter by product names matching the query, required: false}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      - {name: 'expand[]', in: query, type: string, description: 'Comma separated values of the fields to expand. Possible
          fields to expand: ''locations'', ''availabilities'', ''products_count'', ''subcategories''. Note that ''products_count''
          will also be expanded on subcategories if subcategories are enabled.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CategoryListResponse'}
          examples:
            data:
            - {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, name: My Catalog category, description: Some description, avatar_bg_color: null,
              avatar_image_url: null, position: 1, subcategories: null, location_overrides: null, products_count: null}
            object: list
  /v1/catalog_categories.update_ordering:
    post:
      tags: [catalog_categories]
      parameters:
      - name: ordering
        in: body
        description: The ordering you want to apply to given catalog categories
        required: true
        schema: {$ref: 'definitions.yml#/definitions/EntityOrderingList'}
      summary: Updates the position of a set of catalog category
      description: ''
      operationId: catalogCategoriesUpdateOrdering
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content - ordering was applied}
        '400': {description: Bad Request - some catalog category ids do not exist or are not owned by current user}
  /v1/catalog_categories.update_products_ordering:
    post:
      tags: [catalog_categories]
      parameters:
      - {name: catalog_category_id, in: query, type: string, format: uuid, description: the UUID of the catalog category,
        required: true}
      - name: ordering
        in: body
        description: The ordering you want to apply to given catalog categories
        required: true
        schema: {$ref: 'definitions.yml#/definitions/EntityOrderingList'}
      summary: Updates the position of a set of products in a catalog category
      description: ''
      operationId: updateCatalogCategoriesProductsOrdering
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content - ordering was applied}
        '400': {description: Bad Request - some catalog category ids do not exist or are not owned by current user}
  /v1/catalog_categories.get:
    get:
      tags: [catalog_categories]
      summary: Returns a catalog category. NOTE avatar_image_url is not populated as depricated and it will be soon remove.
        Have a look at avatar_image_urls instead.
      description: Note that a main catalog category has always active set to null.
      operationId: catalogCategoryById
      parameters:
      - {name: catalog_category_id, in: query, type: string, format: uuid, description: the UUID of the catalog category,
        required: true}
      - {name: 'expand[]', in: query, type: string, description: 'Comma separated values of the fields to expand. Possible
          fields to expand: ''locations'', ''availabilities'', ''products_count'', ''subcategories''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CategoryResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, name: My Catalog category, description: Some description, avatar_bg_color: null,
              avatar_image_url: null, position: 1, subcategories: null, location_overrides: null, products_count: null}
            object: category
  /v1/catalog_categories.assign_products:
    post:
      tags: [catalog_categories]
      summary: Patches a catalog category
      description: ''
      operationId: catalogCategoriesPatchById
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: catalog_category_id, in: query, type: string, format: uuid, description: the UUID of the catalog category,
        required: true}
      - name: catalogCategoryPatch
        in: body
        description: The catalog category products assignments to apply
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CatalogCategoryProductAssignment'}
      responses:
        '204': {description: OK - No Content}
  /v1/catalog_categories.create:
    post:
      tags: [catalog_categories]
      parameters:
      - {name: catalog_category_id, in: query, type: string, format: uuid, description: the UUID of the catalog category to
          create, required: true}
      - name: catalog_category
        in: body
        description: The catalog category you want to create with optional subcatalog categories and location availabilities
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CatalogCategoryCreation'}
      summary: Creates a catalog category.
      description: Note that a main catalog category has always active set to null, while a subcatalog category will always
        have active defined -- defaulted to true.
      operationId: createCatalogCategory
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/CategoryResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: T-shirts
              description: T-shirts
              parent_category_id: 3aef7d02-1380-4ee1-b09e-87f1e36540ec
              position: 1
              active: true
              subcategories: []
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: category
  /v1/catalog_categories.update:
    post:
      tags: [catalog_categories]
      parameters:
      - {name: catalog_category_id, in: query, type: string, format: uuid, description: the UUID of the catalog category,
        required: true}
      - name: catalog_category
        in: body
        description: The catalog category you want to update with availabilities
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CatalogCategoryUpdate'}
      summary: Updates a catalog category
      description: Note that a main catalog category has always active set to null.
      operationId: updateCatalogCategory
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/CategoryResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: Penne
              description: 500gr of awesome penne
              parent_category_id: 3aef7d02-1380-4ee1-b09e-87f1e36540ec
              position: 1
              active: true
              subcategories: []
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: category
  /v1/catalog_categories.delete:
    post:
      tags: [catalog_categories]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the catalog categories to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes catalog categories. It ignores non-existing catalog categories or catalog categories that do not
        belong to the user
      description: ''
      operationId: deleteCatalogCategories
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the catalog categories have been deleted}
  /v1/brands.list:
    get:
      tags: [brands]
      summary: Returns a paginated list of brands for the current merchant
      operationId: brandsList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/BrandListResponse'}
          examples:
            data:
            - {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, name: My Brand}
            object: list
  /v1/brands.create:
    post:
      tags: [brands]
      parameters:
      - {name: brand_id, in: query, type: string, format: uuid, description: the UUID of the brand to create, required: true}
      - name: brand
        in: body
        description: The brand you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/BrandCreation'}
      summary: Creates a brand
      description: ''
      operationId: createBrand
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/BrandResponse'}
          examples:
            data: {id: c09a6137-9b1b-415c-8f17-4442a2cc6c24, name: Armany}
            object: brand
  /v1/brands.update:
    put:
      tags: [brands]
      parameters:
      - {name: brand_id, in: query, type: string, format: uuid, description: the UUID of the brand to update, required: true}
      - name: brand
        in: body
        description: The brand you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/BrandUpdate'}
      summary: Updates a brand
      description: ''
      operationId: updateBrand
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200': {description: OK - entity has been updated}
  /v1/catalogs.get:
    get:
      tags: [catalogs]
      parameters:
      - {name: catalog_id, in: query, type: string, format: uuid, description: the catalog id to retrieve, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''products_count'', ''categories_count''.'}
      summary: Returns a catalog by id
      operationId: catalogsGet
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/Catalog'}
  /v1/catalogs.list:
    get:
      tags: [catalogs]
      parameters:
      - {name: 'id[]', in: query, type: string, format: uuid, description: Filter by ids (a comma separated
          list), required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''products_count'', ''categories_count''.'}
      summary: Returns a paginated list of catalogs for the current merchant
      operationId: catalogsList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CatalogListResponse'}
          examples:
            data:
            - {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, name: My Catalog}
            object: list
  /v1/catalogs.create:
    post:
      tags: [catalogs]
      parameters:
      - {name: catalog_id, in: query, type: string, format: uuid, description: the UUID of the catalog to create, required: true}
      - name: catalog
        in: body
        description: The catalog you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CatalogCreation'}
      summary: Creates a catalog
      description: ''
      operationId: createCatalog
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/CatalogResponse'}
          examples:
            data: {id: c09a6137-9b1b-415c-8f17-4442a2cc6c24, name: Armany}
            object: catalog
  /v1/catalogs.update:
    put:
      tags: [catalogs]
      parameters:
      - {name: catalog_id, in: query, type: string, format: uuid, description: the UUID of the catalog to update, required: true}
      - name: catalog
        in: body
        description: The catalog you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CatalogUpdate'}
      summary: Updates a catalog
      description: ''
      operationId: updateCatalog
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200': {description: OK - entity has been updated}
  /v1/catalogs.delete:
    post:
      tags: [catalogs]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the catalogs to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: 'Bulk deletes catalog. It ignores non-existing catalogs or catalogs that do not belong to the user.
                If a catalog is associated to a store, it rejects the request.'
      description: ''
      operationId: deleteCatalogs
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the catalogs have been deleted}
  /v1/suppliers.get:
    get:
      tags: [suppliers]
      parameters:
      - {name: supplier_id, in: query, type: string, format: uuid, description: the supplier id to retrieve, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): "locations", "products_count", "stock_values".', required: false}
      summary: Returns a supplier by id
      operationId: suppliersGet
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/Supplier'}
  /v1/suppliers.list:
    get:
      tags: [suppliers]
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'location_id[]', in: query, type: string, format: uuid, description: Filter by location ids (a comma separated
          list), required: false}
      - {name: category_id, in: query, type: string, format: uuid, description: Filter by category id, required: false}
      - {name: 'category_id[]', in: query, type: string, format: uuid, description: Filter by category ids (a comma separated
          list), required: false}
      - {name: q, in: query, type: string, description: Filter by supplier names matching the query, required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): "locations", "products_count", "stock_values".', required: false}
      summary: Returns a paginated list of suppliers for the current merchant
      operationId: suppliersList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/SupplierListResponse'}
          examples:
            data:
            - {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, name: My Supplier, phone_number: null, secondary_address: null, notes: null,
              secondary_phone_number: null, contact: null, account_number: null, products_count: null, address: null, stock_value: null,
              email: null, location_overrides: null}
            object: list
  /v1/suppliers.create:
    put:
      tags: [suppliers]
      parameters:
      - {name: supplier_id, in: query, type: string, format: uuid, description: the UUID of the supplier to create, required: true}
      - name: supplier
        in: body
        description: The supplier you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/SupplierCreation'}
      summary: Creates a supplier
      description: ''
      operationId: createSupplier
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/SupplierResponse'}
          examples:
            data: {id: c09a6137-9b1b-415c-8f17-4442a2cc6c24, name: Supreme Suppliers inc}
            object: supplier
  /v1/suppliers.update:
    put:
      tags: [suppliers]
      parameters:
      - {name: supplier_id, in: query, type: string, format: uuid, description: the UUID of the supplier to update, required: true}
      - name: supplier
        in: body
        description: The fields of the suppliers to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/SupplierUpdate'}
      summary: Updates a supplier.
      description: 'Note that this endpoint supports partial updates: only the fields sent will be changed, the others will
        remain untouched.'
      operationId: updateSupplier
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/SupplierResponse'}
          examples:
            data: {id: c09a6137-9b1b-415c-8f17-4442a2cc6c24, name: Supreme Suppliers inc}
            object: supplier
  /v1/suppliers.delete:
    delete:
      tags: [suppliers]
      parameters:
      - {name: supplier_id, in: query, type: string, format: uuid, description: The id of the supplier to delete., required: true}
      summary: Deletes a supplier. It ignores a non-existing supplier or a supplier that do not belong to the user
      description: ''
      operationId: deleteSupplier
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the supplier has been deleted}
  /v1/suppliers.update_active:
    post:
      tags: [suppliers]
      parameters:
      - {name: supplier_id, in: query, type: string, format: uuid, description: the UUID of the supplier, required: true}
      - name: body
        in: body
        description: An object mapping location ids to the desired boolean active state. Locations not included won't be touched.
        schema: {$ref: 'definitions.yml#/definitions/UpdateActiveLocationList'}
        required: true
      summary: Sets the active flag for the supplier in the given locations to the given state. Leaves all other locations
        untouched.
      description: ''
      operationId: suppliers_updateActiveAtLocations
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content - supplier was enabled in the given locations}
        '400': {description: Bad Request - some location ids do not exist or are not owned by current user}
  /v1/tax_rates.create:
    post:
      tags: [tax_rates]
      parameters:
      - {name: tax_rate_id, in: query, type: string, format: uuid, description: the UUID of the tax rate to create, required: true}
      - name: tax_rate
        in: body
        description: The tax rate you want to create. The id will be generated by the backend.
        required: true
        schema: {$ref: 'definitions.yml#/definitions/TaxRateCreation'}
      summary: Creates a tax_rate
      description: ''
      operationId: createtax_rate
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/TaxRateResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, name: My Tax Rate, value: 10.56, apply_to_price: false, locations: null}
            object: tax_rate
  /v1/tax_rates.list:
    get:
      tags: [tax_rates]
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'location_id[]', in: query, type: string, format: uuid, description: Filter by location ids (a comma separated
          list), required: false}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''locations''.', required: false}
      summary: Returns a paginated list of tax rates for the current merchant
      operationId: taxRatesList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/TaxRateListResponse'}
          examples:
            data:
            - {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, name: My Tax Rate, value: 10.56, apply_to_price: false, location_overrides: null}
            object: list
  /v1/tax_rates.update:
    post:
      tags: [tax_rates]
      parameters:
      - {name: tax_rate_id, in: query, type: string, format: uuid, description: The id of the tax rate to update., required: true}
      - name: tax_rate
        in: body
        description: The tax_rate you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/TaxRateUpdate'}
      summary: 'Updates a tax rate. Note that this endpoint supports partial updates: only the fields sent will be changed,
        the others will remain untouched.'
      description: ''
      operationId: updateTaxRate
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/TaxRateResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, name: My Tax Rate, value: 10.56, apply_to_price: false, locations: null}
            object: tax_rate
  /v1/tax_rates.delete:
    delete:
      tags: [tax_rates]
      parameters:
      - {name: tax_rate_id, in: query, type: string, format: uuid, description: The id of the tax_rate to delete., required: true}
      summary: Deletes a tax_rate. It ignores a non-existing tax_rate or a tax_rate that do not belong to the user
      description: ''
      operationId: deletetax_rate
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the tax_rate has been deleted}
  /v1/tax_rates.update_active:
    post:
      tags: [tax_rates]
      parameters:
      - {name: tax_rate_id, in: query, type: string, format: uuid, description: the UUID of the tax rate, required: true}
      - name: body
        in: body
        description: An object mapping location ids to the desired boolean active state. Locations not included won't be touched.
        schema: {$ref: 'definitions.yml#/definitions/UpdateActiveLocationList'}
        required: true
      summary: Sets the active flag for the tax_rate in the given locations to the given state. Leaves all other locations
        untouched.
      description: ''
      operationId: taxrates_updateActiveAtLocations
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content - tax rate was enabled in the given locations}
        '400': {description: Bad Request - some location ids do not exist or are not owned by current user}
  /v1/loyalty_rewards.assign_products:
    post:
      tags: [loyalty]
      summary: Patches a loyalty reward
      description: ''
      operationId: loyaltyRewardsAssignProducts
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: loyalty_reward_id, in: query, type: string, format: uuid, description: the UUID of the loyalty reward, required: true}
      - name: body
        in: body
        description: The ids of the articles with scope product and type simple, template, variant to apply to the loyalty
          reward.
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ProductsAssignment'}
      responses:
        '204': {description: OK - No Content}
  /v1/loyalty_rewards.list_products:
    get:
      tags: [loyalty]
      summary: Returns a paginated list of loyalty reward products for the current merchant
      operationId: loyaltyRewardProductssList
      parameters:
      - {name: loyalty_reward_id, in: query, type: string, format: uuid, description: the UUID of the loyalty reward id, required: true}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/IdListResponse'}
  /v1/loyalty_rewards.reserve:
    post:
      tags: [loyalty]
      parameters:
      - {name: reward_redemption_id, in: query, type: string, format: uuid, description: the UUID of the reward redemption
          to create, required: true}
      - name: reward_redemption
        in: body
        description: The reward redemption you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/RewardRedemptionCreation'}
      summary: Creates a reward redemption
      description: ''
      operationId: redeemRewardRedemption
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/RewardRedemptionResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, loyalty_reward_id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, loyalty_membership_id: c19a6137-9b1b-415c-8f17-4442a2cc6c24,
              status: redeemed}
            object: reward_redemption
  /v1/loyalty_rewards.cancel:
    post:
      tags: [loyalty]
      parameters:
      - name: ids
        in: body
        description: the UUID of the reward redemption to cancel
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Cancels a reward redemption
      description: ''
      operationId: cancelRewardRedemption
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/RewardRedemptionListResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, loyalty_reward_id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, loyalty_membership_id: c19a6137-9b1b-415c-8f17-4442a2cc6c24,
              status: redeemed}
            object: reward_redemption
  /v1/loyalty_programs.list:
    get:
      tags: [loyalty]
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filters the users by location id, required: false}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''locations''.'}
      summary: Returns a list of loyalty programs for the current merchant
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/LoyaltyProgramListResponse'}
          examples:
            data:
            - {id: 9282f866-61d2-3881-bcb2-199c06123764, name: Loyalty Program VIP, spend_amount_for_points: null, signup_reward_points: null,
              signup_reward_enabled: null, points: null, reward_gift_card: null, reward_type: null, type: null, reward_discount: null,
              location_overrides: null}
            object: list
  /v1/loyalty_programs.create:
    post:
      tags: [loyalty]
      parameters:
      - {name: loyalty_program_id, in: query, type: string, format: uuid, description: the UUID of the loyalty program to
          create, required: true}
      - name: loyalty_program
        in: body
        description: The loyalty program you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/LoyaltyProgramCreation'}
      summary: Creates a loyalty program
      description: ''
      operationId: createLoyaltyProgram
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/LoyaltyProgramResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, title: Loyalty_program 1, type: percentage, amount: '30.00',
              require_manager_approval: true, location_overrides: null}
            object: loyalty_program
  /v1/loyalty_programs.update:
    post:
      tags: [loyalty]
      parameters:
      - {name: loyalty_program_id, in: query, type: string, format: uuid, description: the UUID of the loyalty program}
      - name: loyalty_program
        in: body
        description: The loyalty program you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/LoyaltyProgramUpdate'}
      summary: Updates a loyalty program
      description: 'This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched.'
      operationId: updateLoyaltyProgram
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/LoyaltyProgramResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, title: Loyalty_program 1, type: percentage, amount: '30.00',
              require_manager_approval: true, location_overrides: null}
            object: loyalty_program
  /v1/modifier_sets.list:
    get:
      tags: [modifier_sets]
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'location_id[]', in: query, type: string, format: uuid, description: Filter by location ids (a comma separated
          list), required: false}
      - {name: q, in: query, type: string, description: Filter by modifier set names matching the query, required: false}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''products_count'', ''locations''.', required: false}
      summary: Returns a paginated list of modifier sets for the current merchant
      operationId: modifierSetsList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ModifierSetListResponse'}
          examples:
            data:
            - id: 9282f866-61d2-3881-bcb2-199c06123764
              type: addon
              name: Modifier Set 1
              single_choice: false
              force: false
              location_overrides: null
              products_count: nul
              options:
              - id: dd8f72b5-de66-4a5b-8dc3-ac1e43c8702b
                name: Option 1
                position: 1
                active: true
                price: {amount: '2.31', currency: USD}
            object: list
  /v1/modifier_sets.get:
    get:
      tags: [modifier_sets]
      parameters:
      - {name: modifier_set_id, in: query, type: string, format: uuid, description: the UUID of the modifier set, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''products_count'', ''locations''.', required: false}
      summary: Returns a modifier set
      operationId: modifierSetById
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '404': {description: Not found}
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ModifierSetResponse'}
          examples:
            data:
              id: 9282f866-61d2-3881-bcb2-199c06123764
              type: addon
              name: Modifier Set 1
              single_choice: false
              force: false
              location_overrides: null
              products_count: nul
              options:
              - id: dd8f72b5-de66-4a5b-8dc3-ac1e43c8702b
                name: Option 1
                position: 1
                active: true
                price: {amount: '2.31', currency: USD}
            object: modifier_set
  /v1/modifier_sets.create:
    post:
      tags: [modifier_sets]
      parameters:
      - {name: modifier_set_id, in: query, type: string, format: uuid, description: the UUID of the modifier set, required: true}
      - name: modifier_set
        in: body
        description: The modifierset you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ModifierSetCreation'}
      summary: Creates a modifier set
      description: ''
      operationId: createModifierSet
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ModifierSetResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: Supreme Modifier_sets inc
              location_overrides: []
              options: []
            object: modifier_set
  /v1/modifier_sets.update:
    post:
      tags: [modifier_sets]
      parameters:
      - {name: modifier_set_id, in: query, type: string, format: uuid, description: the UUID of the modifier set, required: true}
      - name: modifier_set
        in: body
        description: The modifier set you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ModifierSetUpdate'}
      summary: Updates a modifier set
      description: ''
      operationId: UpdateModifierSet
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/ModifierSetResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: Supreme Modifier_sets inc
              location_overrides: []
              options: []
            object: modifier_set
  /v1/loyalty_memberships.send_welcome_email:
    post:
      tags: [loyalty]
      summary: Sends welcome email
      description: ''
      operationId: loyaltyMembershipSendWelcomeEmail
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: loyalty_membership_id, in: query, type: string, format: uuid, description: the UUID of the loyalty_membership, required: true}
      responses:
        '204': {description: OK - No Content}
  /v1/modifier_sets.assign_products:
    post:
      tags: [modifier_sets]
      summary: Assigns products to a modifier set
      description: ''
      operationId: modifierSetAssignProducts
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: modifier_set_id, in: query, type: string, format: uuid, description: the UUID of the modifier set, required: true}
      - name: modifierSetProductsAssignment
        in: body
        description: The modifier set patch to apply
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ModifierSetProductsAssignment'}
      responses:
        '204': {description: OK - No Content}
  /v1/modifier_sets.delete:
    post:
      tags: [modifier_sets]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the modifier sets to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes modifier sets. It ignores non-existing modifier sets or modifier sets that do not belong to the
        user
      description: ''
      operationId: deleteModifierSets
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the modifier sets have been deleted}
  /v1/modifier_sets.update_active:
    post:
      tags: [modifier_sets]
      parameters:
      - {name: modifier_set_id, in: query, type: string, format: uuid, description: the UUID of the modifier set, required: true}
      - name: body
        in: body
        description: An object mapping location ids to the desired boolean active state. Locations not included won't be touched.
        schema: {$ref: 'definitions.yml#/definitions/UpdateActiveLocationList'}
        required: true
      summary: Sets the active flag for the modifier set in the given locations to the given state. Leaves all other locations
        untouched.
      description: ''
      operationId: modifierSets_updateActiveAtLocations
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content - modifier set was enabled in the given locations}
        '400': {description: Bad Request - some location ids do not exist or are not owned by current user}
  /v1/stocks.list:
    get:
      tags: [stocks]
      parameters:
      - {name: product_id, type: string, format: uuid, in: query, description: The product id of which you want to retrieve
          the stocks for each variant/location pair, required: false}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'location_id[]', in: query, type: string, format: uuid, description: Filter by location ids (a comma separated
          list), required: false}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
                is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
                ''2011-12-03T10:15:30+02:00''', required: false}
      summary: Returns a paginated list of stocks for the given product.
      description: If the product id is a main product, it returns all stocks for all variant/location pairs. If the product
        id is a variant, it returns all stocks for all locations that variant is present in.
      operationId: getStocks
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - all entities have been upserted
          schema: {$ref: 'definitions.yml#/definitions/StockListResponse'}
          examples:
            data:
            - {id: c09a6137-9b1b-415c-8f17-4442a2cc6c24, location_id: c09a6137-9b1b-415c-8f17-4442a2cc6c24, product_id: c09a6137-9b1b-415c-8f17-4442a2cc6c24,
              quantity: 10.3, minimum_on_hand: 12.1, reorder_amount: 9.7, sell_out_of_stock: true}
            object: list
        '404': {description: NotFound - the product doesn't belong to the current user}
  /v1/stocks.bulk_create:
    post:
      tags: [stocks]
      parameters:
      - name: stocks
        in: body
        description: The list of stocks you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/StockCreationList'}
      summary: Creates all variant/location pairs for a main product
      description: ''
      operationId: batchCreateStocks
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - all entities have been created
          schema: {$ref: 'definitions.yml#/definitions/StockListResponse'}
          examples:
            data:
            - {id: c09a6137-9b1b-415c-8f17-4442a2cc6c24, location_id: c09a6137-9b1b-415c-8f17-4442a2cc6c24, product_id: c09a6137-9b1b-415c-8f17-4442a2cc6c24,
              quantiy: 10.3, minimum_on_hand: 12.1, reorder_amount: 9.7, sell_out_of_stock: true}
            object: list
  /v1/stocks.bulk_update:
    post:
      tags: [stocks]
      parameters:
      - name: stocks
        in: body
        description: The list of stocks you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/StockUpdateList'}
      summary: Updates all variant/location pairs for a main product
      description: ''
      operationId: batchUpdateStocks
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - all entities have been updated
          schema: {$ref: 'definitions.yml#/definitions/StockListResponse'}
          examples:
            data:
            - {id: c09a6137-9b1b-415c-8f17-4442a2cc6c24, location_id: c09a6137-9b1b-415c-8f17-4442a2cc6c24, product_id: c09a6137-9b1b-415c-8f17-4442a2cc6c24,
              quantiy: 10.3, minimum_on_hand: 12.1, reorder_amount: 9.7, sell_out_of_stock: true}
            object: list
  /v1/discounts.list:
    get:
      tags: [discounts]
      summary: Returns a paginated list of discounts for the current merchant
      description: ''
      operationId: discountsList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'location_id[]', in: query, type: string, format: uuid, description: Filter by location ids (a comma separated
          list), required: false}
      - {name: q, in: query, type: string, description: Filter by discount title matching the text provided in the param,
        required: false}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''locations'',''availabilities''.', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/DiscountListResponse'}
          examples:
            data:
            - {id: c09a6137-9b1b-415c-8f17-4442a2cc6c24, title: Christmas Discount, type: fixed_amount, amount: '2.99', currency: USD,
              require_manager_approval: false, location_overrides: null, availability_hours: null}
            object: list
  /v1/discounts.get:
    get:
      tags: [discounts]
      summary: Returns a discount
      description: Returns a discount by id
      operationId: discountById
      parameters:
      - {name: discount_id, in: query, type: string, format: uuid, description: the UUID of the discount, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''locations'', ''availabilities''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/DiscountResponse'}
          examples:
            data:
              id: c19a6137-9b1b-415c-8f17-4442a2cc6c24
              title: Discount 1
              type: percentage
              amount: '30.00'
              currency: USD
              require_manager_approval: true
              location_overrides: []
              availability_hours: null
            object: discount
  /v1/discounts.create:
    post:
      tags: [discounts]
      parameters:
      - {name: discount_id, in: query, type: string, format: uuid, description: the UUID of the discount to create, required: true}
      - name: discount
        in: body
        description: The discount you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/DiscountCreation'}
      summary: Creates a discount
      description: ''
      operationId: createDiscount
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/DiscountResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, title: Discount 1, type: percentage, amount: '30.00', require_manager_approval: true,
              location_overrides: null}
            object: discount
  /v1/discounts.update:
    post:
      tags: [discounts]
      parameters:
      - {name: discount_id, in: query, type: string, format: uuid, description: the UUID of the discount}
      - name: discount
        in: body
        description: The discount you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/DiscountUpdate'}
      summary: Updates a discount
      description: 'This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched.'
      operationId: updateDiscount
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/DiscountResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, title: Discount 1, type: percentage, amount: '30.00', require_manager_approval: true,
              location_overrides: null}
            object: discount
  /v1/discounts.delete:
    post:
      tags: [discounts]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the discounts to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes discounts. It ignores non-existing discounts or discounts that do not belong to the user
      description: ''
      operationId: deleteDiscounts
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the discounts have been deleted}
  /v1/discounts.update_active:
    post:
      tags: [discounts]
      parameters:
      - {name: discount_id, in: query, type: string, format: uuid, description: the UUID of the discount, required: true}
      - name: body
        in: body
        description: An object mapping location ids to the desired boolean active state. Locations not included won't be touched.
        schema: {$ref: 'definitions.yml#/definitions/UpdateActiveLocationList'}
        required: true
      summary: Sets the active flag for the discount in the given locations to the given state. Leaves all other locations
        untouched.
      description: ''
      operationId: discounts_updateActiveAtLocations
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content - discount was enabled in the given locations}
        '400': {description: Bad Request - some location ids do not exist or are not owned by current user}
  /v1/imports.get:
    get:
      tags: [imports]
      summary: Returns an import
      description: 'Returns a import by id. Import summary and validation errors are generic json objects. A (validation/import)
        status can have the following values: ''not_started'', ''in_progress'', ''failed'', ''successful'''
      operationId: importById
      parameters:
      - {name: import_id, in: query, type: string, format: uuid, description: the UUID of the import, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ImportResponse'}
          examples:
            data:
              id: c19a6137-9b1b-415c-8f17-4442a2cc6c24
              type: product
              validation_status: successful
              import_status: not_started
              validation_errors: null
              location_id: abca6137-9b1b-415c-8f17-4442a2cc6c24
              delete_existing: true
              import_summary: {a: test}
              created_at: '2016-04-19T15:43:39Z'
              updated_at: '2016-04-20T11:52:45Z'
            object: import
  /v1/products.import:
    post:
      tags: [product_imports]
      summary: Triggers a job in the background to validate and import a csv file to import products
      description: This is a multipart/form data request
      operationId: productsImport
      parameters:
      - {name: import_id, in: query, type: string, format: uuid, description: the UUID of the import, required: true}
      - {name: csv, in: formData, type: string, description: the CSV file to validate and import, required: true}
      - {name: 'location_id[]', in: query, type: string, description: a sequence of valid location ids comma separated., required: true}
      - {name: delete_existing, in: query, type: boolean, description: 'By default it''s false. If true, it indicates if we
          want to delete existing products before importing the data. Note that products with same upc/name will be updated',
        required: false}
      - {name: dry_run, in: query, type: boolean, description: 'if true, it only validates the data without uploading it',
        required: false}
      consumes: [multipart/form-data]
      produces: [text/plain]
      security:
      - bearer: []
      responses:
        '201': {description: 'Created. Pull of on GET /imports.get?import_id=<id> for the progress of the background process'}
  /v1/image_uploads.create:
    post:
      tags: [image_uploads]
      summary: Uploads several sizes of an image in the background. This endpoint is deprecated, use /v2/image_uploads.create instead.
      description: This is a multipart/form data request.
      operationId: uploadImageCreate
      parameters:
      - {name: image_upload_id, in: query, type: string, format: uuid, description: the UUID of the image upload to create,
        required: true}
      - name: type
        in: query
        type: string
        enum: [category, product, email_receipt, print_receipt, user, gift_card]
        description: the type of the image to upload
        required: true
      - name: img
        in: body
        description: the image to upload
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ImageUploadUpsertionV1'}
      consumes: [multiform/data]
      produces: [text/plain]
      security:
      - bearer: []
      responses:
        '201': {description: Created. The data will be updated to s3 in the background. Check image_uploads.get for the progress}
  /v1/image_uploads.get:
    get:
      tags: [image_uploads]
      parameters:
      - {name: image_upload_id, in: query, type: string, format: uuid, description: The id of the image upload to retrieve,
        required: true}
      summary: Returns an image upload by id
      operationId: imageUploadById
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ImageUploadResponse'}
          examples:
            data: {id: 59417ae1-bd95-3195-8c26-170227ea235a, urls: null, file_name: Lena-Soderberg.jpg, object_id: null, object_type: product}
            object: image_upload
  /v1/orders.list:
    get:
      tags: [orders]
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: customer_id, in: query, type: string, format: uuid, description: Filter by customer id, required: false}
      - {name: table_id, in: query, type: string, format: uuid, description: Filter by table id, required: false}
      - name: is_open
        in: query
        type: boolean
        description: Filter by status. Overrides the status[] param.
        required: false
      - name: status[]
        in: query
        type: string
        enum: [bar_complete, canceled, completed, delivered, en_route, in_bar, in_kitchen, in_progress, kitchen_complete, picked_up, ready, received]
        description: Filter by status
        required: false
      - name: payment_type
        in: query
        type: string
        enum: [cash, credit_card, debit_card, check, gift_card]
        description: Filter by payment_type
        required: false
      - name: view
        in: query
        type: string
        enum: [active, completed, canceled, pending]
        description: Filter by view
        required: false
      - name: source
        in: query
        type: string
        enum: [storefront, register, delivery_provider]
        description: Filter by source
        required: false
      - name: source[]
        in: query
        type: string
        enum: [storefront, register, delivery_provider]
        description: Filter by sources
        required: false
      - name: delivery_provider
        in: query
        type: string
        enum: [uber_eats, door_dash, postmates]
        description: Filter by delivery provider
        required: false
      - name: delivery_provider[]
        in: query
        type: string
        enum: [uber_eats, door_dash, postmates]
        description: Filter by delivery providers
        required: false
      - name: acceptance_status
        in: query
        type: string
        enum: [pending, accepted, rejected]
        description: Filter by acceptance status
        required: false
      - name: payment_status
        in: query
        type: string
        enum: [pending, paid, partially_paid, partially_refunded, refunded, voided]
        description: Filter by payment status
        required: false
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the order location. Example of a valid
          format: ''2011-12-03T10:15:30''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the order location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: false}
      - {name: q, in: query, type: string, description: Search orders by order number and/or customer name and/or last digits
          of card, required: false}
      - {name: invoice, in: query, type: boolean, description: 'By default set to false. When true it returns orders that
          are invoices. When false, it returns orders that are NOT invoices.', required: false}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''gift_card_passes'', ''payment_transactions'', ''sales_summary'', ''type_summary'', ''tickets''.',
        required: false}
      - {name: page, in: query, type: number, description: 'Page number', required: false}
      summary: Returns a paginated list of orders for the current merchant. Note that order_items are never expanded
      operationId: ordersList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/OrderListResponse'}
          examples:
            data:
            - id: 59417ae1-bd95-3195-8c26-170227ea235a
              location:
                id: 882f2575-fdc5-3eca-bcbe-3de694dffae1
                name: New York Store
                active: true
                address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
                timezone: US/New_york
              device_id: null
              creator_user_id: 13eede8d-c07a-307e-bfd6-6be95d897eaf
              customer:
                id: 2020c39f-e609-3b67-9eae-0220682d0df5
                name: Customer Name 9
                email: customer9@customer.com
                address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
                created_at: '2016-05-02T10:03:19Z'
                updated_at: '2016-05-02T10:03:19Z'
              number: '1001010'
              source: store
              type: collection
              payment_type: cash
              total: {amount: '12.34', currency: USD}
              subtotal: {amount: '11.34', currency: USD}
              discount: {amount: '1.00', currency: USD}
              tax: {amount: '2.34', currency: USD}
              tip: {amount: '0.01', currency: USD}
              customer_notes:
              - {body: This product is awesome!, created_at: '2016-05-02T10:03:19.415Z'}
              merchant_notes:
              - {user_id: 13eede8d-c07a-307e-bfd6-6be95d897eaf, body: 'Smelly cheap customer, gave me a tip of 0.01!', created_at: '2016-05-02T10:03:19.415Z'}
              payment_status: paid
              status: completed
              is_invoice: false
              fulfillment_status: canceled
              kitchen_status: null
              status_transitions:
              - {status: pending, created_at: '2016-05-02T10:03:19Z'}
              payment_transactions: null
              items: null
              assigned_users: []
              received_at: '2016-05-02T10:03:19Z'
              completed_at: '2016-05-02T10:03:19Z'
              created_at: '2016-05-02T10:03:19Z'
              updated_at: '2016-05-02T10:03:19Z'
            object: list
  /v1/orders.get:
    get:
      tags: [orders]
      parameters:
      - {name: order_id, in: query, type: string, format: uuid, description: The id of the order to retrieve. Note that order_items are always expanded., required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values (multiple comma-separated values are ok): ''gift_card_passes'', ''payment_transactions'', ''tickets''.', required: false}
      - {name: delivery_provider, in: query, type: string, description: The delivery provider of the order to retrieve. Required when passing delivery_provider_id.}
      - {name: delivery_provider_id, in: query, type: string, description: The delivery provider id of the order to retrieve. Required when passing delivery_provider_id.}
      summary: Returns an order by id
      operationId: orderById
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/OrderResponse'}
          examples:
            data:
              id: 59417ae1-bd95-3195-8c26-170227ea235a
              location:
                id: 882f2575-fdc5-3eca-bcbe-3de694dffae1
                name: New York Store
                active: true
                address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
                timezone: US/New_york
              device_id: null
              creator_user_id: 13eede8d-c07a-307e-bfd6-6be95d897eaf
              customer:
                id: 2020c39f-e609-3b67-9eae-0220682d0df5
                name: Customer Name 9
                email: customer9@customer.com
                address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
                created_at: '2016-05-02T10:03:19Z'
                updated_at: '2016-05-02T10:03:19Z'
              number: '1001010'
              source: store
              type: collection
              payment_type: cash
              total: {amount: '12.34', currency: USD}
              subtotal: {amount: '11.34', currency: USD}
              discount: {amount: '1.00', currency: USD}
              tax: {amount: '2.34', currency: USD}
              tip: {amount: '0.01', currency: USD}
              customer_notes:
              - {body: This product is awesome!, created_at: '2016-05-02T10:03:19.415Z'}
              merchant_notes:
              - {user_id: 13eede8d-c07a-307e-bfd6-6be95d897eaf, body: 'Smelly cheap customer, gave me a tip of 0.01!', created_at: '2016-05-02T10:03:19.415Z'}
              payment_status: paid
              status: completed
              is_invoice: false
              fulfillment_status: canceled
              kitchen_status: null
              status_transitions:
              - {status: pending, created_at: '2016-05-02T10:03:19Z'}
              payment_transactions: null
              items: []
              assigned_users: []
              received_at: '2016-05-02T10:03:19Z'
              completed_at: '2016-05-02T10:03:19Z'
              created_at: '2016-05-02T10:03:19Z'
              updated_at: '2016-05-02T10:03:19Z'
            object: order
  /v1/orders.send_receipt:
    post:
      tags: [orders]
      summary: Enqueues a request to send an order receipt to the given email.
      operationId: ordersSendReceipt
      parameters:
      - {name: order_id, in: query, type: string, format: uuid, description: the UUID of the order, required: true}
      - name: body
        in: body
        description: the recipient for the order receipt
        required: true
        schema: {$ref: 'definitions.yml#/definitions/SendReceiptData'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content. The request has been processed.}
        '400': {description: Bad request. The email is invalid or payment_transaction_id was given but it's invalid or no
            payment transactions are available.}
        '404': {description: Not Found. The order does not exist or is not accessible by the current user.}
  /v1/orders.store_payment_transaction:
    post:
      tags: [orders]
      summary: Enqueues a request to store an order payment transaction and potentially autocomplete the order.
      operationId: storePaymentTransaction
      parameters:
      - {name: order_id, in: query, type: string, format: uuid, description: the UUID of the order, required: true}
      - name: body
        in: body
        description: the transaction for the order
        required: true
        schema: {$ref: 'definitions.yml#/definitions/OrderService.PaymentTransactionUpsertion'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content. The request has been processed.}
        '400': {description: Bad request. Transaction is not approved or the type is something other than payment or the amount does not equal the order total amount.}
        '404': {description: Not Found. The order does not exist or is not accessible by the current user.}
  /v1/orders.accept:
    post:
      tags: [orders]
      parameters:
      - {name: order_id, in: query, type: string, format: uuid, description: The id of the order to retrieve. Note that order_items
          are always expanded., required: true}
      - in: body
        name: body
        required: false
        schema: {$ref: 'definitions.yml#/definitions/OrderAcception'}
      summary: Sets an online as accepted.
      description: ''
      operationId: acceptOrder
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/OrderResponse'}
        '400': {description: Bad request. The order is not an online order or its status was set to rejected and can't be set to accepted.}
  /v1/orders.reject:
    post:
      tags: [orders]
      parameters:
      - {name: order_id, in: query, type: string, format: uuid, description: The id of the order to retrieve. Note that order_items
          are always expanded., required: true}
      - in: body
        name: body
        required: false
        schema: {$ref: 'definitions.yml#/definitions/OrderRejection'}
      summary: Sets an online as rejected.
      description: ''
      operationId: rejectOrder
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/OrderResponse'}
        '400': {description: Bad request. The order is not an online order or its status was set to accepted and can't be set to rejected.}
  /v1/orders.sync:
    post:
      tags: [orders]
      parameters:
      - {name: order_id, in: query, type: string, format: uuid, description: The id of the order to retrieve. Note that order_items
          are always expanded., required: true}
      - name: body
        in: body
        description: The order you want to create or update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/OrderUpsertion'}
      summary: Syncs an order by id
      operationId: syncById
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/OrderResponse'}
          examples:
            data:
              id: 59417ae1-bd95-3195-8c26-170227ea235a
              location:
                id: 882f2575-fdc5-3eca-bcbe-3de694dffae1
                name: New York Store
                active: true
                address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
                timezone: US/New_york
              device_id: null
              user_id: 13eede8d-c07a-307e-bfd6-6be95d897eaf
              customer:
                id: 2020c39f-e609-3b67-9eae-0220682d0df5
                name: Customer Name 9
                email: customer9@customer.com
                address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
                created_at: '2016-05-02T10:03:19Z'
                updated_at: '2016-05-02T10:03:19Z'
              number: '1001010'
              source: store
              type: collection
              payment_type: cash
              total: {amount: '12.34', currency: USD}
              subtotal: {amount: '11.34', currency: USD}
              discount: {amount: '1.00', currency: USD}
              tax: {amount: '2.34', currency: USD}
              tip: {amount: '0.01', currency: USD}
              customer_notes:
              - {body: This product is awesome!, created_at: '2016-05-02T10:03:19.415Z'}
              merchant_notes:
              - {user_id: 13eede8d-c07a-307e-bfd6-6be95d897eaf, body: 'Smelly cheap customer, gave me a tip of 0.01!', created_at: '2016-05-02T10:03:19.415Z'}
              payment_status: paid
              status: completed
              is_invoice: false
              fulfillment_status: canceled
              kitchen_status: null
              status_transitions:
              - {status: pending, created_at: '2016-05-02T10:03:19Z'}
              payment_transactions: null
              items: []
              received_at: '2016-05-02T10:03:19Z'
              completed_at: '2016-05-02T10:03:19Z'
              created_at: '2016-05-02T10:03:19Z'
              updated_at: '2016-05-02T10:03:19Z'
            object: order
  /v1/customers.list:
    get:
      tags: [customers]
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: q, in: query, type: string, description: Search customers by order number and/or customer name, required: false}
      - {name: group_id, in: query, type: string, format: uuid, description: Filter by customer group id, required: false}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''visits'', ''spend'', ''locations'', ''loyalty_programs'', ''loyalty_memberships''.',
        required: false}
      - {name: 'source[]', in: query, type: string, enum: [all, visible, hidden, pt_register, pt_dashboard, pt_storefront, uber_eats, door_dash, postmates], description: 'Filter by customer source. Defaults to visible sources if not provided.', required: false }
      summary: Returns a paginated list of customers for the current merchant.
      operationId: customersList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CustomerMerchantListResponse'}
          examples:
            data:
            - id: 59417ae1-bd95-3195-8c26-170227ea235a
              first_name: Daniela
              last_name: Sfregola
              email: daniela@paytouch.io
              dob: '2016-05-02'
              anniversary: '2016-05-02'
              phone_number: '123412314'
              address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
              total_spend: null
              avg_tips: null
              total_visits: null
              loyalty_programs: null
              locations: null
              web_storefront_last_login: '2016-05-02T10:03:19Z'
              mobile_storefront_last_login: '2016-05-02T10:03:19Z'
              created_at: '2016-05-02T10:03:19Z'
              updated_at: '2016-05-02T10:03:19Z'
            object: list
  /v1/customers.get:
    get:
      tags: [customers]
      parameters:
      - {name: customer_id, in: query, type: string, format: uuid, description: The id of the customer to retrieve., required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): "visits", "spend", "avg_tips", "loyalty_memberships".', required: false}
      summary: Returns a customer by id
      operationId: customerById
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CustomerMerchantResponse'}
          examples:
            data:
              id: 59417ae1-bd95-3195-8c26-170227ea235a
              first_name: Daniela
              last_name: Sfregola
              email: daniela@paytouch.io
              dob: '2016-05-02'
              anniversary: '2016-05-02'
              phone_number: '123412314'
              address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
              total_spend: null
              avg_tips: null
              total_visits: null
              loyalty_programs: null
              loyalty_statuses: null
              locations: null
              web_storefront_last_login: '2016-05-02T10:03:19Z'
              mobile_storefront_last_login: '2016-05-02T10:03:19Z'
              created_at: '2016-05-02T10:03:19Z'
              updated_at: '2016-05-02T10:03:19Z'
            object: customer
  /v1/customers.get_by:
    get:
      tags: [customers]
      parameters:
      - {name: loyalty_lookup_id, in: query, type: string, format: uuid, description: the lookup of the loyalty status you
          want to fetch the customer for., required: true}
      summary: Returns a customer by customer loyalty id
      operationId: customerByLoyaltyMembershipsId
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CustomerMerchantResponse'}
          examples:
            data:
              id: 59417ae1-bd95-3195-8c26-170227ea235a
              first_name: Daniela
              last_name: Sfregola
              email: daniela@paytouch.io
              dob: '2016-05-02'
              anniversary: '2016-05-02'
              phone_number: '123412314'
              address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
              total_spend: null
              avg_tips: null
              total_visits: null
              loyalty_programs: null
              loyalty_statuses: null
              locations: null
              web_storefront_last_login: '2016-05-02T10:03:19Z'
              mobile_storefront_last_login: '2016-05-02T10:03:19Z'
              created_at: '2016-05-02T10:03:19Z'
              updated_at: '2016-05-02T10:03:19Z'
            object: customer
  /v1/customers.create:
    post:
      tags: [customers]
      parameters:
      - name: body
        in: body
        description: The customer you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CustomerMerchantUpsertion'}
      summary: Creates a customer. If a customer with the given email already exists, it will be updated with the new data.
        For this reason this endpoint does not accept an incoming customer id and the client is required to read the id returned in the response. If no value is passed for worldplay, configured default value will be used.
      operationId: customerMerchantCreate
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - customer merchant created
          schema: {$ref: 'definitions.yml#/definitions/CustomerMerchantResponse'}
          examples:
            data:
              id: 524eb17d-4208-3aea-9757-4b4e3d701b4d
              first_name: salami
              last_name: ipsum
              dob: '1912-12-23'
              anniversary: '2014-03-29'
              email: salami@test.test
              phone_number: 07725443249
              address: {line1: 44 Pancetta Bacon Street, line2: Biltong Building, city: Ribs, state: Short Tail, country: Ham
                  Irure, postal_code: '23495'}
              mobile_storefront_last_login: null
              web_storefront_last_login: null
              total_visits: null
              total_spend: null
              avg_tips: null
              location_overrides: null
              loyalty_programs: null
              created_at: '2016-06-15T08:13:17.16Z'
              updated_at: '2016-06-15T08:17:04.244Z'
            object: customer
  /v1/customers.update:
    post:
      tags: [customers]
      parameters:
      - {name: customer_id, in: query, type: string, format: uuid, description: 'The id of the customer to update. Note, always
          a global customer id is used.', required: true}
      - name: body
        in: body
        description: The customer you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CustomerMerchantUpsertion'}
      summary: 'Updates a customer merchant. Also, this endpoint supports partial updates: only the fields sent will be changed,
        the others will remain untouched.'
      operationId: customerMerchantUpdate
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - customer merchant updated
          schema: {$ref: 'definitions.yml#/definitions/CustomerMerchantResponse'}
          examples:
            data:
              id: 524eb17d-4208-3aea-9757-4b4e3d701b4d
              first_name: salami
              last_name: ipsum
              dob: '1912-12-23'
              anniversary: '2014-03-29'
              email: salami@test.test
              phone_number: 07725443249
              address: {line1: 44 Pancetta Bacon Street, line2: Biltong Building, city: Ribs, state: Short Tail, country: Ham
                  Irure, postal_code: '23495'}
              mobile_storefront_last_login: null
              web_storefront_last_login: null
              total_visits: null
              total_spend: null
              avg_tips: null
              location_overrides: null
              loyalty_programs: null
              created_at: '2016-06-15T08:13:17.16Z'
              updated_at: '2016-06-15T08:17:04.244Z'
            object: customer
  /v1/customers.sync:
    post:
      tags: [customers]
      parameters:
      - {name: customer_id, in: query, type: string, format: uuid, description: 'The id of the customer to upsert. Note, always
          a global customer id is used. Also, no recovery is offered to this endpoint, so we will error if the data does not
          make sense.', required: true}
      - name: body
        in: body
        description: The customer you want to upsert
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CustomerMerchantUpsertion'}
      summary: 'Upserts a customer merchant. Also, this endpoint supports partial updates: only the fields sent will be changed,
        the others will remain untouched.'
      operationId: customerMerchantUpsertion
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - customer merchant updated
          schema: {$ref: 'definitions.yml#/definitions/CustomerMerchantResponse'}
          examples:
            data:
              id: 524eb17d-4208-3aea-9757-4b4e3d701b4d
              first_name: salami
              last_name: ipsum
              dob: '1912-12-23'
              anniversary: '2014-03-29'
              email: salami@test.test
              phone_number: 07725443249
              address: {line1: 44 Pancetta Bacon Street, line2: Biltong Building, city: Ribs, state: Short Tail, country: Ham
                  Irure, postal_code: '23495'}
              mobile_storefront_last_login: null
              web_storefront_last_login: null
              total_visits: null
              total_spend: null
              avg_tips: null
              location_overrides: null
              loyalty_programs: null
              created_at: '2016-06-15T08:13:17.16Z'
              updated_at: '2016-06-15T08:17:04.244Z'
            object: customer
  /v1/customers.delete:
    post:
      tags: [customers]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the customers to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes customers. It ignores non-existing customers or customers that do not belong to the user
      description: ''
      operationId: deleteCustomers
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the customers have been deleted}
  /v1/groups.list:
    get:
      tags: [groups]
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id of customers assigned
          to the groups, required: false}
      - {name: q, in: query, type: string, description: Search groups by group name, required: false}
      - {name: from, in: query, type: string, format: uuid, description: Filter from customer creation date, required: false}
      - {name: to, in: query, type: string, format: uuid, description: Filter to customer creation date, required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''customers'', ''customers_count'', ''revenue'', ''visits''.', required: false}
      summary: Returns a paginated list of groups for the current merchant.
      operationId: groupsList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/GroupListResponse'}
          examples:
            data:
            - {id: 59417ae1-bd95-3195-8c26-170227ea235a, name: Friends, customers: null, customers_count: null, revenues: null,
              visits: null}
            object: list
  /v1/groups.get:
    get:
      tags: [groups]
      parameters:
      - {name: group_id, in: query, type: string, format: uuid, description: The id of the group to retrieve., required: true}
      summary: Returns a group by id
      operationId: groupById
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/GroupResponse'}
          examples:
            data: {id: 59417ae1-bd95-3195-8c26-170227ea235a, name: Friends, customers: null, customers_count: null, revenues: null,
              visits: null}
            object: group
  /v1/groups.create:
    post:
      tags: [groups]
      parameters:
      - {name: group_id, in: query, type: string, format: uuid, description: the UUID of the group to create, required: true}
      - name: group
        in: body
        description: The group you want to create. The id will be generated by the backend.
        required: true
        schema: {$ref: 'definitions.yml#/definitions/GroupCreation'}
      summary: Creates a group
      description: ''
      operationId: createGroup
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/GroupResponse'}
          examples:
            data: {id: c09a6137-9b1b-415c-8f17-4442a2cc6c24, name: Friends}
            object: group
  /v1/groups.update:
    post:
      tags: [groups]
      parameters:
      - {name: group_id, in: query, type: string, format: uuid, description: The id of the group to update., required: true}
      - name: group
        in: body
        description: The group you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/GroupUpdate'}
      summary: 'Updates of a group. Note that this endpoint supports partial updates: only the fields sent will be changed,
        the others will remain untouched.'
      description: ''
      operationId: updateGroup
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/GroupResponse'}
          examples:
            data: {id: c09a6137-9b1b-415c-8f17-4442a2cc6c24, name: Friends}
            object: group
  /v1/groups.delete:
    delete:
      tags: [groups]
      parameters:
      - {name: group_id, in: query, type: string, format: uuid, description: The id of the group to delete., required: true}
      summary: Deletes a group. It ignores a non-existing group or a group that do not belong to the user
      description: ''
      operationId: deleteGroup
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the group has been deleted}
  /v1/order_feedback.list:
    get:
      tags: [order_feedback]
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: customer_id, in: query, type: string, format: uuid, description: Filter by customer id, required: false}
      - name: status
        in: query
        type: string
        enum: [read, unread]
        description: Filter by status
        required: false
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the order location. Example of a valid
          format: ''2011-12-03T10:15:30''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the order location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''customers''.', required: false}
      summary: 'Returns a paginated list of order feedback for the current merchant. The data is ordered as following: unread
        messages first, second ordering is by received_at date in ascending order.'
      operationId: orderFeedbackList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/OrderFeedbackListResponse'}
          examples:
            data:
            - {id: 59417ae1-bd95-3195-8c26-170227ea235a, order_id: 13eede8d-c07a-307e-bfd6-6be95d897eaf, customer_id: 2020c39f-e609-3b67-9eae-0220682d0df5,
              rating: 4, body: It was awesome!, read: true, received_at: '2016-05-02T10:03:19Z', customer: null, created_at: '2016-05-02T10:03:19Z',
              updated_at: '2016-05-02T10:03:19Z'}
            object: list
  /v1/products.list_quantity_changes:
    get:
      tags: [products]
      parameters:
      - {name: product_id, in: query, type: string, format: uuid, description: Filter by location id, required: true}
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the order location. Example of a valid
          format: ''2011-12-03T10:15:30''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the order location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: false}
      summary: Returns a paginated list of product quantity changes for the given product.
      operationId: products_listQuantityChanges
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ProductQuantityHistoryListResponse'}
          examples:
            data:
            - id: 59417ae1-bd95-3195-8c26-170227ea235a
              location:
                id: 59417ae1-bd95-3195-8c26-170227ea235a
                name: New York
                active: true
                address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
                timezone: US/New_york
              prev_quantity: 1.0
              new_quantity: 2.0
              new_stock_value: {amount: 1.0, currency: USD}
              reason: sale
              user: null
              notes: null
              timestamp: '2016-05-02T10:03:19Z'
            object: list
  /v1/products.list_cost_changes:
    get:
      tags: [products]
      parameters:
      - {name: product_id, in: query, type: string, format: uuid, description: Filter by location id, required: true}
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the order location. Example of a valid
          format: ''2011-12-03T10:15:30''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the order location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: false}
      summary: Returns a paginated list of product cost changes for the given product.
      operationId: products_listCostChanges
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ProductCostHistoryListResponse'}
          examples:
            data:
            - id: 59417ae1-bd95-3195-8c26-170227ea235a
              location:
                id: 59417ae1-bd95-3195-8c26-170227ea235a
                name: New York
                active: true
                address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
                timezone: US/New_york
              prev_cost: {amount: 1.0, currency: USD}
              new_cost: {amount: 3.0, currency: USD}
              cost_change: {amount: 2.0, currency: USD}
              reason: manual
              user: null
              notes: null
              timestamp: '2016-05-02T10:03:19Z'
            object: list
  /v1/products.list_price_changes:
    get:
      tags: [products]
      parameters:
      - {name: product_id, in: query, type: string, format: uuid, description: Filter by location id, required: true}
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the order location. Example of a valid
          format: ''2011-12-03T10:15:30''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the order location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: false}
      summary: Returns a paginated list of product price changes for the given product.
      operationId: products_listPriceChanges
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ProductPriceHistoryListResponse'}
          examples:
            data:
            - id: 59417ae1-bd95-3195-8c26-170227ea235a
              location:
                id: 59417ae1-bd95-3195-8c26-170227ea235a
                name: New York
                active: true
                address: {line1: 1465 Broadway Hewlett, line2: '', city: New York, state: NY, country: USA, postal_code: '11557'}
                timezone: US/New_york
              prev_price: {amount: 1.0, currency: USD}
              new_price: {amount: 3.0, currency: USD}
              price_change: {amount: 2.0, currency: USD}
              reason: manual
              user: null
              notes: null
              timestamp: '2016-05-02T10:03:19Z'
            object: list
  /v1/user_roles.create:
    post:
      tags: [user_roles]
      parameters:
      - {name: user_role_id, in: query, type: string, format: uuid, description: The id of the user role to create, required: true}
      - name: userRole
        in: body
        description: The user role you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/UserRoleCreation'}
      summary: Creates a user role
      description: If any permission section (categories, customers) of any specific permission (read, create, ...) is missing,
        we will just set them as false
      operationId: createUserRole
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/UserRoleResponse'}
  /v1/user_roles.delete:
    post:
      tags: [user_roles]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the user roles to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes user roles. It ignores non-existing user roles or user roles that do not belong to the user
      description: ''
      operationId: deleteUserRoles
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the user roles have been deleted}
  /v1/user_roles.update:
    post:
      tags: [user_roles]
      parameters:
      - name: userRole
        in: body
        description: The user role you want to update. This endpoint supports partial update, so send only the fields that
          you wouldd like to update. This is supported for both the permission sessions and the permissions itself.
        required: true
        schema: {$ref: 'definitions.yml#/definitions/UserRoleUpdate'}
      summary: Updates a user role
      description: ''
      operationId: updateUserRole
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/UserRoleResponse'}
  /v1/user_roles.get:
    get:
      tags: [user_roles]
      description: Note that the permissions fields of the user role are always expanded
      operationId: userRolesGet
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: user_role_id, in: query, type: string, format: uuid, description: The id of the user role to return, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''users_count''.', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/UserRoleResponse'}
  /v1/user_roles.list:
    get:
      tags: [user_roles]
      description: Note that the permissions fields of the user role are never expanded
      operationId: userRolesList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''users_count''.', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/UserRoleListResponse'}
  /v1/utils.time_zones:
    get:
      tags: [utils]
      summary: Returns all the time zones with offset and ids.
      operationId: utilsTimzeZones
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/TimeZoneListResponse'}
          examples:
            data:
            - {offset: 'GMT-5:00', id: America/Nipigon}
            - {offset: 'GMT-5:00', id: America/Panama}
            - {offset: 'GMT-5:00', id: America/Pangnirtung}
  /v1/utils.countries:
    get:
      tags: [utils]
      summary: Returns all the countries with code and name.
      operationId: utilsCountries
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CountryListResponse'}
          examples:
            data:
            - {code: AE, name: United Arab Emirates}
            - {code: AL, name: Albania}
            - {code: AR, name: Argentina}
  /v1/utils.states:
    get:
      tags: [utils]
      parameters:
      - name: country_code
        in: query
        type: string
        enum: [us, ca]
        description: The country of the states to list. Only selected countries are supported
        required: true
      summary: Returns all states of a country with code and name.
      operationId: utilsStates
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/StateListResponse'}
          examples:
            data:
            - {code: AL, name: Alabama}
            - {code: AK, name: Alaska}
            - {code: AB, name: Alberta}
  /v1/shifts.list:
    get:
      tags: [shifts]
      summary: Returns a paginated list of user shifts for the current merchant
      description: ''
      operationId: shiftsList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: from, in: query, type: string, format: date, description: 'Filter by from date. ''from'' is a date with no
          time zone as we always consider the local date associated to the shift location. Example of a valid format: ''2011-12-03''',
        required: false}
      - {name: to, in: query, type: string, format: date, description: 'Filter by to date. ''to'' is a date with no time zone
          as we always consider the local date associated to the shift location. Example of a valid format: ''2011-12-03''',
        required: false}
      - {name: user_role_id, in: query, type: string, format: uuid, description: Filter by user role id, required: false}
      - name: status
        in: query
        type: string
        enum: [published, draft]
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''locations''.'}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ShiftListResponse'}
          examples:
            data:
            - {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, user: null, status: draft, start_date: 2016-07-01, end_date: 2016-07-03,
              start_time: '08:00', end_time: '09:00', repeat: null, send_shift_start_notification: null, unpaid_break_mins: null,
              bg_color: null, frequency_count: null, frequency_interval: null, monday: null, tuesday: null, wednesday: null,
              thursday: null, friday: null, saturday: null, sunday: null, notes: null}
            object: list
  /v1/shifts.get:
    get:
      tags: [shifts]
      summary: Returns a user shift
      description: Returns a user shift by id
      operationId: shiftById
      parameters:
      - {name: shift_id, in: query, type: string, format: uuid, description: the UUID of the user shift, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''locations''.'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ShiftResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, user: null, status: draft, start_date: 2016-07-01, end_date: 2016-07-03,
              start_time: '08:00', end_time: '09:00', repeat: null, send_shift_start_notification: null, unpaid_break_mins: null,
              bg_color: null, frequency_count: null, frequency_interval: null, monday: null, tuesday: null, wednesday: null,
              thursday: null, friday: null, saturday: null, sunday: null, notes: null}
            object: shift
  /v1/shifts.create:
    post:
      tags: [shifts]
      parameters:
      - {name: shift_id, in: query, type: string, format: uuid, description: the UUID of the user shift to create, required: true}
      - name: shift
        in: body
        description: The user shift you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ShiftCreation'}
      summary: Creates a user shift
      description: ''
      operationId: createShift
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ShiftResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, title: Shift  1, type: percentage, amount: '30.00', require_manager_approval: true,
              location_overrides: null}
            object: shift
  /v1/shifts.update:
    post:
      tags: [shifts]
      parameters:
      - {name: shift_id, in: query, type: string, format: uuid, description: the UUID of the user shift}
      - name: shift
        in: body
        description: The user shift you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ShiftUpdate'}
      summary: Updates a user shift
      description: 'This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched.'
      operationId: updateShift
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/ShiftResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, title: Shift  1, type: percentage, amount: '30.00', require_manager_approval: true,
              location_overrides: null}
            object: shift
  /v1/shifts.delete:
    post:
      tags: [shifts]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the user shifts to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes user shifts. It ignores non-existing user shifts or user shifts that do not belong to the user
      description: ''
      operationId: deleteShifts
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the user shifts have been deleted}
  /v1/time_cards.list:
    get:
      tags: [time_cards]
      summary: Returns a paginated list of user time cards for the current merchant
      description: ''
      operationId: timeCardsList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: from, in: query, type: string, format: date-time, description: 'Filter by from date. ''from'' is a date with
          no time zone as we always consider the local date time associated to the shift location. Example of a valid format:
          ''2011-12-03T12:34:56''', required: false}
      - {name: to, in: query, type: string, format: date, description: 'Filter by to date. ''to'' is a date with no time zone
          as we always consider the local date associated to the shift location. Example of a valid format: ''2011-12-03T12:34:56''',
        required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''shift''.', required: false}
      - name: status
        in: query
        type: string
        enum: [open, closed]
        required: false
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/TimeCardListResponse'}
  /v1/time_cards.get:
    get:
      tags: [time_cards]
      summary: Returns a user time cards
      description: Returns a user time card by id
      operationId: timeCardById
      parameters:
      - {name: time_card_id, in: query, type: string, format: uuid, description: the UUID of the user time card, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''shift''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/TimeCardResponse'}
  /v1/time_cards.delete:
    post:
      tags: [time_cards]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the user time cards to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes user time cards. It ignores non-existing user time cards or user time cards that do not belong
        to the user or they have a location that is not accessible to the user.
      description: ''
      operationId: deleteTimeCards
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the user time cards have been deleted}
  /v1/time_cards.create:
    post:
      tags: [time_cards]
      parameters:
      - {name: time_card_id, in: query, type: string, format: uuid, description: the UUID of the time card to create, required: true}
      - name: time_card
        in: body
        description: The time card you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/TimeCardCreation'}
      summary: Creates a time card
      description: ''
      operationId: createTimeCard
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/TimeCardResponse'}
  /v1/time_cards.update:
    post:
      tags: [time_cards]
      parameters:
      - {name: time_card_id, in: query, type: string, format: uuid, description: the UUID of the time cards}
      - name: time_card
        in: body
        description: The time card you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/TimeCardUpdate'}
      summary: Updates a user time card
      description: 'This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched.'
      operationId: updateTimeCard
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/TimeCardResponse'}
  /v1/time_cards.clock:
    post:
      tags: [time_cards]
      parameters:
      - name: clock_in_out
        in: body
        description: The data required to clock in/out a user
        required: true
        schema: {$ref: 'definitions.yml#/definitions/TimeCardClock'}
      summary: Clocks a user in or out
      description: 'This endpoint automatically opens a new time card of no open cards exist or closes the last open one.'
      operationId: timeCardClock
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/TimeCardResponse'}
  /v1/time_off_cards.list:
    get:
      tags: [time_off_cards]
      summary: Returns a paginated list of time-off cards for the current merchant
      description: ''
      operationId: timeOffCardsList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: q, in: query, type: string, description: 'query search over firstName, lastName', required: false}
      - {name: from, in: query, type: string, format: date-time, description: 'Filter by from date. ''from'' is a date with
          no time zone as we always consider the local date time associated to the shift location. Example of a valid format:
          ''2011-12-03T12:34:56''', required: false}
      - {name: to, in: query, type: string, format: date, description: 'Filter by to date. ''to'' is a date with no time zone
          as we always consider the local date associated to the shift location. Example of a valid format: ''2011-12-03T12:34:56''',
        required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/TimeOffCardListResponse'}
          examples:
            data:
            - {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, user: null, type: null, start_at: null, paid: null, end_at: null,
              notes: null}
            object: list
  /v1/time_off_cards.get:
    get:
      tags: [time_off_cards]
      summary: Returns an user time-off card
      description: Returns a user time-off card  by id
      operationId: timeOffCardById
      parameters:
      - {name: time_off_card_id, in: query, type: string, format: uuid, description: the UUID of the user time-off card, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/TimeOffCardResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, type: null, user: null, paid: null, start_at: null, end_at: null,
              notes: null}
            object: time_off_card
  /v1/time_off_cards.create:
    post:
      tags: [time_off_cards]
      parameters:
      - {name: time_off_card_id, in: query, type: string, format: uuid, description: the UUID of the user time-off card to
          create, required: true}
      - name: time_off_card
        in: body
        description: The user time-off card you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/TimeOffCardCreation'}
      summary: Creates a user shift
      description: ''
      operationId: createTimeOffCard
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/TimeOffCardResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, type: null, user: null, paid: null, start_at: null, end_at: null,
              notes: null}
            object: time_off_card
  /v1/time_off_cards.update:
    post:
      tags: [time_off_cards]
      parameters:
      - {name: time_off_card_id, in: query, type: string, format: uuid, description: the UUID of the user time-off card}
      - name: time_off_card
        in: body
        description: The user time-off card you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/TimeOffCardUpdate'}
      summary: Updates a user time-off card
      description: 'This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched.'
      operationId: updateTimeOffCard
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/TimeOffCardResponse'}
          examples:
            data: {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, type: null, user: null, paid: null, start_at: null, end_at: null,
              notes: null}
            object: time_off_card
  /v1/time_off_cards.delete:
    post:
      tags: [time_off_cards]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the time-off cards to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes time-off cards. It ignores non-existing time-off cards or time-off cards that do not belong to
        the user
      description: ''
      operationId: deleteTimeOffCards
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the time-off cards have been deleted}
  /v1/payroll.list:
    get:
      tags: [payroll]
      summary: Returns a paginated list of payroll data per user for the current merchant
      description: ''
      operationId: payrollList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: from, in: query, type: string, format: uuid, description: Filter from date, required: false}
      - {name: to, in: query, type: string, format: uuid, description: Filter to date, required: false}
      - {name: q, in: query, type: string, description: 'query search over user firstName, lastName', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/PayrollListResponse'}
          examples:
            data:
            - {user: null, hourly_overtime_rate: null, total_tips: null, total_wage: null, hourly_rate: null, total_mins: null,
              total_delta_mins: null}
            object: list
  /v1/order_routing_tickets.list:
    get:
      tags: [order_routing_tickets]
      summary: Returns a paginated list of tickets data for the current merchant
      description: ''
      operationId: ticketList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: route_to_kitchen_id, in: query, type: string, description: 'The id of the kitchen to send the ticket to', required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: order_number, in: query, type: string, description: Filter by order number, required: false}
      - {name: show, in: query, type: boolean, description: Filter by show., required: false}
      - name: status
        in: query
        type: string
        enum: [new, in_progress, completed]
        description: Filter by status.
        required: false
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''order''', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/TicketListResponse'}
  /v1/order_routing_tickets.get:
    get:
      tags: [order_routing_tickets]
      summary: Returns a ticket by id
      description: ''
      operationId: ticketGet
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: order_routing_ticket_id, in: query, type: string, format: uuid, description: the UUID of the ticket, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''order''', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/TicketResponse'}
  /v1/order_routing_tickets.create:
    post:
      tags: [order_routing_tickets]
      parameters:
      - {name: order_routing_ticket_id, in: query, type: string, format: uuid, description: the UUID of the user ticket to
          create, required: true}
      - name: order_routing_ticket
        in: body
        description: The user ticket you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/TicketCreation'}
      summary: Creates a ticket
      description: When creating a ticket, its status will be automatically set to new and show = true
      operationId: createTicket
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/TicketResponse'}
  /v1/order_routing_tickets.update:
    post:
      tags: [order_routing_tickets]
      parameters:
      - {name: order_routing_ticket_id, in: query, type: string, format: uuid, description: the UUID of the ticket}
      - name: order_routing_ticket
        in: body
        description: The ticket you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/TicketUpdate'}
      summary: Updates a ticket
      description: 'This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched.'
      operationId: updateTicket
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/TicketResponse'}
  /v1/cash_drawers.send_report:
    get:
      tags: [cash_drawers]
      summary: Sends a cash drawer report to all users within roles that have the cash_drawers create permission.
      description: ''
      operationId: cashDrawersSendReport
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
        - {name: cash_drawer_id, in: query, type: string, format: uuid, description: the UUID of the cash drawer, required: true}
      responses:
        '204': {description: No Content. The request has been processed.}
        '404': {description: Not Found. The cash drawer does not exist or is not accessible by the current user.}
  /v1/cash_drawers.list:
    get:
      tags: [cash_drawers]
      summary: Returns a paginated list of cash drawers for the current merchant
      description: ''
      operationId: cashDrawersList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CashDrawerListResponse'}
  /v1/cash_drawers.list_reasons:
    get:
      tags: [cash_drawers]
      summary: Returns a paginated list of cash drawers reasons for the current merchant
      description: ''
      operationId: cashDrawersListReasons
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CashDrawerReasonListResponse'}
  /v1/cash_drawers.get:
    get:
      tags: [cash_drawers]
      summary: Returns an user cash drawers
      description: Returns a cash drawers by id
      operationId: cashDrawersById
      parameters:
      - {name: cash_drawer_id, in: query, type: string, format: uuid, description: the UUID of the cash drawer, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CashDrawerResponse'}
  /v1/cash_drawers.sync:
    post:
      tags: [cash_drawers]
      summary: Sync cash drawers by id
      description: Sync a cash drawers by id
      operationId: syncCashDrawerById
      parameters:
      - {name: cash_drawer_id, in: query, type: string, format: uuid, description: the UUID of the cash drawer, required: true}
      - name: body
        in: body
        description: The cash drawer you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CashDrawerUpsertion'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CashDrawerResponse'}
  /v1/cash_drawer_activities.sync:
    post:
      tags: [cash_drawers]
      summary: Sync cash drawer activities by id
      description: Sync a cash drawer activity by id
      operationId: syncCashDrawerActivityById
      parameters:
      - {name: cash_drawer_activity_id, in: query, type: string, format: uuid, description: the UUID of the cash drawer activity,
        required: true}
      - name: body
        in: body
        description: The cash drawer activity you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CashDrawerActivityUpsertion'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CashDrawerActivityResponse'}
  /v1/cash_drawer_activities.list:
    get:
      tags: [cash_drawers]
      summary: Returns a paginated list of cash drawer activities filter by cash drawer for the current merchant
      description: ''
      operationId: cashDrawerActivitiesList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: cash_drawer_id, in: query, type: string, format: uuid, description: the UUID of the cash drawer, required: true}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CashDrawerActivityListResponse'}
  /v1/reports.sales_summary:
    get:
      tags: [reports]
      summary: Returns reports for order sales summary. The returned json is a map of currency and ReportSalesSummary
      description: ''
      operationId: reportsSalesSummary
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the order location. Example of a valid
          format: ''2011-12-03T10:15:30''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the order location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ReportSalesSummaryPerCurrencyResponse'}
  /v1/reports.profit_summary:
    get:
      tags: [reports]
      summary: Returns reports for order profit summary. The returned json is a map of currency and ReportProfitSummary. Profit
        for previous week and previous month are provided only if both from and to filters are provided and they compare to
        the period identified by from-to
      description: ''
      operationId: reportsProfitSummary
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the order location. Example of a valid
          format: ''2011-12-03T10:15:30''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the order location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ReportProfitSummaryPerCurrencyResponse'}
  /v1/reports.customers_summary:
    get:
      tags: [reports]
      summary: Returns reports for customers summary. The returned json is a map of currency and ReportCustomerSummary.
      description: ''
      operationId: reportsCustomersSummary
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the order location. Example of a valid
          format: ''2011-12-03T10:15:30''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the order location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ReportCustomerSummaryPerCurrencyResponse'}
  /v1/purchase_orders.create:
    post:
      tags: [purchase_orders]
      parameters:
      - {name: purchase_order_id, in: query, type: string, format: uuid, description: the UUID of the purchase order to create,
        required: true}
      - name: purchase_order
        in: body
        description: The purchase order you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/PurchaseOrderCreation'}
      summary: Creates a purchase order
      description: ''
      operationId: createPurchaseOrder
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/PurchaseOrderResponse'}
  /v1/purchase_orders.update:
    post:
      tags: [purchase_orders]
      parameters:
      - {name: purchase_order_id, in: query, type: string, format: uuid, description: the UUID of the purchase order}
      - name: purchase_order
        in: body
        description: The purchase order you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/PurchaseOrderUpdate'}
      summary: Updates a purchase order
      description: 'This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched.'
      operationId: updatePurchaseOrder
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/PurchaseOrderResponse'}
  /v1/purchase_orders.send:
    post:
      tags: [purchase_order]
      parameters:
      - {name: purchase_count_id, in: query, type: string, format: uuid, description: the UUID of the purchase order}
      summary: Mark purchase order as sent.
      description: Marks an purchase order as sent.
      operationId: sendPurchaseOrder
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been completed
          schema: {$ref: 'definitions.yml#/definitions/PurchaseOrderResponse'}
  /v1/purchase_orders.delete:
    post:
      tags: [purchase_orders]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the purchase orders to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes purchase orders. It ignores non-existing purchase orders or purchase orders that do not belong
        to the user
      description: Note that this is a soft delete -- no purchase order is actually deleted!
      operationId: deletepurchaseOrders
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the purchase orders have been deleted}
  /v1/purchase_orders.get:
    get:
      tags: [purchase_orders]
      summary: Returns a purchase order
      description: Returns a purchase order by id
      operationId: purchaseOrderById
      parameters:
      - {name: purchase_order_id, in: query, type: string, format: uuid, description: the UUID of the purchase order, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''receiving_orders'', ''supplier'', ''location'', ''user''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/PurchaseOrderResponse'}
  /v1/purchase_orders.list:
    get:
      tags: [purchase_orders]
      summary: Returns a paginated list of purchase orders for the current merchant, ordered by created_at and updated_at
        in descending order
      operationId: purchaseOrdersList
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: supplier_id, in: query, type: string, format: uuid, description: Filter by supplier id, required: false}
      - name: status
        in: query
        type: string
        enum: [created, receiving, partial, completed]
        description: Filter by status
        required: false
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the purchase order location. Example of
          a valid format: ''2011-12-03T10:15:30''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the purchase order location. Example of a valid
          format: ''2011-12-03T10:15:30'''}
      - {name: q, in: query, type: string, description: query search over start of purchase order number, required: false}
      - name: view
        in: query
        type: string
        enum: [incomplete, complete, available_for_return]
        description: Filter by view
        required: false
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''receiving_orders'', ''supplier'', ''ordered_products_count'', ''received_products_count'', ''returned_products_count''.',
        required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/PurchaseOrderListResponse'}
  /v1/purchase_orders.list_products:
    get:
      tags: [purchase_orders]
      summary: Returns a paginated list of purchase order products for the current merchant
      operationId: purchaseOrderProductssList
      parameters:
      - {name: purchase_order_id, in: query, type: string, format: uuid, description: the UUID of the purchase order id, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''options''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/PurchaseOrderProductListResponse'}
  /v1/purchase_orders.create_comment:
    post:
      tags: [purchase_orders]
      summary: Creates a comment for a purchase order
      operationId: createCommentByPurchaseOrderId
      parameters:
      - {name: comment_id, in: query, type: string, format: uuid, description: the UUID of the comment, required: true}
      - name: comment
        in: body
        description: The comment you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CommentCreation'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CommentResponse'}
  /v1/purchase_orders.update_comment:
    post:
      tags: [purchase_orders]
      summary: Updates a comment for a purchase order
      operationId: updateCommentByPurchaseOrderId
      parameters:
      - {name: comment_id, in: query, type: string, format: uuid, description: the UUID of the comment, required: true}
      - name: comment
        in: body
        description: The comment you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CommentUpdate'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CommentResponse'}
  /v1/purchase_orders.delete_comment:
    post:
      tags: [purchase_orders]
      summary: Deletes a comment
      operationId: deleteCommentByPurchaseOrderId
      parameters:
      - {name: comment_id, in: query, type: string, format: uuid, description: the UUID of the comment, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content}
  /v1/purchase_orders.list_comments:
    get:
      tags: [purchase_orders]
      summary: Returns a list of comments for the given purchase order id
      operationId: listCommentsByPurchaseOrderId
      parameters:
      - {name: purchase_order_id, in: query, type: string, format: uuid, description: the UUID of the purchase order, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CommentListResponse'}
  /v1/receiving_orders.create:
    post:
      tags: [receiving_orders]
      parameters:
      - {name: receiving_order_id, in: query, type: string, format: uuid, description: the UUID of the receiving order to
          create, required: true}
      - name: receiving_order
        in: body
        description: The receiving order you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ReceivingOrderCreation'}
      summary: Creates a receiving order
      description: ''
      operationId: createReceivingOrder
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ReceivingOrderResponse'}
  /v1/receiving_orders.update:
    post:
      tags: [receiving_orders]
      parameters:
      - {name: receiving_order_id, in: query, type: string, format: uuid, description: the UUID of the receiving order}
      - name: receiving_order
        in: body
        description: The receiving order you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ReceivingOrderUpdate'}
      summary: Updates a receiving order
      description: 'This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched.'
      operationId: updateReceivingOrder
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/ReceivingOrderResponse'}
  /v1/receiving_orders.delete:
    post:
      tags: [receiving_orders]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the receiving orders to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes receiving orders. It ignores non-existing receiving orders or receiving orders that do not belong
        to the user
      operationId: deleteReceivingOrders
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the receiving orders have been deleted}
  /v1/receiving_orders.get:
    get:
      tags: [receiving_orders]
      summary: Returns a receiving order
      description: Returns a receiving order by id
      operationId: receivingOrderById
      parameters:
      - {name: receiving_order_id, in: query, type: string, format: uuid, description: the UUID of the receiving order, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''location'', ''purchase_order'', ''transfer_order'', ''user''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ReceivingOrderResponse'}
  /v1/receiving_orders.list:
    get:
      tags: [receiving_orders]
      summary: Returns a paginated list of receiving orders for the current merchant
      operationId: receivingOrdersList
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the receiving order location. Example
          of a valid format: ''2011-12-03T10:15:30''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the receiving order location. Example of a
          valid format: ''2011-12-03T10:15:30'''}
      - {name: q, in: query, type: string, description: query search over start of receiving order number, required: false}
      - name: status
        enum: [receiving, received, canceled, partial]
        in: query
        type: string
        description: the status of the receiving orders
        required: false
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''products_count'', ''stock_value'', ''user'', ''purchase_order'', ''transfer_order''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ReceivingOrderListResponse'}
  /v1/receiving_orders.list_products:
    get:
      tags: [receiving_orders]
      summary: Returns a paginated list of receiving order products for the current merchant
      operationId: receivingOrderProductsList
      parameters:
      - {name: receiving_order_id, in: query, type: string, format: uuid, description: the UUID of the receiving order id,
        required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''options''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ReceivingOrderProductDetailsListResponse'}
  /v1/receiving_orders.create_comment:
    post:
      tags: [receiving_orders]
      summary: Creates a comment for a receiving order
      operationId: createCommentByReceivingOrderId
      parameters:
      - {name: comment_id, in: query, type: string, format: uuid, description: the UUID of the comment, required: true}
      - name: comment
        in: body
        description: The comment you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CommentCreation'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CommentResponse'}
  /v1/receiving_orders.update_comment:
    post:
      tags: [receiving_orders]
      summary: Updates a comment for a receiving order
      operationId: updateCommentByReceivingOrderId
      parameters:
      - {name: comment_id, in: query, type: string, format: uuid, description: the UUID of the comment, required: true}
      - name: comment
        in: body
        description: The comment you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CommentUpdate'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CommentResponse'}
  /v1/receiving_orders.delete_comment:
    post:
      tags: [receiving_orders]
      summary: Deletes a comment
      operationId: deleteCommentByReceivingOrderId
      parameters:
      - {name: comment_id, in: query, type: string, format: uuid, description: the UUID of the comment, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content}
  /v1/receiving_orders.list_comments:
    get:
      tags: [receiving_orders]
      summary: Returns a list of comments for the given receiving order id
      operationId: listCommentsByReceivingOrderId
      parameters:
      - {name: receiving_order_id, in: query, type: string, format: uuid, description: the UUID of the receiving order, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CommentListResponse'}
  /v1/return_orders.create_comment:
    post:
      tags: [return_orders]
      summary: Creates a comment for a return
      operationId: createCommentByReturnId
      parameters:
      - {name: comment_id, in: query, type: string, format: uuid, description: the UUID of the comment, required: true}
      - name: comment
        in: body
        description: The comment you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CommentCreation'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CommentResponse'}
  /v1/receiving_orders.sync_inventory:
    post:
      tags: [receiving_orders]
      parameters:
      - {name: receiving_count_id, in: query, type: string, format: uuid, description: the UUID of the receiving order}
      summary: sync an inventory count by adjusting stocks with the received quantity
      description: Marks an receiving order as synced and received. Update will be allowed only for payment_method, payment_status and payment_due_date.
      operationId: syncInventoryReceivingOrder
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been completed
          schema: {$ref: 'definitions.yml#/definitions/ReceivingOrderResponse'}
  /v1/return_orders.sync_inventory:
    post:
      tags: [return_orders]
      parameters:
      - {name: return_order_id, in: query, type: string, format: uuid, description: the UUID of the return order}
      summary: sync an inventory count by adjusting stocks using the return order quantity
      description: Marks a return order as synced and sent, update stock removing the return order's quantity. No update will
        be allowed and if the return order has already been synced in the past.
      operationId: syncInventoryReturnOrder
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been completed
          schema: {$ref: 'definitions.yml#/definitions/ReturnOrderResponse'}
  /v1/return_orders.update_comment:
    post:
      tags: [return_orders]
      summary: Updates a comment for a return
      operationId: updateCommentByReturnId
      parameters:
      - {name: comment_id, in: query, type: string, format: uuid, description: the UUID of the comment, required: true}
      - name: comment
        in: body
        description: The comment you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CommentUpdate'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CommentResponse'}
  /v1/return_orders.delete_comment:
    post:
      tags: [return_orders]
      summary: Deletes a comment
      operationId: deleteCommentByReturnId
      parameters:
      - {name: comment_id, in: query, type: string, format: uuid, description: the UUID of the comment, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content}
  /v1/return_orders.list_comments:
    get:
      tags: [return_orders]
      summary: Returns a list of comments for the given receiving order id
      operationId: listCommentsByReturnId
      parameters:
      - {name: return_id, in: query, type: string, format: uuid, description: the UUID of the receiving order, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CommentListResponse'}
  /v1/merchants.create:
    post:
      tags: [merchants]
      parameters:
      - {name: merchant_id, in: query, type: string, format: uuid, description: the UUID of the merchant, required: true}
      - {name: token, in: query, type: string, format: string, description: 'the SHA1 HMAC signature of `/v1/merchants.create?merchant_id=the-uuid-gen-value`',
        required: true}
      - name: merchant
        in: body
        description: The merchant you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/PublicMerchantCreation'}
      summary: Creates a merchant, the default user roles and a user owner with user role admin. User owner object is always
        returned.
      description: ''
      operationId: createMerchant
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/MerchantResponse'}
  /v1/merchants.reset_setup_step:
    post:
      tags: [merchants]
      summary: Resets a setup step.
      description: ''
      operationId: merchantsResetSetupStep
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: merchant_id, in: query, type: string, format: uuid, description: the UUID of the merchant, required: true}
      - name: step
        in: query
        type: string
        description: The step to mark as skipped.
        required: false
        enum: [create_sample_data, setup_locations, import_products, import_customers, setup_employees, schedule_employees,
          design_receipts, setup_kitchens]
      responses:
        '204': {description: OK - No Content}
  /v1/merchants.skip_setup_step:
    post:
      tags: [merchants]
      summary: Mark a setup step as skipped.
      description: ''
      operationId: merchantsSkipSetupStep
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: merchant_id, in: query, type: string, format: uuid, description: the UUID of the merchant, required: true}
      - name: step
        in: query
        type: string
        description: The step to mark as skipped.
        required: false
        enum: [create_sample_data, setup_locations, import_products, import_customers, setup_employees, schedule_employees,
          design_receipts, setup_kitchens]
      responses:
        '204': {description: OK - No Content}
  /v1/merchants.complete_setup_step:
    post:
      tags: [merchants]
      summary: Mark a setup step as completed.
      description: ''
      operationId: merchantsCompleteSetupStep
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: merchant_id, in: query, type: string, format: uuid, description: the UUID of the merchant, required: true}
      - name: step
        in: query
        type: string
        description: The step to mark as completed.
        required: false
        enum: [create_sample_data, setup_locations, import_products, import_customers, setup_employees, schedule_employees,
          design_receipts, setup_kitchens, setup_taxes, setup_payments, setup_online_store, connect_delivery_provider]
      responses:
        '204': {description: OK - No Content}
  /v1/merchants.update:
    post:
      tags: [merchants]
      parameters:
      - {name: merchant_id, in: query, type: string, format: uuid, description: the UUID of the merchant, required: true}
      - name: merchant
        in: body
        description: The merchant you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ApiMerchantUpdate'}
      summary: Updates a merchant. User owner and user roles remain unthouched
      description: ''
      operationId: apiUpdateMerchant
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/MerchantResponse'}
  /v1/merchants.me:
    get:
      tags: [merchants]
      parameters: []
      summary: Returns merchant for current user
      operationId: merchantsMe
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/MerchantResponse'}
  /v1/merchants.set_worldpay_config:
    post:
      tags: [merchants]
      parameters:
        - in: body
          name: body
          required: true
          schema: {$ref: 'definitions.yml#/definitions/WorldpayConfigUpsertion'}
      summary: Sets worldpay config information.
      description: ''
      operationId: merchantsSetWorldpayConfig
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - payment processor config initialized}
  /v1/merchants.reset_payment_processor:
    post:
      tags: [merchants]
      parameters: []
      summary: Resets payment processor config information.
      description: ''
      operationId: merchantsResetPaymentProcessor
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - payment processor config initialized}
  /v1/admin/merchants.create:
    post:
      tags: [merchants]
      parameters:
      - {name: merchant_id, in: query, type: string, format: uuid, description: the UUID of the merchant, required: true}
      - name: merchant
        in: body
        description: The merchant you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/MerchantCreation'}
      summary: Creates a merchant, the default user roles and a user owner with user role admin. User owner object is always
        returned
      description: ''
      operationId: adminCreateMerchant
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/MerchantResponse'}
  /v1/admin/merchants.update:
    post:
      tags: [merchants]
      parameters:
      - {name: merchant_id, in: query, type: string, format: uuid, description: the UUID of the merchant, required: true}
      - name: merchant
        in: body
        description: The merchant you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/AdminMerchantUpdate'}
      summary: Updates a merchant. User owner and user roles remain unthouched
      description: ''
      operationId: adminUpdateMerchant
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/MerchantResponse'}
  /v1/admin/merchants.list:
    get:
      tags: [merchants]
      parameters:
        - name: business_type
          in: query
          type: string
          enum: [restaurant, retail]
          description: Filter by business type
          required: false
        - name: q
          in: query
          type: string
          description: Filter by query (business name)
          required: false
        - {name: 'sort_by[]', in: query, type: string, format: string, description: 'Sort by given fields, possible values
              are: ''business_name'', ''created_at'', ''updated_at''. Prepend with a minus sign for DESC order, otherwise is ASC', required: false}
        - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
              (multiple comma-separated values are ok): ''setup_steps'', ''owners'', ''locations''.', required: false}
      summary: Returns a paginated list of merchants
      operationId: adminMerchantsList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/MerchantListResponse'}
  /v1/admin/merchants.get:
    get:
      tags: [merchants]
      parameters:
        - name: merchant_id
          in: query
          type: string
          description: Merchant id
          required: true
      summary: Returns a merchant
      operationId: adminMerchantsGet
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/MerchantResponse'}
  /v1/transfer_orders.get:
    get:
      tags: [transfer_orders]
      summary: Returns a transfer order
      description: Returns a transfer order by id
      operationId: transferOrderById
      parameters:
      - {name: transfer_order_id, in: query, type: string, format: uuid, description: the UUID of the transfer order, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''from_location'', ''to_location'', ''user''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/TransferOrderResponse'}
  /v1/transfer_orders.list:
    get:
      tags: [transfer_orders]
      summary: Returns a paginated list of transfer orders for the current merchant
      operationId: transferOrdersList
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - name: status
        in: query
        type: string
        enum: [created, receiving, partial, completed]
        description: Filter by transfer order status
        required: false
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date. ''from'' is a date (we will
          automatically add time 00:00) with no time zone as we always consider the local date-time associated to the transfer
          order location. Example of a valid format: ''2011-12-03''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date. ''to'' is a date (we will automatically
          add time 23:59) with no time zone as we always consider the local date-time associated to the transfer order location.
          Example of a valid format: ''2011-12-03'''}
      - {name: q, in: query, type: string, description: query search over start of transfer order number, required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''from_location'', ''to_location'', ''user'', ''products_count'', ''stock_value''.',
        required: false}
      - name: view
        in: query
        type: string
        enum: [complete, incomplete]
        description: Filter by view
        required: false
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/TransferOrderListResponse'}
  /v1/transfer_orders.list_products:
    get:
      tags: [transfer_orders]
      summary: Returns a paginated list of transfer order products for the current merchant
      operationId: transferOrderProductsList
      parameters:
      - {name: transfer_order_id, in: query, type: string, format: uuid, description: the UUID of the transfer order id, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''options''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/TransferOrderProductListResponse'}
  /v1/transfer_orders.create:
    post:
      tags: [transfer_orders]
      parameters:
      - {name: transfer_order_id, in: query, type: string, format: uuid, description: the UUID of the transfer order to create,
        required: true}
      - name: transfer_order
        in: body
        description: The transfer order you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/TransferOrderCreation'}
      summary: Creates a transfer order
      description: ''
      operationId: createTransferOrder
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/TransferOrderResponse'}
  /v1/transfer_orders.update:
    post:
      tags: [transfer_orders]
      parameters:
      - {name: transfer_order_id, in: query, type: string, format: uuid, description: the UUID of the transfer order}
      - name: transfer_order
        in: body
        description: The transfer order you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/TransferOrderUpdate'}
      summary: Updates a transfer order
      description: 'This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched.'
      operationId: updateTransferOrder
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/TransferOrderResponse'}
  /v1/return_orders.get:
    get:
      tags: [return_orders]
      summary: Returns a return order
      description: Returns a return order by id
      operationId: returnOrderById
      parameters:
      - {name: return_order_id, in: query, type: string, format: uuid, description: the UUID of the return order, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''supplier'', ''user'', ''location'', ''products_count'', ''purchase_order''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ReturnOrderResponse'}
  /v1/return_orders.list:
    get:
      tags: [return_orders]
      summary: Returns a paginated list of return orders for the current merchant
      operationId: returnOrdersList
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date. ''from'' is a date (we will
          automatically add time 00:00) with no time zone as we always consider the local date-time associated to the return
          order location. Example of a valid format: ''2011-12-03''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date. ''to'' is a date (we will automatically
          add time 23:59) with no time zone as we always consider the local date-time associated to the return order location.
          Example of a valid format: ''2011-12-03'''}
      - {name: q, in: query, type: string, description: query search over start of return order number, required: false}
      - name: status
        enum: [created, sent, canceled, rejected, accepted]
        in: query
        type: string
        description: the status of the receiving orders
        required: false
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''supplier'', ''user'', ''stock_value'', ''location'', ''products_count''.',
        required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ReturnOrderListResponse'}
  /v1/return_orders.create:
    post:
      tags: [return_orders]
      parameters:
      - {name: return_order_id, in: query, type: string, format: uuid, description: the UUID of the return order to create,
        required: true}
      - name: return_order
        in: body
        description: The return order you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ReturnOrderCreation'}
      summary: Creates a return order
      description: ''
      operationId: createReturnOrder
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ReturnOrderResponse'}
  /v1/return_orders.list_products:
    get:
      tags: [return_orders]
      summary: Returns a paginated list of return order products for the current merchant
      operationId: returnOrderProductsList
      parameters:
      - {name: return_order_id, in: query, type: string, format: uuid, description: the UUID of the return order id, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''options''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ReturnOrderProductListResponse'}
  /v1/return_orders.update:
    post:
      tags: [return_orders]
      parameters:
      - {name: return_order_id, in: query, type: string, format: uuid, description: the UUID of the return order}
      - name: return_order
        in: body
        description: The return order you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ReturnOrderUpdate'}
      summary: Updates a return order
      description: 'This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched.'
      operationId: updateReturnOrder
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/ReturnOrderResponse'}
  /v1/inventory_counts.create:
    post:
      tags: [inventory_counts]
      parameters:
      - {name: inventory_count_id, in: query, type: string, format: uuid, description: the UUID of the inventory count to
          create, required: true}
      - name: inventory_count
        in: body
        description: The inventory count you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/InventoryCountCreation'}
      summary: Creates an inventory count
      description: ''
      operationId: createInventoryCount
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/InventoryCountResponse'}
  /v1/inventory_counts.sync_inventory:
    post:
      tags: [inventory_counts]
      parameters:
      - {name: inventory_count_id, in: query, type: string, format: uuid, description: the UUID of the inventory count}
      summary: sync an inventory count by updating stocks with the counted quantity
      description: Marks an inventory count as synced and set the status to either matched or unmatched. No update will be
        allowed and if the inventory has already been synced in the past.
      operationId: syncInventoryInventoryCount
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been completed
          schema: {$ref: 'definitions.yml#/definitions/InventoryCountResponse'}
  /v1/inventory_counts.update:
    post:
      tags: [inventory_counts]
      parameters:
      - {name: inventory_count_id, in: query, type: string, format: uuid, description: the UUID of the inventory count}
      - name: inventory_count
        in: body
        description: The inventory count you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/InventoryCountUpdate'}
      summary: Updates an inventory count
      description: 'This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched.'
      operationId: updateInventoryCount
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/InventoryCountResponse'}
  /v1/inventory_counts.get:
    get:
      tags: [inventory_counts]
      summary: Returns an inventory count
      description: Returns an inventory count by id
      operationId: inventoryCountById
      parameters:
      - {name: inventory_count_id, in: query, type: string, format: uuid, description: the UUID of the inventory count, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''user'', ''location''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/InventoryCountResponse'}
  /v1/inventory_counts.list:
    get:
      tags: [inventory_counts]
      summary: Returns a paginated list of inventory counts for the current merchant
      operationId: inventoryCountsList
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: q, in: query, type: string, description: query search over start of inventory count number, required: false}
      - name: status
        in: query
        type: string
        enum: [matched, unmatched, in_progress]
        description: Filter by status
        required: false
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''user'', ''location''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/InventoryCountListResponse'}
  /v1/inventory_counts.list_products:
    get:
      tags: [inventory_counts]
      summary: Returns a paginated list of inventory count products for the current merchant
      operationId: inventoryCountProductsList
      parameters:
      - {name: inventory_count_id, in: query, type: string, format: uuid, description: the UUID of the inventory count id,
        required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''options''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/InventoryCountProductListResponse'}
  /v1/inventory_counts.create_comment:
    post:
      tags: [inventory_counts]
      summary: Creates a comment for an inventory count
      operationId: createCommentByInventoryCountId
      parameters:
      - {name: comment_id, in: query, type: string, format: uuid, description: the UUID of the comment, required: true}
      - name: comment
        in: body
        description: The comment you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CommentCreation'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CommentResponse'}
  /v1/inventory_counts.update_comment:
    post:
      tags: [inventory_counts]
      summary: Updates a comment for an inventory count
      operationId: updateCommentByInventoryCountId
      parameters:
      - {name: comment_id, in: query, type: string, format: uuid, description: the UUID of the comment, required: true}
      - name: comment
        in: body
        description: The comment you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/CommentUpdate'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CommentResponse'}
  /v1/inventory_counts.delete_comment:
    post:
      tags: [inventory_counts]
      summary: Deletes a comment
      operationId: deleteCommentByInventoryCountId
      parameters:
      - {name: comment_id, in: query, type: string, format: uuid, description: the UUID of the comment, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content}
  /v1/inventory_counts.list_comments:
    get:
      tags: [inventory_counts]
      summary: Returns a list of comments for the given inventory count id
      operationId: listCommentsByInventoryCountId
      parameters:
      - {name: inventory_count_id, in: query, type: string, format: uuid, description: the UUID of the inventory count, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CommentListResponse'}
  /v1/inventory_counts.delete:
    delete:
      tags: [inventory_counts]
      parameters:
      - {name: inventory_count_id, in: query, type: string, format: uuid, description: The id of the inventory_count to delete.,
        required: true}
      summary: Deletes a inventory_count. It ignores a non-existing inventory_count or a inventory_count that do not belong
        to the user
      description: ''
      operationId: deleteInventory_count
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the inventory_count has been deleted}
  /v1/reports/orders.count:
    get:
      tags: [reports_orders]
      summary: Returns a count of orders completed in the time range, optionally grouped and split by interval.
      operationId: reportsOrdersCount
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''payment_type'', ''order_type'', ''source_type'', ''feedback''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ReportCountReportResponse'}
  /v1/reports/orders.sum:
    get:
      tags: [reports_orders]
      summary: Returns sum of order fields in the time range, optionally grouped and split by interval.
      operationId: reportsOrdersSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''payment_type'', ''order_type'', ''source_type'', ''feedback''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''revenue'', ''profit'', ''waiting_time''.',
        required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/OrderAggregateReportResponse'}
  /v1/reports/orders.average:
    get:
      tags: [reports_orders]
      summary: Returns average of order fields in the time range, optionally grouped and split by interval.
      operationId: reportsOrdersAverage
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''payment_type'', ''order_type'', ''source_type'', ''feedback''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''revenue'', ''profit'', ''waiting_time''.',
        required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/OrderAggregateReportResponse'}
  /v1/reports/sales.count:
    get:
      tags: [reports_sales]
      summary: Returns a count of sales completed in the time range, optionally grouped and split by interval.
      operationId: reportSalesCount
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - name: force_interval
        in: query
        type: string
        description: 'Override the interval guessed by core. Request will be denied if it would generate too many intervals
          (ie: can''t force an hourly interval for year long period.'
        required: false
        enum: [hourly, daily, weekly, monthly, yearly]
      - {name: 'order_types[]', in: query, type: string, format: string, description: 'Filters by order types.
          Valid values (multiple comma-separated values are ok): ''dine_in'', ''take_out'', ''delivery_restaurant'', ''in_store'', ''in_store_pick_up'', ''delivery_retail''.',
        required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ReportCountReportResponse'}
  /v1/reports/sales.sum:
    get:
      tags: [reports_sales]
      summary: Returns sum of sales fields in the time range, optionally grouped and split by interval.
      operationId: reportsSalesSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''gross_sales'', ''gross_profits'', ''non_taxable'',  ''taxable'',
          ''costs'', ''net_sales'', ''discounts'', ''refunds'', ''taxes'', ''tips''.', required: true}
      - name: force_interval
        in: query
        type: string
        description: 'Override the interval guessed by core. Request will be denied if it would generate too many intervals
          (ie: can''t force an hourly interval for year long period.'
        enum: [hourly, daily, weekly, monthly, yearly]
        required: false
      - {name: 'order_types[]', in: query, type: string, format: string, description: 'Filters by order types.
          Valid values (multiple comma-separated values are ok): ''dine_in'', ''take_out'', ''delivery_restaurant'', ''in_store'', ''in_store_pick_up'', ''delivery_retail''.',
        required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/SalesAggregateReportResponse'}
  /v1/reports/sales.average:
    get:
      tags: [reports_sales]
      summary: Returns average of sales fields in the time range, optionally grouped and split by interval.
      operationId: reportsSalesAverage
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''gross_sales'', ''gross_profits'', ''non_taxable'',  ''taxable'',
          ''costs'', ''net_sales'', ''discounts'', ''refunds'', ''taxes'', ''tips''.', required: true}
      - name: force_interval
        in: query
        type: string
        description: 'Override the interval guessed by core. Request will be denied if it would generate too many intervals
          (ie: can''t force an hourly interval for year long period.'
        required: false
        enum: [hourly, daily, weekly, monthly, yearly]
      - {name: 'order_types[]', in: query, type: string, format: string, description: 'Filters by order types.
          Valid values (multiple comma-separated values are ok): ''dine_in'', ''take_out'', ''delivery_restaurant'', ''in_store'', ''in_store_pick_up'', ''delivery_retail''.',
        required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/SalesAggregateReportResponse'}
  /v1/reports/customers.top:
    get:
      tags: [reports_customers]
      summary: Returns the top N customers ordered by a list of selectable fields.
      operationId: reportsCustomersTop
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: n, in: query, type: integer, format: integer, description: Limit the results to the specified number. Defaults
          to 5. Max 100., required: false}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          Valid values (multiple comma-separated values are ok): ''id'', ''first_name'', ''last_name'', ''profit'', ''spend'',
          ''visit'', ''margin''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CustomerTopReportResponse'}
  /v1/reports/customers.count:
    get:
      tags: [reports_customers]
      summary: Returns a count of customers completed in the time range, optionally grouped and split by interval.
      operationId: reportsCustomersCount
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''type'', ''visit'', ''loyalty_program''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ReportCountReportResponse'}
  /v1/reports/customers.sum:
    get:
      tags: [reports_customers]
      summary: Returns sum of customer fields in the time range, optionally grouped and split by interval.
      operationId: reportsCustomersSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''type'', ''visit'', ''loyalty_program''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''spend''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CustomerAggregateReportResponse'}
  /v1/reports/customers.average:
    get:
      tags: [reports_customers]
      summary: Returns average of customer fields in the time range, optionally grouped and split by interval.
      operationId: reportsCustomersAverage
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''type'', ''visit'', ''loyalty_program''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''spend''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CustomerAggregateReportResponse'}
  /v1/reports/order_tax_rates.sum:
    get:
      tags: [reports_order_tax_rates]
      summary: Returns sum of tax rate fields per order in the time range, optionally grouped and split by interval.
      operationId: reportsOrderTaxRatesSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''name''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''value''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/OrderTaxRateAggregateReportResponse'}
  /v1/reports/order_tax_rates.average:
    get:
      tags: [reports_order_tax_rates]
      summary: Returns average of tax rate fields per order in the time range, optionally grouped and split by interval.
      operationId: reportsOrderTaxRatesAverage
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''name''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''value''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/OrderTaxRateAggregateReportResponse'}
  /v1/reports/order_tax_rates.count:
    get:
      tags: [reports_order_tax_rates]
      summary: Returns a count of orders completed in the time range, optionally grouped and split by interval.
      operationId: reportsOrderTaxRatesCount
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''name''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ReportCountReportResponse'}
  /v1/reports/products.top:
    get:
      tags: [reports_products]
      summary: Returns the top N products ordered by a list of selectable fields.
      operationId: reportsProductsTop
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: n, in: query, type: integer, format: integer, description: Limit the results to the specified number. Defaults
          to 5. Max 100., required: false}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          Valid values (multiple comma-separated values are ok): ''id'', ''name'', ''quantity'', ''profit'', ''revenue'',
          ''margin'', ''net_sales''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ProductTopReportResponse'}
  /v1/reports/product_sales.list:
    get:
      tags: [reports_product_sales]
      summary: Returns a list of products along with sales fields in the time range.
      operationId: reportsProductSalesList
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''id'', ''name'', ''count'', ''gross_sales'',
          ''net_sales'', ''discounts'', ''refunds'', ''taxes'', ''tips'', ''costs'', ''taxable'', ''non_taxable''.', required: true}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          By default, the data is ordered by location name. Valid values (multiple comma-separated values are ok): ''id'',
          ''name'', ''count'', ''gross_sales'', ''net_sales'', ''discounts'', ''refunds'', ''taxes'', ''tips'', ''costs'',
          ''taxable'', ''non_taxable''.', required: false}
      - {name: 'id[]', in: query, type: string, format: string, description: A comma separated list of ids to filter., required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ProductSalesReportResponse'}
  /v1/reports/product_sales.sum:
    get:
      tags: [reports_product_sales]
      summary: Returns a list of products along with sales fields in the time range.
      operationId: reportsProductSalesSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''id'', ''name'', ''count'', ''gross_profits'',
          ''gross_sales'', ''net_sales'', ''discounts'', ''refunds'', ''taxes'', ''tips'', ''costs'', ''taxable'', ''non_taxable''.',
        required: true}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          By default, the data is ordered by location name. Valid values (multiple comma-separated values are ok): ''id'',
          ''name'', ''count'', ''gross_profits'', ''gross_sales'', ''net_sales'', ''discounts'', ''refunds'', ''taxes'', ''tips'',
          ''costs'', ''taxable'', ''non_taxable''.', required: false}
      - {name: 'id[]', in: query, type: string, format: string, description: A comma separated list of ids to filter., required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ProductSalesReportResponse'}
  /v1/reports/category_sales.list:
    get:
      tags: [reports_category_sales]
      summary: Returns a list of categorys along with sales fields in the time range.
      operationId: reportsCategorySalesList
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''name'', ''discounts'', ''gross_profits'',
          ''gross_sales'', ''quantity'', ''returned_quantity'', ''returned_amount'', ''taxes'', ''costs'', ''taxable'', ''non_taxable''.',
        required: true}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          By default, the data is ordered by product name. Valid values (multiple comma-separated values are ok): ''name'',
          ''discounts'', ''gross_profits'', ''gross_sales'', ''quantity'', ''returned_quantity'', ''returned_amount'', ''taxes'',
          ''costs'', ''taxable'', ''non_taxable''.', required: false}
      - {name: 'id[]', in: query, type: string, format: string, description: A comma separated list of ids to filter., required: false}
      - {name: 'category_id[]', in: query, type: string, format: string, description: A comma separated list of category ids
          to filter., required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/CategorySalesReportResponse'}
  /v1/reports/groups.top:
    get:
      tags: [reports_groups]
      summary: Returns the top N groups ordered by a list of selectable fields.
      operationId: reportsGroupsTop
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: n, in: query, type: integer, format: integer, description: Limit the results to the specified number. Defaults
          to 5. Max 100., required: false}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          Valid values (multiple comma-separated values are ok): ''id'', ''name'', ''visit'', ''profit'', ''revenue'', ''margin''.',
        required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/GroupTopReportResponse'}
  /v1/reports/location_sales.list:
    get:
      tags: [reports_sales]
      summary: Returns a paginated list of locations along with sales fields in the time range.
      operationId: reportsLocationSalesList
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''id'', ''name'', ''count'', ''gross_sales'',
          ''gross_profits'', ''non_taxable'',  ''taxable'', ''costs'', ''net_sales'', ''discounts'', ''refunds'', ''taxes'',
          ''tips'', ''address'', ''tender_types''.', required: true}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          By default, the data is ordered by location name. Valid values (multiple comma-separated values are ok): ''id'',
          ''name'', ''address'', ''count'', ''gross_sales'', ''gross_profits'', ''non_taxable'', ''taxable'', ''costs'', ''net_sales'',
          ''discounts'', ''refunds'', ''taxes'', ''tips'', ''tender_types''.', required: false}
      - {name: 'id[]', in: query, type: string, format: string, description: A comma separated list of ids to filter., required: false}
      - {name: 'order_types[]', in: query, type: string, format: string, description: 'Filters by order types.
          Valid values (multiple comma-separated values are ok): ''dine_in'', ''take_out'', ''delivery_restaurant'', ''in_store'', ''in_store_pick_up'', ''delivery_retail''.',
        required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/LocationSalesReportResponse'}
  /v1/reports/location_sales.sum:
    get:
      tags: [reports_sales]
      summary: Returns sum of sales fields in the time range, optionally grouped and split by interval.
      operationId: reportsLocationSalesSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''id'', ''name, ''address'', ''gross_sales'',
          ''gross_profits'', ''non_taxable'',  ''taxable'', ''costs'', ''net_sales'', ''discounts'', ''refunds'', ''taxes'',
          ''tips'', ''tender_types''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/LocationSalesReportResponse'}
  /v1/exports/orders.count:
    post:
      tags: [exports_orders]
      summary: Schedules and export with a count of orders completed in the time range, optionally grouped and split by interval.
      operationId: exportsOrdersCount
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''payment_type'', ''order_type'', ''source_type'', ''feedback''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/orders.sum:
    post:
      tags: [exports_orders]
      summary: Schedules an exports with the sum of order fields in the time range, optionally grouped and split by interval.
      operationId: exportsOrdersSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''payment_type'', ''order_type'', ''source_type'', ''feedback''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''revenue'', ''profit'', ''waiting_time'', ''count''.',
        required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/orders.average:
    post:
      tags: [exports_orders]
      summary: Schedules an export with the average of order fields in the time range, optionally grouped and split by interval.
      operationId: exportsOrdersAverage
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''payment_type'', ''order_type'', ''source_type'', ''feedback''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''revenue'', ''profit'', ''waiting_time'', ''count''.',
        required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/customers.top:
    post:
      tags: [exports_customers]
      summary: Schedules an export with the top N customers ordered by a list of selectable fields.
      operationId: exportsCustomersTop
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: n, in: query, type: integer, format: integer, description: Limit the results to the specified number. Defaults
          to 5. Max 100., required: false}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          Valid values (multiple comma-separated values are ok): ''id'', ''first_name'', ''last_name'', ''profit'', ''spend'',
          ''visit'', ''margin''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/customers.count:
    post:
      tags: [exports_customers]
      summary: Schedules an export with a count of customers completed in the time range, optionally grouped and split by
        interval.
      operationId: exportsCustomersCount
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''type'', ''visit'', ''loyalty_program''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/customers.sum:
    post:
      tags: [exports_customers]
      summary: Schedules an export with the sum of customer fields in the time range, optionally grouped and split by interval.
      operationId: exportsCustomersSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''type'', ''visit'', ''loyalty_program''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''spend'', ''count''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/customers.average:
    post:
      tags: [exports_customers]
      summary: Schedules an export with the average of customer fields in the time range, optionally grouped and split by
        interval.
      operationId: exportsCustomersAverage
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''type'', ''visit'', ''loyalty_program''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''spend'', ''count''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/order_tax_rates.sum:
    post:
      tags: [exports_order_tax_rates]
      summary: Schedules an export with the sum of tax rate fields per order in the time range, optionally grouped and split
        by interval.
      operationId: exportsOrderTaxRatesSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''name''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''amount'', ''count''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/order_tax_rates.average:
    post:
      tags: [exports_order_tax_rates]
      summary: Schedules an export with the average of tax rate fields per order in the time range, optionally grouped and
        split by interval.
      operationId: exportsOrderTaxRatesAverage
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''name''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''amount'', ''count''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/order_tax_rates.count:
    post:
      tags: [exports_order_tax_rates]
      summary: Schedules an export with a count of orders completed in the time range, optionally grouped and split by interval.
      operationId: exportsOrderTaxRatesCount
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''name''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/sales.count:
    post:
      tags: [exports_sales]
      summary: Schedules and export with a count of sales completed in the time range, optionally grouped and split by interval.
      operationId: exportsSalesCount
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''location''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - name: force_interval
        in: query
        type: string
        description: 'Override the interval guessed by core. Request will be denied if it would generate too many intervals
          (ie: can''t force an hourly interval for year long period.'
        required: false
        enum: [hourly, daily, weekly, monthly, yearly]
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/sales.sum:
    post:
      tags: [exports_sales]
      summary: Schedules an exports with the sum of sale fields in the time range, optionally grouped and split by interval.
      operationId: exportsSalesSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''location''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''gross_sales'', ''gross_profits'', ''non_taxable'',  ''taxable'',
          ''costs'', ''net_sales'', ''discounts'', ''refunds'', ''taxes'', ''tips'', ''count''.', required: true}
      - name: force_interval
        in: query
        type: string
        description: 'Override the interval guessed by core. Request will be denied if it would generate too many intervals
          (ie: can''t force an hourly interval for year long period.'
        required: false
        enum: [hourly, daily, weekly, monthly, yearly]
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/sales.average:
    post:
      tags: [exports_sales]
      summary: Schedules an export with the average of sale fields in the time range, optionally grouped and split by interval.
      operationId: exportsSalesAverage
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''location''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''gross_sales'', ''gross_profits'', ''non_taxable'',  ''taxable'',
          ''costs'', ''net_sales'', ''discounts'', ''refunds'', ''taxes'', ''tips'', ''count''.', required: true}
      - name: force_interval
        in: query
        type: string
        description: 'Override the interval guessed by core. Request will be denied if it would generate too many intervals
          (ie: can''t force an hourly interval for year long period.'
        required: false
        enum: [hourly, daily, weekly, monthly, yearly]
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/products.top:
    post:
      tags: [exports_products]
      summary: Schedules an export with the top N products ordered by a list of selectable fields.
      operationId: exportsProductsTop
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: n, in: query, type: integer, format: integer, description: Limit the results to the specified number. Defaults
          to 5. Max 100., required: false}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          Valid values (multiple comma-separated values are ok): ''id'', ''name'', ''quantity'', ''profit'', ''revenue'',
          ''margin'', ''net_sales''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/groups.top:
    post:
      tags: [exports_groups]
      summary: Schedules an export with the top N groups ordered by a list of selectable fields.
      operationId: exportsGroupsTop
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: n, in: query, type: integer, format: integer, description: Limit the results to the specified number. Defaults
          to 5. Max 100., required: false}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          Valid values (multiple comma-separated values are ok): ''id'', ''name'', ''visit'', ''profit'', ''revenue'', ''margin''.',
        required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/location_sales.list:
    post:
      tags: [exports_location_sales]
      summary: Schedules an export with all the location sales by a list of selectable fields.
      operationId: exportsLocationSalesList
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''id'', ''name'', ''count'', ''gross_sales'',
          ''net_sales'', ''discounts'', ''refunds'', ''taxes'', ''tips''.', required: true}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          By default, the data is ordered by location name. Valid values (multiple comma-separated values are ok): ''id'',
          ''name'', ''count'', ''gross_sales'', ''net_sales'', ''discounts'', ''refunds'', ''taxes'', ''tips'', ''address'',
          ''tender_types''.', required: false}
      - {name: 'id[]', in: query, type: string, format: string, description: A comma separated list of ids to filter., required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/location_sales.sum:
    post:
      tags: [reports_location_sales]
      summary: Schedules an export with sum of sales fields in the time range, optionally grouped and split by interval.
      operationId: exportsLocationSalesSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''id'', ''name, ''address'', ''gross_sales'',
          ''gross_profits'', ''non_taxable'',  ''taxable'', ''costs'', ''net_sales'', ''discounts'', ''refunds'', ''taxes'',
          ''tips'', ''tender_types''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/export/product_sales.sum:
    post:
      tags: [reports_product_sales]
      summary: Schedules an export with a list of products along with sales fields in the time range.
      operationId: exportsProductSalesSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''id'', ''name'', ''count'', ''gross_profits'',
          ''gross_sales'', ''net_sales'', ''discounts'', ''refunds'', ''taxes'', ''tips'', ''costs'', ''taxable'', ''non_taxable''.',
        required: true}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          By default, the data is ordered by location name. Valid values (multiple comma-separated values are ok): ''id'',
          ''name'', ''count'', ''gross_profits'', ''gross_sales'', ''net_sales'', ''discounts'', ''refunds'', ''taxes'', ''tips'',
          ''costs'', ''taxable'', ''non_taxable''.', required: false}
      - {name: 'id[]', in: query, type: string, format: string, description: A comma separated list of ids to filter., required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/category_sales.list:
    post:
      tags: [exports_category_sales]
      summary: Schedules an export with all the category sales by a list of selectable fields.
      operationId: exportsCategorySalesList
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''name'', ''discounts'', ''gross_profits'',
          ''gross_sales'', ''quantity'', ''returned_quantity'', ''returned_amount'', ''taxes'', ''costs'', ''taxable'', ''non_taxable''.',
        required: true}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          By default, the data is ordered by product name. Valid values (multiple comma-separated values are ok): ''name'',
          ''discounts'', ''gross_profits'', ''gross_sales'', ''quantity'', ''returned_quantity'', ''returned_amount'', ''taxes'',
          ''costs'', ''taxable'', ''non_taxable''.', required: false}
      - {name: 'id[]', in: query, type: string, format: string, description: A comma separated list of ids to filter., required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/product_sales.list:
    post:
      tags: [exports_product_sales]
      summary: Schedules an export with all the product sales by a list of selectable fields.
      operationId: exportsProductSalesList
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''id'', ''name'', ''count'', ''gross_sales'',
          ''net_sales'', ''discounts'', ''refunds'', ''taxes'', ''tips'', ''costs'', ''taxable'', ''non_taxable''.', required: true}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          By default, the data is ordered by location name. Valid values (multiple comma-separated values are ok): ''id'',
          ''name'', ''count'', ''gross_sales'', ''gross_profits'', ''net_sales'', ''discounts'', ''refunds'', ''taxes'', ''tips'',
          ''costs'', ''taxable'', ''non_taxable''.', required: false}
      - {name: 'id[]', in: query, type: string, format: string, description: A comma separated list of ids to filter., required: false}
      - {name: 'category_id[]', in: query, type: string, format: string, description: A comma separated list of category ids
          to filter., required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/changes.feed:
    get:
      tags: [changes]
      summary: Returns the top N groups ordered by a list of selectable fields.
      operationId: changesFeed
      parameters:
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: true}
      - name: action
        in: query
        type: string
        enum: [deleted]
        description: Filter the results by action.
        required: false
      - name: object
        in: query
        type: string
        enum: [category, customer, discount, location, modifier_set, order, product, supplier, tax_rate, user]
        description: Filter the results by object.
        required: false
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/EventListResponse'}
  /v1/exports.get:
    get:
      tags: [exports]
      summary: Returns an export
      description: 'Returns a export by id. Export summary and validation errors are generic json objects. A status can have
        the following values: ''not_started'', ''processing'', ''uploading'', ''failed'', ''completed'''
      operationId: exportById
      parameters:
      - {name: export_id, in: query, type: string, format: uuid, description: the UUID of the export, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports.download:
    get:
      tags: [exports]
      summary: Downloads a csv export
      description: Redirects to a url to download the csv file associated to the export. Note the url is valid for 5 minutes.
      operationId: exportDownload
      parameters:
      - {name: export_id, in: query, type: string, format: uuid, description: the UUID of the export, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ExportDownloadResponse'}
  /v1/gift_cards.list:
    get:
      tags: [gift_cards]
      summary: Returns a paginated list of gift cards for the current merchant
      operationId: giftCardsList
      parameters:
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/GiftCardListResponse'}
  /v1/gift_cards.get:
    get:
      tags: [gift_cards]
      summary: Returns a gift cards for the current merchant
      operationId: giftCardsGet
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/GiftCardResponse'}
  /v1/gift_cards.create:
    post:
      tags: [gift_cards]
      parameters:
      - {name: gift_card_id, in: query, type: string, format: uuid, description: the UUID of the gift card to create, required: true}
      - name: gift_card
        in: body
        description: The gift card you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/GiftCardCreation'}
      summary: Creates a gift card
      description: ''
      operationId: createGiftCard
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/GiftCardResponse'}
  /v1/gift_cards.update:
    put:
      tags: [gift_cards]
      parameters:
      - {name: gift_card_id, in: query, type: string, format: uuid, description: the UUID of the gift card to update, required: true}
      - name: gift_card
        in: body
        description: The gift card you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/GiftCardUpdate'}
      summary: Updates a gift card
      description: ''
      operationId: updateGiftCard
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200': {description: OK - entity has been updated}
  /v1/gift_cards.update_active:
    post:
      tags: [gift_cards]
      parameters:
      - name: body
        in: body
        description: An object mapping gift cards ids to the desired boolean active state. Gift cards not included will not
          change.
        schema: {$ref: 'definitions.yml#/definitions/UpdateActiveItemList'}
        required: true
      summary: Sets the global active flag for each gift card provided. Leaves all the other gift cards untouched.
      description: ''
      operationId: giftCardsUpdateActive
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content - gift cards were enabled/disabled}
  /v1/gift_cards.delete:
    post:
      tags: [gift_cards]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the gift cards to delete
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes gift cards. It ignores non-existing gift cards or gift cards that do not belong to the user
      description: ''
      operationId: deleteGiftCards
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - the gift cards have been deleted}
  /v1/gift_card_passes.get:
    get:
      tags: [gift_card_passes]
      summary: Returns a gift card pass by id
      operationId: giftCardPassesGet
      parameters:
      - {name: gift_card_pass_id, in: query, type: string, format: uuid, description: the UUID of the gift card pass, required: true}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''transactions''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/GiftCardPassResponse'}
  /v1/gift_card_passes.lookup:
    get:
      tags: [gift_card_passes]
      summary: Returns a gift card pass by either lookup id or online code. Lookup id is tried before the online code. This makes both parameters optional even though at least one of them is required.
      operationId: giftCardPassesLookup
      parameters:
      - {name: lookup_id, in: query, type: string, description: the lookup id of the gift card pass, required: false}
      - {name: online_code, in: query, type: string, description: the online_code of the gift card pass, required: false}
      - {name: 'expand[]', in: query, type: string, format: string, description: 'Expand response with extra data. Valid values
          (multiple comma-separated values are ok): ''transactions''.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/GiftCardPassResponse'}
  /v1/gift_card_passes.charge:
    post:
      tags: [gift_card_passes]
      summary: Charges a gift card by decreasing the balance and creating a transaction with negative amount
      operationId: giftCardPassesCharge
      parameters:
      - {name: gift_card_pass_id, in: query, type: string, format: uuid, description: the UUID of the gift card pass, required: true}
      - {name: amount, in: query, type: number, format: double, description: the amount to charge. Must be positive, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/GiftCardPassTransactionResponse'}
  /v1/gift_card_passes.bulk_charge:
    post:
      tags: [gift_card_passes]
      summary: Charges multiple gift cards by decreasing their balance and creating transactions with negative amount
      operationId: giftCardPassesBulkCharge
      parameters:
      - {name: order_id, in: query, type: string, format: uuid, description: the UUID of the order, required: true}
      - name: gift_card_pass_charge[]
        in: body
        description: Information about the gift card to charge
        required: true
        schema: {$ref: 'definitions.yml#/definitions/GiftCardPassCharge'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content. The request has been processed.}
        '400': {description: Bad Request. Not all gift card passes were found for order or Insufficient funds. }
        '404': {description: Not found. Order not found.}
  /v1/gift_card_passes.refund:
    post:
      tags: [gift_card_passes]
      summary: Refunds a gift card by increasing the balance and creating a transaction with positive amount
      operationId: giftCardPassesRefund
      parameters:
      - {name: gift_card_pass_id, in: query, type: string, format: uuid, description: the UUID of the gift card pass, required: true}
      - {name: amount, in: query, type: number, format: double, description: the amount to refund. Must be positive, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/GiftCardPassTransactionResponse'}
  /v1/gift_card_passes.send_receipt:
    post:
      tags: [gift_card_passes]
      summary: Enqueues a request to send a gift card pass receipt to the given email.
      operationId: giftCardPassesSendReceipt
      parameters:
      - {name: order_item_id, in: query, type: string, format: uuid, description: the UUID of the order item associated to
          the gift card pass, required: true}
      - name: body
        in: body
        description: the recipient for the gift card pass receipt
        required: true
        schema: {$ref: 'definitions.yml#/definitions/SendReceiptData'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: No Content. The request has been processed.}
        '400': {description: Bad request. The email is invalid.}
        '404': {description: Not Found. The gift card pass does not exist or is not accessible by the current user.}
  /v1/barcodes.generate:
    post:
      tags: [barcodes]
      parameters:
      - name: metadata
        in: body
        description: Information about the barcode to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/BarcodeMetadata'}
      summary: Generates a barcode, if needed, and it returns a url where it can be downloaded.
      description: ''
      operationId: generateBarcode
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - Barcode generated
          schema: {$ref: 'definitions.yml#/definitions/BarcodeResponse'}
  /v1/admin/reports.generate:
    post:
      tags: [admin_reports]
      parameters:
      - {name: 'id[]', in: query, type: string, format: uuid, description: Filter by order ids (a comma separated list), required: false}
      - {name: 'merchant_id[]', in: query, type: string, format: uuid, description: Filter by merchant ids (a comma list),
        required: false}
      - {name: 'location_id[]', in: query, type: string, format: uuid, description: Filter by location ids (a comma list),
        required: false}
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time.
          Example of a valid format: ''2011-12-03T10:15:30''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time. Example
          of a valid format: ''2011-12-03T10:15:30''', required: false}
      summary: Recomputes reports
      description: ''
      operationId: adminReportsGenerate
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - Entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/CountResponse'}
  /v1/gift_card_passes.sales_summary:
    get:
      tags: [gift_card_passes]
      summary: Returns a sales summary on gift card passes purchased
      operationId: giftCardPassesSalesSummary
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the order location. Example of a valid
          format: ''2011-12-03T10:15:30''', required: false}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the order location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/GiftCardPassSalesSummaryResponse'}
  /v1/reports/gift_card_passes.count:
    get:
      tags: [reports_gift_card_passes]
      summary: Returns a count of gift card passes purchased in the time range, optionally grouped and split by interval.
      operationId: reportsGiftCardPassesCount
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''value''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/ReportCountReportResponse'}
  /v1/reports/gift_card_passes.sum:
    get:
      tags: [reports_gift_card_passes]
      summary: Returns sum of gift card pass fields in the time range, optionally grouped and split by interval.
      operationId: reportsGiftCardPassesSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''value''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''customers'', ''total'', ''redeemed'', ''unused''.',
        required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/GiftCardPassAggregateReportResponse'}
  /v1/reports/gift_card_passes.average:
    get:
      tags: [reports_gift_card_passes]
      summary: Returns average of gift card pass fields in the time range, optionally grouped and split by interval.
      operationId: reportsGiftCardPassesAverage
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''value''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''customers'', ''total'', ''redeemed'', ''unused''.',
        required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/GiftCardPassAggregateReportResponse'}
  /v1/reports/location_gift_card_passes.list:
    get:
      tags: [reports_location_gift_card_passes]
      summary: Returns a paginated list of locations along with gift card pass fields in the time range.
      operationId: reportsLocationGiftCardPassesList
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''id'', ''name'', ''count'', ''customers'',
          ''total'', ''redeemed'', ''unused''.', required: true}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          By default, the data is ordered by location name. Valid values (multiple comma-separated values are ok): ''id'',
          ''name'', ''address'', ''count'', ''customers'', ''total'', ''redeemed'', ''unused''.', required: false}
      - {name: 'id[]', in: query, type: string, format: string, description: A comma separated list of ids to filter., required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/LocationGiftCardPassesReportResponse'}
  /v1/reports/location_gift_card_passes.sum:
    get:
      tags: [reports_location_gift_card_passes]
      summary: Returns sum of gift card passes fields in the time range, optionally grouped and split by interval.
      operationId: reportsLocationGiftCardPassesSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''id'', ''name, ''address'', ''customers'',
          ''total'', ''redeemed'',  ''unused''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/LocationGiftCardPassesReportResponse'}
  /v1/exports/gift_card_passes.count:
    post:
      tags: [exports_gift_card_passes]
      summary: Schedules an export with the count of gift card passes by a list of selectable fields.
      operationId: exportsGiftCardPassesCount
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''value''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/gift_card_passes.sum:
    get:
      tags: [exports_gift_card_passes]
      summary: Schedules an export with the sum of gift card passes ordered by a list of selectable fields.
      operationId: exportsGiftCardPassesSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''value''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''customers'', ''total'', ''redeemed'', ''unused''.',
        required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/gift_card_passes.average:
    get:
      tags: [exports_gift_card_passes]
      summary: Schedules an export with the average of gift card passes ordered by a list of selectable fields.
      operationId: exportsGiftCardPassesAverage
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: group_by, in: query, type: string, description: 'Group results by a field. Valid values (only one is accepted):
          ''value''.', required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''customers'', ''total'', ''redeemed'', ''unused''.',
        required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/location_gift_card_passes.list:
    get:
      tags: [exports_location_gift_card_passes]
      summary: Schedules an export with the list of gift card passes by location ordered by a list of selectable fields.
      operationId: exportsLocationGiftCardPassesList
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''id'', ''name'', ''count'', ''customers'',
          ''total'', ''redeemed'', ''unused''.', required: true}
      - {name: 'order_by[]', in: query, type: string, format: string, description: 'Order the results by the specified fields.
          By default, the data is ordered by location name. Valid values (multiple comma-separated values are ok): ''id'',
          ''name'', ''address'', ''count'', ''customers'', ''total'', ''redeemed'', ''unused''.', required: false}
      - {name: 'id[]', in: query, type: string, format: string, description: A comma separated list of ids to filter., required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/exports/location_gift_card_passes.sum:
    get:
      tags: [exports_gift_card_passes]
      summary: Schedules an export with the sum of gift card passes per location ordered by a list of selectable fields.
      operationId: exportsLocationGiftCardPassesSum
      parameters:
      - {name: from, in: query, type: string, format: time, description: 'Filter by from date-time. ''from'' is a date-time
          with no time zone as we always consider the local date-time associated to the location. Example of a valid format:
          ''2011-12-03T10:15:30''', required: true}
      - {name: to, in: query, type: string, format: time, description: 'Filter by to date-time. ''to'' is a date-time with
          no time zone as we always consider the local date-time associated to the  location. Example of a valid format: ''2011-12-03T10:15:30''',
        required: true}
      - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
      - {name: with_interval, in: query, type: boolean, format: boolean, description: 'If set to true, the operation will
          be performed at properly spaced intervals instead of covering the whole time range. Defaults to false.', required: false}
      - {name: 'field[]', in: query, type: string, format: string, description: 'Select on which fields the operation should
          be executed. Valid values (multiple comma-separated values are ok): ''id'', ''name, ''address'', ''customers'',
          ''total'', ''redeemed'',  ''unused''.', required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/merchants.switch_mode_to:
    post:
      tags: [merchants]
      parameters:
      - name: mode
        in: query
        type: string
        enum: [demo, production]
        description: the mode of the merchant
        required: true
      summary: It creates a similar merchant but in the specified mode. JwtToken for the new merchant is returned
      description: ''
      operationId: switchModeMerchant
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: New merchant successfully authenticated
          schema: {$ref: 'definitions.yml#/definitions/LoginResponse'}
  /v1/ids.validate:
    post:
      tags: [validation]
      parameters:
      - name: ids
        in: body
        description: The UUIDs of the ids to validate
        required: true
        schema: {$ref: 'definitions.yml#/definitions/IdsToValidate'}
      summary: Validate several ids of core. Used from pt_ordering
      description: ''
      operationId: validateIds
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - all ids are valid}
  /v1/bundles.create:
    post:
      tags: [bundles]
      parameters:
      - {name: bundle_id, in: query, type: string, format: uuid, description: the UUID of the bundle, required: true}
      - name: bundle
        in: body
        description: The bundle you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/BundleCreation'}
      summary: Creates a bundle
      description: ''
      operationId: upsertBundle
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ProductResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: Penne
              description: 500gr of awesome penne
              brand_id: 3aef7d02-1380-4ee1-b09e-87f1e36540ec
              price: {amount: '0.54', currency: USD}
              cost: {amount: '0.3', currency: USD}
              unit: unit
              margin: 1.2
              upc: penne-awesome-upc-1234
              sku: penne-awesome-sku-1234
              is_variant_of_bundle_id: null
              has_variant: false
              track_inventory: false
              active: true
              apply_pricing_to_all_locations: false
              order_routing_bar: false
              order_routing_kitchen: false
              discountable: true
              avatar_bg_color: red
              avatar_image_urls: null
              categories: null
              location_overrides: null
              variants: []
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: bundle
  /v1/bundles.update:
    post:
      tags: [bundles]
      parameters:
      - {name: bundle_id, in: query, type: string, format: uuid, description: the UUID of the bundle, required: true}
      - name: bundle
        in: body
        description: The bundle you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/BundleUpdate'}
      summary: Updates a bundle and its bundle variants. Supports bundleial updates. It accepts 'reason' (by default set to
        'manual') and 'notes' attributes to record price/cost changes. When adding/creating variants, fields will be inherited
        from the main bundle when needed.
      description: ''
      operationId: updateBundle
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - entity has been updated
          schema: {$ref: 'definitions.yml#/definitions/ProductResponse'}
          examples:
            data:
              id: c09a6137-9b1b-415c-8f17-4442a2cc6c24
              name: Penne
              description: 500gr of awesome penne
              brand_id: 3aef7d02-1380-4ee1-b09e-87f1e36540ec
              price: {amount: '0.54', currency: USD}
              cost: {amount: '0.3', currency: USD}
              unit: unit
              margin: 1.2
              upc: penne-awesome-upc-1234
              sku: penne-awesome-sku-1234
              is_variant_of_bundle_id: null
              has_variant: false
              track_inventory: false
              active: true
              apply_pricing_to_all_locations: false
              order_routing_bar: false
              order_routing_kitchen: false
              discountable: true
              avatar_bg_color: red
              avatar_image_urls: null
              categories: null
              location_overrides: null
              variants: []
              created_at: '2016-02-17T16:39:51Z'
              updated_at: '2016-02-17T16:39:51Z'
            object: bundle
  /v1/kitchens.list:
    get:
      tags: [kitchens]
      parameters:
        - {name: location_id, in: query, type: string, format: uuid, description: Filter by location id, required: false}
        - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      summary: Returns a paginated list of kitchens for the current merchant
      operationId: kitchensList
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/KitchenListResponse'}
          examples:
            data:
              - {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, name: My Kitchen, location_id: c19a6137-9b1b-415c-8f17-4442a2cc6c24}
            object: list
  /v1/kitchens.get:
    get:
      tags: [kitchens]
      parameters:
        - {name: kitchen_id, in: query, type: string, format: uuid, description: The id of the kitchen to retrieve., required: true}
      summary: Returns a kitchen by id
      operationId: kitchenById
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/KitchenResponse'}
          examples:
            data: {id: 59417ae1-bd95-3195-8c26-170227ea235a, name: Friends, customers: null, customers_count: null, revenues: null,
                   visits: null}
            object: kitchen
  /v1/kitchens.create:
    post:
      tags: [kitchens]
      parameters:
      - {name: kitchen_id, in: query, type: string, format: uuid, description: the UUID of the kitchen to create, required: true}
      - name: kitchen
        in: body
        description: The kitchen you want to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/KitchenCreation'}
      summary: Creates a kitchen
      description: ''
      operationId: createKitchen
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/KitchenResponse'}
          examples:
            data: {id: c09a6137-9b1b-415c-8f17-4442a2cc6c24, name: Armany}
            object: kitchen
  /v1/kitchens.update:
    put:
      tags: [kitchens]
      parameters:
      - {name: kitchen_id, in: query, type: string, format: uuid, description: the UUID of the kitchen to update, required: true}
      - name: kitchen
        in: body
        description: The kitchen you want to update
        required: true
        schema: {$ref: 'definitions.yml#/definitions/KitchenUpdate'}
      summary: Updates a kitchen
      description: ''
      operationId: updateKitchen
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200': {description: OK - entity has been updated}
  /v1/kitchens.delete:
    post:
      tags: [kitchens]
      parameters:
        - name: ids
          in: body
          description: The UUIDs of the kitchens to delete
          required: true
          schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Bulk deletes kitchens. It ignores non-existing kitchens or kitchens that do not belong to the kitchen
      description: Note that this is a soft delete -- no kitchen is actually deleted!
      operationId: deleteKitchens
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        '204': {description: NoContent - the kitchens have been deleted}
  /v1/exports/customers.single:
    post:
      tags: [exports]
      summary: Schedules and export with customers.
      operationId: exportsCutomersSingle
      parameters:
        - {name: filename, in: query, type: string, description: Prefix to use for export filename, required: false}
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/ExportResponse'}
  /v1/tips_assignments.list:
    get:
      tags: [tips_assignments]
      operationId: tipsAssignmentsList
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      parameters:
      - {name: location_id, in: query, type: string, format: uuid, description: Filters the tips assignments by location id, required: true}
      - {name: user_role_id, in: query, type: string, format: uuid, description: 'Filters the tips assignments by handled via. Valid values
          (multiple comma-separated values are ok): ''unassigned'', ''cash_drawer_activity'', ''tips_distributed''.', required: false}
      - {name: updated_since, in: query, type: string, format: time, description: 'Filter by updated_since. ''updated_since''
          is a zoned date-time. If no zone is specified, UTC is assumed. Example of a valid format: ''2011-12-03T10:15:30'',
          ''2011-12-03T10:15:30+02:00''', required: false}
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/TipsAssignmentsListResponse'}
  /v1/tips_assignments.sync:
    post:
      tags: [tips_assignments]
      parameters:
        - {name: tips_assignment_id, in: query, type: string, format: uuid, description: The id of the tips assignment to sync., required: true}
        - name: body
          in: body
          description: The tips assignment you want to create or update
          required: true
          schema: {$ref: 'definitions.yml#/definitions/TipsAssignmentUpsertion'}
      summary: Syncs a tip assignment by id
      operationId: tipsAssignmentsSync
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/TipsAssignmentsListResponse'}
  /v1/tips_assignments.delete:
    post:
      tags: [tips_assignments]
      parameters:
        - name: ids
          in: body
          description: The UUIDs of the tip assignments to delete
          required: true
          schema: { $ref: "definitions.yml#/definitions/Ids" }
      summary: Bulk deletes tip assignments. It ignores non-existing tip assignments or tip assignments that do not belong to the user
      description: Note that this is a soft delete -- no product is actually deleted!
      operationId: deleteTipAssignments
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        "204":
          { description: NoContent - the tip assignments have been deleted }
  /v1/oauth.authorize:
    post:
      tags: [oauth]
      summary: Records a user user authorization to release a JWT token to an app
      operationId: oauthAuthorize
      consumes: [application/json]
      produces: [application/json]
      parameters:
        - name: response_type
          in: query
          description: The response type requested by the client, currently ignored.
          required: true
          type: string
          enum:
            - code
        - name: scope
          in: query
          description: The scope for which the client requests access, currently ignored.
          required: true
          type: string
          enum:
            - all
        - name: redirect_uri
          in: query
          type: string
          description: The URL the request will be redirected to, validated by the backend.
          required: true
        - name: client_id
          in: query
          type: string
          description: The client id uniquely identifying the client originating the request.
          required: true
      responses:
        '201':
          description: Successfully authenticated
          schema: {$ref: 'definitions.yml#/definitions/OauthCode'}
          examples:
            application/json:
              object: login_response
              data: {code: randomUuid}
        '400': {description: BadRequest}
  /v1/oauth.verify:
    post:
      tags: [oauth]
      summary: Exchanges an oauth code for JWT token
      operationId: oauthVerify
      consumes: [application/json]
      produces: [application/json]
      parameters:
        - name: grant_type
          in: query
          description: The grant type requested by the client, currently ignored.
          required: true
          type: string
          enum:
            - authorization_code
        - name: code
          in: query
          type: string
          description: The code previously returned by the backend
          required: true
        - name: redirect_uri
          in: query
          type: string
          description: The URL the request will be redirected to, validated by the backend.
          required: true
        - name: client_id
          in: query
          type: string
          description: The client id uniquely identifying the client originating the request.
          required: true
        - name: client_secret
          in: query
          type: string
          description: The client secret uniquely identifying the client originating the request.
          required: true
      responses:
        '200':
          description: Successfully authenticated
          schema: {$ref: 'definitions.yml#/definitions/LoginResponse'}
          examples:
            application/json:
              object: login_response
              data: {value: jwtTokenValue}
        '401': {description: Unauthorized}
  /v1/sessions.list:
    get:
      tags: [sessions]
      summary: Returns a paginated list of sessions for the current user
      operationId: sessionsList
      consumes: [application/json]
      produces: [application/json]
      parameters:
        - name: oauth2_app_name
          in: query
          description: The name of an OAuth2 app to filter for
          required: false
          type: string
      security:
        - bearer: []
      responses:
        '200':
          description: OK
          schema: {$ref: 'definitions.yml#/definitions/SessionListResponse'}
          examples:
            data:
              - {id: c19a6137-9b1b-415c-8f17-4442a2cc6c24, name: My Session}
            object: list
  /v1/sessions.delete:
    delete:
      tags: [sessions]
      parameters:
        - name: ids
          in: body
          description: The UUIDs of the sessions to delete
          required: true
          schema: {$ref: 'definitions.yml#/definitions/Ids'}
      summary: Deletes a session. It ignores a non-existing session or a session that do not belong to the user
      description: ''
      operationId: deleteSession
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        '204': {description: NoContent - the session has been deleted}
  /v1/vendor/stripe/payment_transactions.refund:
    post:
      tags: [stripe]
      parameters:
      - {name: payment_transaction_id, in: query, type: string, format: uuid, description: the ID of the payment transaction, required: true}
      - {name: amount, in: query, type: number, format: double, description: The amount to refund (in dollars/euros). Refunds the remaining charged amount if not provided.}
      summary: Refunds a Stripe payment transaction. The client calling this endpoint is responsible for updating the order and creating a refund payment transaction.
      description: ''
      operationId: stripePaymentTransactionRefund
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Refund has been accepted by Stripe. Note that this doesn't mean the refund has been successfully processed.
          schema: {$ref: 'definitions.yml#/definitions/StripeRefundResponse'}
  /v1/vendor/stripe/connect_callback:
    post:
      tags: [stripe]
      parameters:
      - {name: code, in: query, type: string, required: true}
      - {name: scope, in: query, type: string, format: uuid, description: Merchant id.}
      summary: Completes the Standard account connection to stripe.
      description: ''
      operationId: stripeConnectCallback
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '204': {description: NoContent - payment processor config initialized}
  /v2/image_uploads.create:
    post:
      tags: [image_uploads]
      summary: Creates an image upload.
      description: 'For V2 image uploads, the image is uploaded to S3 directly from the client. This call will return an image with a uploadUrl field, which the client should PUT the image to.'
      operationId: imageUploadCreate
      parameters:
      - {name: image_upload_id, in: query, type: string, format: uuid, description: the UUID of the image upload to create, required: true}
      - name: image_upload
        in: body
        description: The image upload to create
        required: true
        schema: {$ref: 'definitions.yml#/definitions/ImageUploadCreation'}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '201':
          description: Created - The image upload has been created
          schema: {$ref: 'definitions.yml#/definitions/ImageUploadResponse'}
  /v2/image_uploads.upload_complete:
    post:
      tags: [image_uploads]
      summary: Creates an image upload.
      description: 'For V2 image uploads, the image is uploaded to S3 directly from the client. This call will return an image with a upload_url field, which the client should PUT the image to. Once the image has been uploaded the client must call /v2/image_uploads.upload_complete, which will mark the image as uploaded, and return cdn urls.'
      operationId: imageUploadUploadComplete
      parameters:
      - {name: image_upload_id, in: query, type: string, format: uuid, description: the UUID of the image upload, required: true}
      consumes: [application/json]
      produces: [application/json]
      security:
      - bearer: []
      responses:
        '200':
          description: OK - The image upload has been marked as uploaded
          schema: {$ref: 'definitions.yml#/definitions/ImageUploadResponse'}
  /v1/auth0.auth:
    post:
      tags: [users]
      summary: Exchange an auth0 token for a core token
      operationId: auth0Auth
      consumes: [application/json]
      produces: [application/json]
      parameters:
      - in: body
        name: body
        description: Credentials object to authenticate
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Auth0Credentials'}
      responses:
        '200':
          description: Successfully authenticated
          schema: {$ref: 'definitions.yml#/definitions/LoginResponse'}
          examples:
            application/json:
              object: login_response
              data: {value: jwtTokenValue, hashedPin: hashedPin}
        '401': {description: Unauthorized}
  /v1/auth0.registration:
    post:
      tags: [users]
      summary: Creates a new merchant from an auth0 token.
      description: 'Creates a new merchant the same as /v1/merchants.create,
      creating a default user and role. Uses dummy data for fields that are
      ordinarily required for registration, so the user should be sent to the
      onboarding flow directly after this. Returns an error if a user already
      exists with the given auth0 token or associated email address.'
      operationId: auth0Registration
      consumes: [application/json]
      produces: [application/json]
      parameters:
      - in: body
        name: body
        required: true
        schema: {$ref: 'definitions.yml#/definitions/Auth0Registration'}
      responses:
        '201':
          description: Created - entity has been created
          schema: {$ref: 'definitions.yml#/definitions/MerchantResponse'}
