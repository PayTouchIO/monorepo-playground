databaseChangeLog:
  - changeSet:
      id: 1
      author: PayTouch Tech <tech@paytouch.io>
      changes:
        - modifySql:
            dbms: postgresql
            replace:
              replace: TIMESTAMP WITHOUT TIME ZONE
              with: TIMESTAMP WITH TIME ZONE
        - createTable:
            tableName: merchants
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: business_type
                  type: varchar(20)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createIndex:
            columns:
              - column:
                  name: business_type
            indexName: idx_business_type
            tableName: merchants
        - createTable:
            tableName: brands
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: user_roles
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: has_register_access
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: has_kitchen_view_access
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: has_dashboard_access
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: register
                  type: jsonb
                  constraints: { nullable: false }
              - column:
                  name: dashboard
                  type: jsonb
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: users
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: user_role_id
                  type: uuid
                  # foreign key constraint for this field is defined as a separate change after this createTable
              - column:
                  name: first_name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: last_name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: email
                  type: varchar(255)
                  constraints: { nullable: false, unique: true }
              - column:
                  name: password
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: pin
                  type: varchar(50)
                  constraints: { nullable: false }
              - column:
                  name: dob
                  type: date
              - column:
                  name: phone_number
                  type: varchar(255)
              - column:
                  name: address_line_1
                  type: varchar(255)
              - column:
                  name: address_line_2
                  type: varchar(255)
              - column:
                  name: city
                  type: varchar(255)
              - column:
                  name: state
                  type: varchar(255)
              - column:
                  name: country
                  type: varchar(255)
              - column:
                  name: postal_code
                  type: varchar(12)
              - column:
                  name: avatar_bg_color
                  type: varchar(255)
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: currency
                  type: varchar(3)
              - column:
                  name: hourly_rate_amount
                  type: number(12,2)
              - column:
                  name: overtime_rate_amount
                  type: number(12,2)
              - column:
                  name: pay_schedule
                  type: varchar(25)
              - column:
                  name: dashboard_last_login_at
                  type: datetime
              - column:
                  name: kitchen_view_last_login_at
                  type: datetime
              - column:
                  name: register_last_login_at
                  type: datetime
              - column:
                  name: deleted_at
                  type: datetime
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addForeignKeyConstraint:
            baseColumnNames: user_role_id
            baseTableName: users
            constraintName: user_roles
            onDelete: "SET NULL"
            referencedColumnNames: id
            referencedTableName: user_roles
        - createTable:
            tableName: merchant_configurations
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: locations
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: email
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: phone_number
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: address_line_1
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: address_line_2
                  type: varchar(255)
              - column:
                  name: city
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: state
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: country
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: postal_code
                  type: varchar(12)
                  constraints: { nullable: false }
              - column:
                  name: timezone
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: deleted_at
                  type: datetime
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: products
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: type
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: description
                  type: text
              - column:
                  name: brand_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_brand, references: brands(id) }
              - column:
                  name: price_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: price_currency
                  type: varchar(3)
                  constraints: { nullable: false }
              - column:
                  name: cost_amount
                  type: number(12,2)
              - column:
                  name: cost_currency
                  type: varchar(3)
              - column:
                  name: margin
                  type: number(5,2)
              - column:
                  name: unit
                  type: varchar(255)
                  defaultValue: unit
                  constraints: { nullable: false }
              - column:
                  name: upc
                  type: varchar(255)
              - column:
                  name: sku
                  type: varchar(255)
              - column:
                  name: is_variant_of_product_id
                  type: uuid
              - column:
                  name: has_variants
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: track_inventory
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: apply_pricing_to_all_locations
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: discountable
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: avatar_bg_color
                  type: varchar(255)
              - column:
                  name: is_service
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: price_tax_inclusive
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: order_routing_bar
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: order_routing_kitchen
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: deleted_at
                  type: datetime
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createIndex:
            columns:
              - column:
                  name: type
            indexName: idx_product_type
            tableName: products
        - createTable:
            tableName: variant_option_types
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: variant_options
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: variant_option_type_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_variant_option_type,
                      references: variant_option_types(id),
                    }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: product_variant_options
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: variant_option_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_variant_option,
                      references: variant_options(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: tax_rates
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: name
                  type: varchar(255)
              - column:
                  name: value
                  type: number(5,2)
              - column:
                  name: apply_to_price
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: tax_rate_locations
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: tax_rate_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_tax_rate,
                      references: tax_rates(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: product_locations
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: price_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: price_currency
                  type: varchar(3)
                  constraints: { nullable: false }
              - column:
                  name: unit
                  type: varchar(255)
                  defaultValue: unit
                  constraints: { nullable: false }
              - column:
                  name: cost_amount
                  type: number(12,2)
              - column:
                  name: cost_currency
                  type: varchar(3)
              - column:
                  name: margin
                  type: number(5,2)
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addUniqueConstraint:
            tableName: product_locations
            columnNames: merchant_id, product_id, location_id
        - createTable:
            tableName: product_location_tax_rates
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: product_location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_product_location,
                      references: product_locations(id),
                    }
              - column:
                  name: tax_rate_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_tax_rates,
                      references: tax_rates(id),
                    }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: stocks
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: quantity
                  type: number(12,4)
                  defaultValue: 0.0
                  constraints: { nullable: false }
              - column:
                  name: minimum_on_hand
                  type: number(12,4)
                  defaultValue: 0.0
                  constraints: { nullable: false }
              - column:
                  name: reorder_amount
                  type: number(12,4)
                  defaultValue: 0.0
              - column:
                  name: sell_out_of_stock
                  type: boolean
                  defaultValueBoolean: false
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: suppliers
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: contact
                  type: varchar(255)
              - column:
                  name: address
                  type: varchar(255)
              - column:
                  name: secondary_address
                  type: varchar(255)
              - column:
                  name: email
                  type: varchar(255)
              - column:
                  name: phone_number
                  type: varchar(255)
              - column:
                  name: secondary_phone_number
                  type: varchar(255)
              - column:
                  name: notes
                  type: varchar(255)
              - column:
                  name: account_number
                  type: varchar(25)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: categories
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: parent_category_id
                  type: uuid
                  constraints:
                    {
                      deleteCascade: true,
                      foreignKeyName: fk_category,
                      references: categories(id),
                    }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: description
                  type: varchar(255)
              - column:
                  name: avatar_bg_color
                  type: varchar(255)
              - column:
                  name: avatar_image_url
                  type: varchar(255)
              - column:
                  name: position
                  type: int
                  defaultValueNumeric: "0"
                  constraints: { nullable: false }
              - column:
                  name: active
                  type: boolean
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: category_locations
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: category_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_category,
                      references: categories(id),
                    }
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: product_categories
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: category_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_category,
                      references: categories(id),
                    }
              - column:
                  name: position
                  type: int
                  defaultValueNumeric: "0"
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: supplier_locations
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: supplier_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_supplier,
                      references: suppliers(id),
                    }
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: supplier_products
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: supplier_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_supplier,
                      references: suppliers(id),
                    }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: customers
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: first_name
                  type: varchar(255)
              - column:
                  name: last_name
                  type: varchar(255)
              - column:
                  name: dob
                  type: date
              - column:
                  name: anniversary
                  type: date
              - column:
                  name: email
                  type: varchar(255)
                  constraints: { unique: true }
              - column:
                  name: phone_number
                  type: varchar(255)
              - column:
                  name: address_line_1
                  type: varchar(255)
              - column:
                  name: address_line_2
                  type: varchar(255)
              - column:
                  name: city
                  type: varchar(255)
              - column:
                  name: state
                  type: varchar(255)
              - column:
                  name: country
                  type: varchar(255)
              - column:
                  name: postal_code
                  type: varchar(12)
              - column:
                  name: mobile_storefront_last_login
                  type: datetime
              - column:
                  name: web_storefront_last_login
                  type: datetime
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: customer_merchants
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: customer_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_customer,
                      references: customers(id),
                    }
              - column:
                  name: first_name
                  type: varchar(255)
              - column:
                  name: last_name
                  type: varchar(255)
              - column:
                  name: dob
                  type: date
              - column:
                  name: anniversary
                  type: date
              - column:
                  name: email
                  type: varchar(255)
              - column:
                  name: phone_number
                  type: varchar(255)
              - column:
                  name: address_line_1
                  type: varchar(255)
              - column:
                  name: address_line_2
                  type: varchar(255)
              - column:
                  name: city
                  type: varchar(255)
              - column:
                  name: state
                  type: varchar(255)
              - column:
                  name: country
                  type: varchar(255)
              - column:
                  name: postal_code
                  type: varchar(12)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: customer_locations
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: customer_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_customer,
                      references: customers(id),
                    }
              - column:
                  name: total_visits
                  type: int
                  defaultValueNumeric: "0"
                  constraints: { nullable: false }
              - column:
                  name: total_spend_amount
                  type: number(12,2)
                  defaultValueNumeric: "0"
                  constraints: { nullable: false }
              - column:
                  name: total_spend_currency
                  type: varchar(3)
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: modifier_sets
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: type
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: single_choice
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: force
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createIndex:
            columns:
              - column:
                  name: type
            indexName: idx_modifier_sets_type
            tableName: modifier_sets
        - createTable:
            tableName: modifier_options
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: modifier_set_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_modifier_set,
                      references: modifier_sets(id),
                    }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: price_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: price_currency
                  type: varchar(3)
                  constraints: { nullable: false }
              - column:
                  name: position
                  type: int
                  defaultValueNumeric: "0"
                  constraints: { nullable: false }
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: modifier_set_locations
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: modifier_set_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_modifier_set,
                      references: modifier_sets(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: modifier_set_products
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: modifier_set_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_modifier_set,
                      references: modifier_sets(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: availabilities
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: item_id
                  type: uuid
                  constraints: { nullable: false }
              - column:
                  name: item_type
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: sunday
                  type: boolean
                  constraints: { nullable: false }
              - column:
                  name: monday
                  type: boolean
                  constraints: { nullable: false }
              - column:
                  name: tuesday
                  type: boolean
                  constraints: { nullable: false }
              - column:
                  name: wednesday
                  type: boolean
                  constraints: { nullable: false }
              - column:
                  name: thursday
                  type: boolean
                  constraints: { nullable: false }
              - column:
                  name: friday
                  type: boolean
                  constraints: { nullable: false }
              - column:
                  name: saturday
                  type: boolean
                  constraints: { nullable: false }
              - column:
                  name: start
                  type: time
                  constraints: { nullable: false }
              - column:
                  name: end
                  type: time
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: discounts
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: title
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: type
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: currency
                  type: varchar(3)
              - column:
                  name: amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: require_manager_approval
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: discount_locations
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: discount_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_discount,
                      references: discounts(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: imports
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: type
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_ids
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: filename
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: validation_status
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: import_status
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: validation_errors
                  type: jsonb
              - column:
                  name: import_summary
                  type: jsonb
              - column:
                  name: delete_existing
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: user_locations
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: orders
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_location, references: locations(id) }
              - column:
                  name: device_id
                  type: uuid
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_user, references: users(id) }
              - column:
                  name: customer_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_customer, references: customers(id) }
              - column:
                  name: number
                  type: varchar(255)
              - column:
                  name: receipt_number
                  type: varchar(255)
              - column:
                  name: source
                  type: varchar(20)
              - column:
                  name: type
                  type: varchar(20)
              - column:
                  name: payment_type
                  type: varchar(20)
              - column:
                  name: currency
                  type: varchar(3)
              - column:
                  name: total_amount
                  type: number(12,2)
              - column:
                  name: subtotal_amount
                  type: number(12,2)
              - column:
                  name: discount_amount
                  type: number(12,2)
              - column:
                  name: tax_amount
                  type: number(12,2)
              - column:
                  name: tip_amount
                  type: number(12,2)
              - column:
                  name: customer_notes
                  type: jsonb
              - column:
                  name: merchant_notes
                  type: jsonb
              - column:
                  name: payment_status
                  type: varchar(20)
              - column:
                  name: status
                  type: varchar(20)
              - column:
                  name: fulfillment_status
                  type: varchar(20)
              - column:
                  name: status_transitions
                  type: jsonb
              - column:
                  name: is_invoice
                  type: boolean
                  constraints: { nullable: false }
              - column:
                  name: received_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: completed_at
                  type: datetime
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createIndex:
            columns:
              - column:
                  name: fulfillment_status
            indexName: idx_fulfillment_status
            tableName: orders
        - createIndex:
            columns:
              - column:
                  name: status
            indexName: idx_order_status
            tableName: orders
        - createIndex:
            columns:
              - column:
                  name: type
            indexName: idx_order_type
            tableName: orders
        - createIndex:
            columns:
              - column:
                  name: payment_type
            indexName: idx_order_payment_type
            tableName: orders
        - createIndex:
            columns:
              - column:
                  name: payment_status
            indexName: idx_order_payment_status
            tableName: orders
        - createIndex:
            columns:
              - column:
                  name: source
            indexName: idx_order_source
            tableName: orders
        - createTable:
            tableName: order_items
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: order_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_order,
                      references: orders(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_product, references: products(id) }
              - column:
                  name: product_name
                  type: varchar(255)
              - column:
                  name: product_description
                  type: varchar(255)
              - column:
                  name: quantity
                  type: number(12,4)
                  defaultValue: 0.0
              - column:
                  name: unit
                  type: varchar(255)
                  defaultValue: unit
              - column:
                  name: payment_status
                  type: varchar(20)
              - column:
                  name: currency
                  type: varchar(3)
              - column:
                  name: price_amount
                  type: number(12,2)
              - column:
                  name: cost_amount
                  type: number(12,2)
              - column:
                  name: discount_amount
                  type: number(12,2)
              - column:
                  name: tax_amount
                  type: number(12,2)
              - column:
                  name: base_price_amount
                  type: number(12,2)
              - column:
                  name: total_price_amount
                  type: number(12,2)
              - column:
                  name: notes
                  type: varchar(255)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createIndex:
            columns:
              - column:
                  name: payment_status
            indexName: idx_order_item_payment_status
            tableName: order_items
        - createTable:
            tableName: order_item_discounts
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: order_item_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_order_item,
                      references: order_items(id),
                    }
              - column:
                  name: discount_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_discount, references: discounts(id) }
              - column:
                  name: title
                  type: varchar(255)
              - column:
                  name: type
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: currency
                  type: varchar(3)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addForeignKeyConstraint:
            baseColumnNames: discount_id
            baseTableName: order_item_discounts
            constraintName: discounts
            onDelete: "SET NULL"
            referencedColumnNames: id
            referencedTableName: discounts
        - createTable:
            tableName: order_item_modifier_options
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: order_item_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_order_item,
                      references: order_items(id),
                    }
              - column:
                  name: modifier_option_id
                  type: uuid
                  constraints:
                    {
                      foreignKeyName: fk_modifier_option,
                      references: modifier_options(id),
                    }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: type
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: price_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: price_currency
                  type: varchar(3)
                  constraints: { nullable: false }
              - column:
                  name: quantity
                  type: number(12,4)
                  defaultValue: 0.0
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addForeignKeyConstraint:
            baseColumnNames: modifier_option_id
            baseTableName: order_item_modifier_options
            constraintName: modifier_options
            onDelete: "SET NULL"
            referencedColumnNames: id
            referencedTableName: modifier_options
        - createTable:
            tableName: order_item_variant_options
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: order_item_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_order_item,
                      references: order_items(id),
                    }
              - column:
                  name: variant_option_id
                  type: uuid
                  constraints:
                    {
                      foreignKeyName: fk_variant_option,
                      references: variant_options(id),
                    }
              - column:
                  name: option_name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: option_type_name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addForeignKeyConstraint:
            baseColumnNames: variant_option_id
            baseTableName: order_item_variant_options
            constraintName: variant_options
            onDelete: "SET NULL"
            referencedColumnNames: id
            referencedTableName: variant_options
        - createTable:
            tableName: order_users
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: order_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_order,
                      references: orders(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: payment_transactions
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: order_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_order,
                      references: orders(id),
                    }
              - column:
                  name: customer_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_customer, references: customers(id) }
              - column:
                  name: type
                  type: varchar(20)
              - column:
                  name: payment_type
                  type: varchar(20)
              - column:
                  name: receipt_number
                  type: varchar(255)
              - column:
                  name: payment_details
                  type: jsonb
              - column:
                  name: paid_at
                  type: datetime
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createIndex:
            columns:
              - column:
                  name: type
            indexName: idx_transaction_type
            tableName: payment_transactions
        - createIndex:
            columns:
              - column:
                  name: payment_type
            indexName: idx_payment_transaction_payment_type
            tableName: payment_transactions
        - createTable:
            tableName: payment_transaction_order_items
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: payment_transaction_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_payment_transaction,
                      references: payment_transactions(id),
                    }
              - column:
                  name: order_item_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_order_item,
                      references: order_items(id),
                    }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: groups
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: customer_groups
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: group_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_group,
                      references: groups(id),
                    }
              - column:
                  name: customer_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_customer,
                      references: customers(id),
                    }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: order_feedbacks
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: order_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_order,
                      references: orders(id),
                    }
              - column:
                  name: customer_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_customer,
                      references: customers(id),
                    }
              - column:
                  name: rating
                  type: int
                  constraints: { nullable: false }
              - column:
                  name: body
                  type: text
                  constraints: { nullable: false }
              - column:
                  name: read
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: received_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: image_uploads
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: urls
                  type: jsonb
              - column:
                  name: file_name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: object_id
                  type: uuid
              - column:
                  name: object_type
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: product_price_history
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: date
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: currency
                  type: varchar(3)
                  constraints: { nullable: false }
              - column:
                  name: prev_price_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: new_price_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: reason
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: notes
                  type: text
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: product_cost_history
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: date
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: currency
                  type: varchar(3)
                  constraints: { nullable: false }
              - column:
                  name: prev_cost_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: new_cost_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: reason
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: notes
                  type: text
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: product_quantity_history
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: order_id
                  type: uuid
                  constraints:
                    {
                      deleteCascade: true,
                      foreignKeyName: fk_order,
                      references: orders(id),
                    }
              - column:
                  name: date
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: prev_quantity_amount
                  type: number(12,4)
                  constraints: { nullable: false }
              - column:
                  name: new_quantity_amount
                  type: number(12,4)
                  constraints: { nullable: false }
              - column:
                  name: new_stock_value_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: new_stock_value_currency
                  type: varchar(3)
                  constraints: { nullable: false }
              - column:
                  name: reason
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: notes
                  type: text
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: location_settings
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: order_routing_bar
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: order_routing_kitchen
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: order_type_dine_in
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: order_type_take_out
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: order_type_delivery_restaurant
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: order_type_in_store
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: order_type_in_store_pick_up
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: order_type_delivery_retail
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: web_storefront_active
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: mobile_storefront_active
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: facebook_storefront_active
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: kitchen_view_active
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: bar_view_active
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: invoices_active
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: discount_below_cost_active
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: cash_drawer_management_active
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: gift_cards_active
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: payment_type_credit_card
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: payment_type_cash
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: payment_type_debit_card
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: payment_type_check
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: payment_type_gift_card
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: payment_type_store_credit
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: payment_type_ebt
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: payment_type_apple_pay
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: tips_enabled
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addUniqueConstraint:
            tableName: location_settings
            columnNames: merchant_id, location_id
        - createTable:
            tableName: location_print_receipts
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: header_color
                  type: varchar(255)
              - column:
                  name: location_name
                  type: varchar(255)
              - column:
                  name: location_address_line_1
                  type: varchar(255)
              - column:
                  name: location_address_line_2
                  type: varchar(255)
              - column:
                  name: location_city
                  type: varchar(255)
              - column:
                  name: location_state
                  type: varchar(255)
              - column:
                  name: location_country
                  type: varchar(255)
              - column:
                  name: location_postal_code
                  type: varchar(255)
              - column:
                  name: include_item_description
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addUniqueConstraint:
            tableName: location_print_receipts
            columnNames: merchant_id, location_id
        - createTable:
            tableName: location_email_receipts
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: header_color
                  type: varchar(255)
              - column:
                  name: location_name
                  type: varchar(255)
              - column:
                  name: location_address_line_1
                  type: varchar(255)
              - column:
                  name: location_address_line_2
                  type: varchar(255)
              - column:
                  name: location_city
                  type: varchar(255)
              - column:
                  name: location_state
                  type: varchar(255)
              - column:
                  name: location_country
                  type: varchar(255)
              - column:
                  name: location_postal_code
                  type: varchar(255)
              - column:
                  name: include_item_description
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: website_url
                  type: varchar(255)
              - column:
                  name: facebook_url
                  type: varchar(255)
              - column:
                  name: twitter_url
                  type: varchar(255)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addUniqueConstraint:
            tableName: location_email_receipts
            columnNames: merchant_id, location_id
        - createTable:
            tableName: shifts
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: start_date
                  type: date
                  constraints: { nullable: false }
              - column:
                  name: end_date
                  type: date
                  constraints: { nullable: false }
              - column:
                  name: start_time
                  type: time
                  constraints: { nullable: false }
              - column:
                  name: end_time
                  type: time
                  constraints: { nullable: false }
              - column:
                  name: unpaid_break_mins
                  type: int
              - column:
                  name: repeat
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: frequency_interval
                  type: varchar(25)
              - column:
                  name: frequency_count
                  type: int
              - column:
                  name: sunday
                  type: boolean
              - column:
                  name: monday
                  type: boolean
              - column:
                  name: tuesday
                  type: boolean
              - column:
                  name: wednesday
                  type: boolean
              - column:
                  name: thursday
                  type: boolean
              - column:
                  name: friday
                  type: boolean
              - column:
                  name: saturday
                  type: boolean
              - column:
                  name: status
                  type: varchar(25)
              - column:
                  name: bg_color
                  type: varchar(255)
              - column:
                  name: send_shift_start_notification
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: notes
                  type: varchar(255)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: time_cards
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: shift_id
                  type: uuid
                  constraints:
                    {
                      deleteCascade: true,
                      foreignKeyName: fk_shift,
                      references: shifts(id),
                    }
              - column:
                  name: delta_mins
                  type: int
                  defaultValueNumeric: "0"
                  constraints: { nullable: false }
              - column:
                  name: total_mins
                  type: int
              - column:
                  name: notes
                  type: varchar(255)
              - column:
                  name: start_at
                  type: datetime
              - column:
                  name: end_at
                  type: datetime
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: time_off_cards
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: paid
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: type
                  type: varchar(25)
              - column:
                  name: notes
                  type: varchar(255)
              - column:
                  name: start_at
                  type: datetime
              - column:
                  name: end_at
                  type: datetime
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: kv_tickets
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: order_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_order,
                      references: orders(id),
                    }
              - column:
                  name: status
                  type: varchar(25)
                  constraints: { nullable: false }
              - column:
                  name: show
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: started_at
                  type: datetime
              - column:
                  name: completed_at
                  type: datetime
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: kv_ticket_order_items
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: kv_ticket_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_kv_ticket,
                      references: kv_tickets(id),
                    }
              - column:
                  name: order_item_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_order_item,
                      references: order_items(id),
                    }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: cash_drawers
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_location, references: locations(id) }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_user, references: users(id) }
              - column:
                  name: currency
                  type: varchar(3)
                  constraints: { nullable: false }
              - column:
                  name: starting_cash_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: ending_cash_amount
                  type: number(12,2)
              - column:
                  name: cash_sales_amount
                  type: number(12,2)
              - column:
                  name: cash_refunds_amount
                  type: number(12,2)
              - column:
                  name: paid_in_and_out_amount
                  type: number(12,2)
              - column:
                  name: expected_amount
                  type: number(12,2)
              - column:
                  name: status
                  type: varchar(10)
                  constraints: { nullable: false }
              - column:
                  name: started_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: ended_at
                  type: datetime
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: cash_drawer_activities
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_user, references: users(id) }
              - column:
                  name: cash_drawer_id
                  type: uuid
                  constraints:
                    {
                      foreignKeyName: fk_cash_drawer,
                      references: cash_drawers(id),
                    }
              - column:
                  name: type
                  type: varchar(10)
                  constraints: { nullable: false }
              - column:
                  name: currency
                  type: varchar(3)
                  constraints: { nullable: false }
              - column:
                  name: pay_in_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: pay_out_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: current_balance_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: timestamp
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: notes
                  type: varchar(255)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: loyalty_programs
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: type
                  type: varchar(30)
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.entities.enums.LoyaltyProgramType"
              - column:
                  name: points
                  type: int
                  defaultValueNumeric: "0"
                  constraints: { nullable: false }
              - column:
                  name: spend_amount_for_points
                  type: number(12,2)
              - column:
                  name: signup_reward_enabled
                  type: boolean
                  defaultValueBoolean: false
              - column:
                  name: signup_reward_points
                  type: int
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: loyalty_program_locations
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: loyalty_program_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_loyalty_program,
                      references: loyalty_programs(id),
                    }
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: loyalty_rewards
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: loyalty_program_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_loyalty_program,
                      references: loyalty_programs(id),
                    }
              - column:
                  name: type
                  type: varchar(30)
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.entities.enums.RewardType"
              - column:
                  name: points
                  type: int
                  defaultValueNumeric: "0"
                  constraints: { nullable: false }
              - column:
                  name: currency
                  type: varchar(3)
              - column:
                  name: amount
                  type: number(12,2)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: loyalty_reward_products
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: loyalty_reward_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_loyalty_reward,
                      references: loyalty_rewards(id),
                    }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: customer_loyalty_programs
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: customer_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_customer,
                      references: customers(id),
                    }
              - column:
                  name: loyalty_program_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_loyalty_program,
                      references: loyalty_programs(id),
                    }
              - column:
                  name: pass_public_url
                  type: varchar(255)
              - column:
                  name: points
                  type: int
                  constraints: { nullable: false }
                  defaultValueNumeric: "0"
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: customer_loyalty_program_history
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: customer_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_customer,
                      references: customers(id),
                    }
              - column:
                  name: loyalty_program_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_loyalty_program,
                      references: loyalty_programs(id),
                    }
              - column:
                  name: order_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_order,
                      references: orders(id),
                    }
              - column:
                  name: loyalty_reward_id
                  type: uuid
                  constraints:
                    {
                      deleteCascade: true,
                      foreignKeyName: fk_loyalty_reward,
                      references: loyalty_rewards(id),
                    }
              - column:
                  name: points
                  type: int
                  constraints: { nullable: false }
                  defaultValueNumeric: "0"
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: customer_loyalty_rewards
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: customer_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_customer,
                      references: customers(id),
                    }
              - column:
                  name: loyalty_program_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_loyalty_program,
                      references: loyalty_programs(id),
                    }
              - column:
                  name: order_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_order,
                      references: orders(id),
                    }
              - column:
                  name: customer_loyalty_program_history_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_customer_loyalty_program_history,
                      references: customer_loyalty_program_history(id),
                    }
              - column:
                  name: points_spent
                  type: int
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
  - changeSet:
      id: 2
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: users
            columns:
              - column:
                  name: is_owner
                  type: boolean
                  value: false
                  defaultValueBoolean: false
                  constraints: { nullable: false }
  - changeSet:
      id: 3
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - createTable:
            tableName: admins
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: first_name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: last_name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: email
                  type: varchar(255)
                  constraints: { nullable: false, unique: true }
              - column:
                  name: password
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: last_login_at
                  type: datetime
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
  - changeSet:
      id: 4
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: location_settings
            columns:
              - column:
                  name: currency
                  type: varchar(3)
                  value: USD
                  defaultValue: USD
                  constraints: { nullable: false }
  - changeSet:
      id: 5
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropColumn:
            tableName: orders
            columnName: receipt_number
        - dropColumn:
            tableName: payment_transactions
            columnName: receipt_number
  - changeSet:
      id: 6
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              update cash_drawers set status = 'started' where status = 'open';
              update cash_drawers set status = 'ended' where status = 'closed';
  - changeSet:
      id: 7
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - createTable:
            tableName: sessions
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: jti
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: source
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: admin_id
                  type: uuid
                  constraints:
                    {
                      deleteCascade: true,
                      foreignKeyName: fk_admin,
                      references: admins(id),
                    }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addUniqueConstraint:
            tableName: sessions
            columnNames: user_id, jti, source, admin_id
  - changeSet:
      id: 8
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropForeignKeyConstraint:
            baseTableName: customer_loyalty_rewards
            constraintName: fk_customer_loyalty_program_history
        - renameTable:
            oldTableName: customer_loyalty_program_history
            newTableName: customer_loyalty_program_order
        - renameColumn:
            tableName: customer_loyalty_rewards
            oldColumnName: customer_loyalty_program_history_id
            newColumnName: customer_loyalty_program_order_id
        - addForeignKeyConstraint:
            baseColumnNames: customer_loyalty_program_order_id
            baseTableName: customer_loyalty_rewards
            constraintName: fk_customer_loyalty_program_order
            onDelete: CASCADE
            referencedColumnNames: id
            referencedTableName: customer_loyalty_program_order
  - changeSet:
      id: 9
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: loyalty_programs
            columns:
              - column:
                  name: active
                  type: boolean
                  defaultValue: false
                  constraints: { nullable: false }
  - changeSet:
      id: 10
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: customer_loyalty_programs
            columns:
              - column:
                  name: merchant_opt_in_at
                  type: datetime
              - column:
                  name: customer_opt_in_at
                  type: datetime
  - changeSet:
      id: 11
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropColumn:
            tableName: loyalty_program_locations
            columnName: active
  - changeSet:
      id: 12
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropForeignKeyConstraint:
            baseTableName: loyalty_program_locations
            constraintName: fk_loyalty_program
        - addForeignKeyConstraint:
            baseColumnNames: loyalty_program_id
            baseTableName: loyalty_program_locations
            constraintName: fk_loyalty_program
            onDelete: CASCADE
            referencedColumnNames: id
            referencedTableName: loyalty_programs
  - changeSet:
      id: 13
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropForeignKeyConstraint:
            baseTableName: product_locations
            constraintName: fk_location
        - addForeignKeyConstraint:
            baseColumnNames: location_id
            baseTableName: product_locations
            constraintName: fk_location
            onDelete: CASCADE
            referencedColumnNames: id
            referencedTableName: locations
  - changeSet:
      id: 14
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - dropColumn:
            tableName: categories
            columnName: avatar_image_url
  - changeSet:
      id: 15
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - createTable:
            tableName: order_item_tax_rates
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: order_item_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_order_item,
                      references: order_items(id),
                    }
              - column:
                  name: tax_rate_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_tax_rate, references: tax_rates(id) }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: value
                  type: number(5,2)
                  constraints: { nullable: false }
              - column:
                  name: apply_to_price
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: order_tax_rates
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: order_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_order,
                      references: orders(id),
                    }
              - column:
                  name: tax_rate_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_tax_rate, references: tax_rates(id) }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: value
                  type: number(5,2)
                  constraints: { nullable: false }
              - column:
                  name: total_amount
                  type: number(5,2)
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
  - changeSet:
      id: 16
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - createTable:
            tableName: purchase_orders
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: supplier_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_supplier,
                      references: suppliers(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: number
                  type: int
                  constraints: { nullable: false }
              - column:
                  name: payment_status
                  type: varchar(30)
                  remarks: "io.paytouch.core.data.model.enums.PurchaseOrderPaymentStatus"
              - column:
                  name: payment_method
                  type: varchar(30)
                  remarks: "io.paytouch.core.data.model.enums.PurchaseOrderPaymentMethod"
              - column:
                  name: payment_due_date
                  type: datetime
              - column:
                  name: expected_delivery_date
                  type: datetime
              - column:
                  name: status
                  type: varchar(30)
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.data.model.enums.PurchaseOrderStatus"
              - column:
                  name: notes
                  type: varchar(255)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: receiving_orders
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: receiving_object_type
                  type: varchar(30)
                  remarks: "io.paytouch.core.data.model.enums.ReceivingOrderObjectType"
              - column:
                  name: receiving_object_id
                  type: uuid
              - column:
                  name: status
                  type: varchar(30)
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.data.model.enums.ReceivingOrderStatus"
              - column:
                  name: number
                  type: int
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: transfer_orders
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: from_location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_from_location,
                      references: locations(id),
                    }
              - column:
                  name: to_location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_to_location,
                      references: locations(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: number
                  type: int
                  constraints: { nullable: false }
              - column:
                  name: notes
                  type: varchar(255)
              - column:
                  name: status
                  type: varchar(30)
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.data.model.enums.TransferOrderStatus"
              - column:
                  name: type
                  type: varchar(30)
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.data.model.enums.TransferOrderType"
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: receiving_order_products
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: receiving_order_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_receiving_order,
                      references: receiving_orders(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: quantity
                  type: number(12,4)
              - column:
                  name: cost_amount
                  type: number(12,2)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: purchase_order_products
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: purchase_order_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_purchase_order,
                      references: purchase_orders(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: quantity
                  type: number(12,4)
              - column:
                  name: cost_amount
                  type: number(12,2)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: transfer_order_products
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: transfer_order_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_transfer_order,
                      references: transfer_orders(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: quantity
                  type: number(12,4)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: returns
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: supplier_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_supplier,
                      references: suppliers(id),
                    }
              - column:
                  name: number
                  type: int
              - column:
                  name: notes
                  type: varchar(255)
              - column:
                  name: status
                  type: varchar(30)
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.data.model.enums.ReturnStatus"
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: return_products
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: return_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_returns,
                      references: returns(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: quantity
                  type: number(12,4)
              - column:
                  name: reason
                  type: varchar(30)
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.data.model.enums.ReturnReason"
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: comments
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: object_id
                  type: uuid
                  constraints: { nullable: false }
              - column:
                  name: object_type
                  type: varchar(30)
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.data.model.enums.CommentType"
              - column:
                  name: body
                  type: text
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
  - changeSet:
      id: 17
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: locations
            columns:
              - column:
                  name: next_order_number
                  type: int
                  defaultValueNumeric: 1
                  constraints: { nullable: false }
  - changeSet:
      id: 18
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - modifyDataType:
            tableName: purchase_orders
            columnName: number
            newDataType: varchar(255)
        - modifyDataType:
            tableName: receiving_orders
            columnName: number
            newDataType: varchar(255)
        - modifyDataType:
            tableName: transfer_orders
            columnName: number
            newDataType: varchar(255)
        - modifyDataType:
            tableName: returns
            columnName: number
            newDataType: varchar(255)
  - changeSet:
      id: 19
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - createTable:
            tableName: sequence_next_numbers
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: scope_type
                  type: varchar(30)
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.data.model.enums.ScopeType"
              - column:
                  name: scope_id
                  type: uuid
                  constraints: { nullable: false }
              - column:
                  name: type
                  type: varchar(30)
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.data.model.enums.NextNumberType"
              - column:
                  name: next_val
                  type: int
                  defaultValueNumeric: "1"
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - dropColumn:
            tableName: locations
            columnName: next_order_number
  - changeSet:
      id: 20
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropColumn:
            tableName: location_settings
            columnName: currency
        - addColumn:
            tableName: locations
            columns:
              - column:
                  name: currency
                  type: varchar(3)
                  value: USD
                  defaultValue: USD
                  constraints: { nullable: false }
  - changeSet:
      id: 21
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropDefaultValue:
            tableName: locations
            columnName: currency
  - changeSet:
      id: 22
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: purchase_order_products
            columns:
              - column:
                  name: currency
                  type: varchar(3)
  - changeSet:
      id: 23
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: receiving_order_products
            columns:
              - column:
                  name: currency
                  type: varchar(3)
  - changeSet:
      id: 23
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - renameTable:
            oldTableName: kv_tickets
            newTableName: order_routing_tickets
        - addColumn:
            tableName: order_routing_tickets
            columns:
              - column:
                  name: routing_destination
                  type: varchar(255)
                  value: kitchen
                  defaultValue: kitchen
                  constraints: { nullable: false }
        - addColumn:
            tableName: users
            columns:
              - column:
                  name: bar_view_last_login_at
                  type: datetime
        - addColumn:
            tableName: user_roles
            columns:
              - column:
                  name: has_bar_view_access
                  type: boolean
                  value: true
                  defaultValueBoolean: false
                  constraints: { nullable: false }
  - changeSet:
      id: 24
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - renameTable:
            oldTableName: kv_ticket_order_items
            newTableName: order_routing_ticket_order_items
        - renameColumn:
            tableName: order_routing_ticket_order_items
            oldColumnName: kv_ticket_id
            newColumnName: order_routing_ticket_id
        - dropForeignKeyConstraint:
            baseTableName: order_routing_ticket_order_items
            constraintName: fk_order_item
        - addForeignKeyConstraint:
            baseColumnNames: order_item_id
            baseTableName: order_routing_ticket_order_items
            constraintName: fk_order_item
            onDelete: CASCADE
            referencedColumnNames: id
            referencedTableName: order_items
        - dropForeignKeyConstraint:
            baseTableName: order_routing_ticket_order_items
            constraintName: fk_kv_ticket
        - addForeignKeyConstraint:
            baseColumnNames: order_routing_ticket_id
            baseTableName: order_routing_ticket_order_items
            constraintName: fk_tiket
            referencedColumnNames: id
            referencedTableName: order_routing_tickets
  - changeSet:
      id: 25
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - dropForeignKeyConstraint:
            baseTableName: users
            constraintName: user_roles
        - addForeignKeyConstraint:
            baseColumnNames: user_role_id
            baseTableName: users
            constraintName: fk_user_role
            onDelete: "SET NULL"
            referencedColumnNames: id
            referencedTableName: user_roles
        - dropForeignKeyConstraint:
            baseTableName: order_item_discounts
            constraintName: fk_discount
        - dropForeignKeyConstraint:
            baseTableName: order_item_discounts
            constraintName: discounts
        - addForeignKeyConstraint:
            baseColumnNames: discount_id
            baseTableName: order_item_discounts
            constraintName: fk_discount
            onDelete: "SET NULL"
            referencedColumnNames: id
            referencedTableName: discounts
        - dropForeignKeyConstraint:
            baseTableName: order_item_modifier_options
            constraintName: fk_modifier_option
        - dropForeignKeyConstraint:
            baseTableName: order_item_modifier_options
            constraintName: modifier_options
        - addForeignKeyConstraint:
            baseColumnNames: modifier_option_id
            baseTableName: order_item_modifier_options
            constraintName: fk_modifier_option
            onDelete: "SET NULL"
            referencedColumnNames: id
            referencedTableName: modifier_options
        - dropForeignKeyConstraint:
            baseTableName: order_item_variant_options
            constraintName: fk_variant_option
        - dropForeignKeyConstraint:
            baseTableName: order_item_variant_options
            constraintName: variant_options
        - addForeignKeyConstraint:
            baseColumnNames: variant_option_id
            baseTableName: order_item_variant_options
            constraintName: fk_variant_option
            onDelete: "SET NULL"
            referencedColumnNames: id
            referencedTableName: variant_options
  - changeSet:
      id: 26
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - dropForeignKeyConstraint:
            baseTableName: order_item_tax_rates
            constraintName: fk_tax_rate
        - addForeignKeyConstraint:
            baseColumnNames: tax_rate_id
            baseTableName: order_item_tax_rates
            constraintName: fk_tax_rate
            onDelete: "SET NULL"
            referencedColumnNames: id
            referencedTableName: tax_rates
  - changeSet:
      id: 27
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - renameTable:
            oldTableName: returns
            newTableName: return_orders
        - renameTable:
            oldTableName: return_products
            newTableName: return_order_products
        - renameColumn:
            tableName: return_order_products
            oldColumnName: return_id
            newColumnName: return_order_id
        - dropForeignKeyConstraint:
            baseTableName: return_order_products
            constraintName: fk_returns
        - addForeignKeyConstraint:
            baseColumnNames: return_order_id
            baseTableName: return_order_products
            constraintName: fk_return_order
            referencedColumnNames: id
            referencedTableName: return_orders
        - addColumn:
            tableName: return_orders
            columns:
              - column:
                  name: location_id
                  type: uuid
                  constraints: { nullable: false }
  - changeSet:
      id: 28
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - modifyDataType:
            tableName: order_items
            columnName: product_description
            newDataType: text
  - changeSet:
      id: 29
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - renameColumn:
            tableName: users
            oldColumnName: kitchen_view_last_login_at
            newColumnName: tickets_last_login_at
        - dropColumn:
            tableName: users
            columnName: bar_view_last_login_at
        - addColumn:
            tableName: user_roles
            columns:
              - column:
                  name: has_tickets_access
                  type: boolean
                  value: true
                  defaultValueBoolean: false
                  constraints: { nullable: false }
  - changeSet:
      id: 30
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: merchants
            columns:
              - column:
                  name: currency
                  type: varchar(3)
        - sql:
            sql: >
              update merchants set currency = (select currency from locations l where merchants.id = l.merchant_id limit 1);
        - addNotNullConstraint:
            tableName: merchants
            columnDataType: varchar(3)
            columnName: currency
            defaultNullValue: USD
  - changeSet:
      id: 31
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: order_feedbacks
            columns:
              - column:
                  name: location_id
                  type: uuid
        - sql:
            sql: >
              update order_feedbacks set location_id = (select location_id from orders o where order_feedbacks.order_id = o.id);
  - changeSet:
      id: 32
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - createTable:
            tableName: inventory_counts
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: number
                  type: int
                  constraints: { nullable: false }
              - column:
                  name: quantity
                  type: number(12,4)
                  defaultValue: 0.0
              - column:
                  name: quantity_change
                  type: number(12,4)
                  defaultValue: 0.0
              - column:
                  name: value_change_currency
                  type: varchar(3)
              - column:
                  name: value_change_amount
                  type: number(12,2)
              - column:
                  name: status
                  type: varchar(30)
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.data.model.enums.InventoryCountStatus"
              - column:
                  name: synced
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: inventory_count_products
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: inventory_count_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_inventory_count,
                      references: inventory_counts(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: product_name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: expected_quantity
                  type: number(12,4)
                  defaultValue: 0.0
              - column:
                  name: counted_quantity
                  type: number(12,4)
                  defaultValue: 0.0
              - column:
                  name: value_currency
                  type: varchar(3)
              - column:
                  name: value_amount
                  type: number(12,2)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
  - changeSet:
      id: 33
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - modifyDataType:
            tableName: inventory_counts
            columnName: number
            newDataType: text
        - addColumn:
            tableName: inventory_count_products
            columns:
              - column:
                  name: cost_amount
                  type: number(12,2)
              - column:
                  name: value_change_amount
                  type: number(12,2)
  - changeSet:
      id: 34
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropForeignKeyConstraint:
            baseTableName: order_tax_rates
            constraintName: fk_tax_rate
        - addForeignKeyConstraint:
            baseColumnNames: tax_rate_id
            baseTableName: order_tax_rates
            constraintName: fk_tax_rate
            onDelete: "SET NULL"
            referencedColumnNames: id
            referencedTableName: tax_rates
  - changeSet:
      id: 35
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropColumn:
            tableName: inventory_counts
            columnName: quantity
        - dropColumn:
            tableName: inventory_counts
            columnName: quantity_change
        - dropDefaultValue:
            tableName: inventory_counts
            columnName: synced
        - addDefaultValue:
            tableName: inventory_counts
            columnName: synced
            defaultValueBoolean: false
  - changeSet:
      id: 36
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - createTable:
            tableName: product_parts
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: part_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_part,
                      references: products(id),
                    }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: recipe_details
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: makes_quantity
                  type: number(12,4)
                  defaultValue: 0.0
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addColumn:
            tableName: products
            columns:
              - column:
                  name: track_inventory_parts
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: has_parts
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: item_type
                  type: varchar(30)
                  defaultValue: "product"
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.data.model.enums.ProductItemType"
  - changeSet:
      id: 37
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: receiving_orders
            columns:
              - column:
                  name: synced
                  type: boolean
                  value: false
                  defaultValueBoolean: false
                  constraints: { nullable: false }
  - changeSet:
      id: 38
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - renameColumn:
            tableName: products
            oldColumnName: item_type
            newColumnName: article_type
  - changeSet:
      id: 39
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE inventory_counts SET status ='unmatched' WHERE status = 'over' OR status = 'under';
              UPDATE inventory_counts SET status = 'matched' WHERE status = 'match';
  - changeSet:
      id: 40
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - modifyDataType:
            tableName: tax_rates
            columnName: value
            newDataType: numeric(6,3)
        - modifyDataType:
            tableName: order_tax_rates
            columnName: value
            newDataType: numeric(6,3)
        - modifyDataType:
            tableName: order_item_tax_rates
            columnName: value
            newDataType: numeric(6,3)
        - modifyDataType:
            tableName: order_tax_rates
            columnName: total_amount
            newDataType: numeric(12,2)
        - addColumn:
            tableName: merchants
            columns:
              - column:
                  name: creditcall_terminal_id
                  type: varchar(20)
                  defaultValue: "99963178"
        - dropNotNullConstraint:
            tableName: locations
            columnName: email
  - changeSet:
      id: 41
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - dropForeignKeyConstraint:
            baseTableName: order_item_tax_rates
            constraintName: fk_order_item
        - addForeignKeyConstraint:
            baseColumnNames: order_item_id
            baseTableName: order_item_tax_rates
            constraintName: fk_order_item
            onDelete: CASCADE
            referencedColumnNames: id
            referencedTableName: order_items
  - changeSet:
      id: 42
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - renameColumn:
            tableName: products
            oldColumnName: article_type
            newColumnName: scope
  - changeSet:
      id: 43
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: loyalty_programs
            columns:
              - column:
                  name: apple_wallet_template_id
                  type: varchar(20)
              - column:
                  name: android_pay_template_id
                  type: varchar(20)
        - renameColumn:
            tableName: customer_loyalty_programs
            oldColumnName: pass_public_url
            newColumnName: ios_pass_public_url
        - addColumn:
            tableName: customer_loyalty_programs
            columns:
              - column:
                  name: android_pass_public_url
                  type: varchar(255)
  - changeSet:
      id: 44
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE products SET is_variant_of_product_id = id WHERE is_variant_of_product_id IS NULL AND type = 'simple';
  - changeSet:
      id: 45
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE products SET track_inventory=true WHERE id IN (SELECT is_variant_of_product_id FROM products WHERE type='variant' and track_inventory = true)
  - changeSet:
      id: 46
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: order_item_tax_rates
            columns:
              - column:
                  name: total_amount
                  type: number(12,2)
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
        - addColumn:
            tableName: order_item_discounts
            columns:
              - column:
                  name: total_amount
                  type: number(12,2)
  - changeSet:
      id: 47
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - createTable:
            tableName: events
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: data
                  type: jsonb
              - column:
                  name: object
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: action
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: received_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
  - changeSet:
      id: 48
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: recipe_details
            columns:
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
  - changeSet:
      id: 49
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: suppliers
            columns:
              - column:
                  name: deleted_at
                  type: datetime
  - changeSet:
      id: 50
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: order_items
            columns:
              - column:
                  name: calculated_price_amount
                  type: number(12,2)
        - sql:
            sql: >
              UPDATE order_items SET calculated_price_amount=price_amount
  - changeSet:
      id: 51
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropColumn:
            tableName: user_roles
            columnName: has_bar_view_access
        - dropColumn:
            tableName: user_roles
            columnName: has_kitchen_view_access
  - changeSet:
      id: 52
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: location_settings
            columns:
              - column:
                  name: tips_on_device_enabled
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
  - changeSet:
      id: 53
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: product_parts
            columns:
              - column:
                  name: quantity_needed
                  type: number(12,4)
                  defaultValue: 0.0
                  constraints: { nullable: false }
  - changeSet:
      id: 54
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: time_cards
            columns:
              - column:
                  name: unpaid_break_mins
                  type: int
  - changeSet:
      id: 55
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - createTable:
            tableName: exports
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: type
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: status
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: base_url
                  type: varchar(255)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
  - changeSet:
      id: 56
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE OR REPLACE VIEW reports_orders
              AS
                SELECT orders.id AS id,
                       orders.location_id AS location_id,
                       orders.received_at AS received_at,
                       orders.source AS source,
                       orders.type AS type,
                       orders.payment_type AS payment_type,
                       COALESCE(SUM(total_price_table.item_prices), 0) AS total_price,
                       (COALESCE(SUM(profit_table.item_prices), 0) - COALESCE(SUM(profit_table.item_costs), 0)) AS profit,
                       EXTRACT(EPOCH
                               FROM (orders.completed_at - orders.received_at)) AS waiting_time,
                       order_feedbacks.rating AS feedback_rating
                FROM orders
                LEFT OUTER JOIN
                  (SELECT COALESCE(SUM(order_items.quantity * order_items.cost_amount), 0) AS item_costs,
                          COALESCE(SUM(order_items.total_price_amount), 0) AS item_prices,
                          order_items.order_id
                   FROM order_items
                   WHERE order_items.payment_status = 'paid'
                   GROUP BY order_items.order_id) AS total_price_table ON total_price_table.order_id = orders.id
                LEFT OUTER JOIN
                  (SELECT COALESCE(SUM(order_items.quantity * order_items.cost_amount), 0) AS item_costs,
                          COALESCE(SUM(order_items.total_price_amount), 0) AS item_prices,
                          order_items.order_id
                   FROM order_items
                   WHERE order_items.payment_status = 'paid'
                   GROUP BY order_items.order_id) AS profit_table ON profit_table.order_id = orders.id
                LEFT OUTER JOIN order_feedbacks ON order_feedbacks.order_id = orders.id
                WHERE orders.payment_status IN ('paid',
                                              'partially_paid',
                                              'partially_refunded')
                AND orders.is_invoice=FALSE
                GROUP BY orders.id,
                         orders.location_id,
                         orders.received_at,
                         orders.source,
                         orders.type,
                         orders.payment_type,
                         order_feedbacks.rating;
  - changeSet:
      id: 57
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP VIEW reports_orders;
              CREATE OR REPLACE VIEW reports_orders
              AS
                SELECT orders.id AS id,
                       orders.customer_id AS customer_id,
                       orders.location_id AS location_id,
                       orders.received_at AS received_at,
                       orders.source AS source,
                       orders.type AS type,
                       orders.payment_type AS payment_type,
                       COALESCE(SUM(paid_order_items.item_prices), 0) AS total_price,
                       (COALESCE(SUM(paid_order_items.item_prices), 0) - COALESCE(SUM(paid_order_items.item_costs), 0)) AS profit,
                       COALESCE(SUM(paid_order_items.item_costs), 0) AS total_cost,
                       EXTRACT(EPOCH
                               FROM (orders.completed_at - orders.received_at)) AS waiting_time,
                       order_feedbacks.rating AS feedback_rating
                FROM orders
                LEFT OUTER JOIN
                  (SELECT COALESCE(SUM(order_items.quantity * order_items.cost_amount), 0) AS item_costs,
                          COALESCE(SUM(order_items.total_price_amount), 0) AS item_prices,
                          order_items.order_id
                   FROM order_items
                   WHERE order_items.payment_status = 'paid'
                   GROUP BY order_items.order_id) AS paid_order_items ON paid_order_items.order_id = orders.id
                LEFT OUTER JOIN order_feedbacks ON order_feedbacks.order_id = orders.id
                WHERE orders.payment_status IN ('paid',
                                              'partially_paid',
                                              'partially_refunded')
                AND orders.is_invoice=FALSE
                GROUP BY orders.id,
                         orders.customer_id,
                         orders.location_id,
                         orders.received_at,
                         orders.source,
                         orders.type,
                         orders.payment_type,
                         order_feedbacks.rating;
        - sql:
            sql: >
              CREATE OR REPLACE VIEW reports_customers
              AS
                SELECT customer_merchants.customer_id AS id,
                customer_merchants.first_name AS first_name,
                customer_merchants.last_name AS last_name,
                customer_locations.location_id AS location_id,
                customer_locations.customer_id AS customer_id,
                customer_locations.total_spend_amount AS spend,
                (SELECT MIN(reports_orders.received_at) FROM reports_orders WHERE reports_orders.location_id = customer_locations.location_id AND reports_orders.customer_id = customer_locations.customer_id) AS first_order_received_at,
                (SELECT MIN(customer_loyalty_programs.customer_opt_in_at) FROM customer_loyalty_programs WHERE customer_loyalty_programs.customer_id = customer_merchants.customer_id)  AS first_loyalty_opt_in_at
                FROM customer_merchants
                LEFT OUTER JOIN customer_locations ON customer_merchants.customer_id = customer_locations.customer_id;
        - sql:
            sql: >
              CREATE OR REPLACE VIEW reports_order_tax_rates
              AS
                SELECT order_tax_rates.total_amount,
                       order_tax_rates.order_id AS id,
                       order_tax_rates.order_id,
                       tax_rates.name AS name
                FROM order_tax_rates
                LEFT OUTER JOIN tax_rates ON tax_rates.id = order_tax_rates.tax_rate_id;
  - changeSet:
      id: 58
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE OR REPLACE VIEW reports_sales
              AS
                SELECT orders.id AS id,
                       orders.customer_id AS customer_id,
                       orders.location_id AS location_id,
                       orders.received_at AS received_at,
                       orders.source AS source,
                       orders.type AS type,
                       orders.payment_type AS payment_type,
                       COALESCE(SUM(orders.total_amount), 0) AS gross_sales,
                       COALESCE(SUM(orders.discount_amount), 0) AS total_discounts,
                       COALESCE(SUM(orders.tax_amount), 0) AS total_taxes,
                       COALESCE(SUM(orders.tip_amount), 0) AS total_tips,
                       COALESCE(SUM((pt.payment_details::json->>'amount')::float)) AS total_refunds,
                       COALESCE(SUM(orders.total_amount) - SUM((pt.payment_details::json->>'amount')::float), 0) AS net_sales
                FROM orders
                LEFT OUTER JOIN payment_transactions pt ON pt.order_id = orders.id AND pt.type = 'refund'
                WHERE orders.is_invoice=FALSE
                GROUP BY orders.id,
                         orders.customer_id,
                         orders.location_id,
                         orders.received_at,
                         orders.source,
                         orders.type,
                         orders.payment_type;
  - changeSet:
      id: 59
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP VIEW IF EXISTS reports_sales;
              CREATE OR REPLACE VIEW reports_sales
              AS
                SELECT orders.id AS id,
                       orders.customer_id AS customer_id,
                       orders.location_id AS location_id,
                       orders.received_at AS received_at,
                       orders.source AS source,
                       orders.type AS type,
                       orders.payment_type AS payment_type,
                       COALESCE(SUM(orders.total_amount), 0) AS gross_sales,
                       COALESCE(SUM(orders.discount_amount), 0) AS total_discounts,
                       COALESCE(SUM(orders.tax_amount), 0) AS total_taxes,
                       COALESCE(SUM(orders.tip_amount), 0) AS total_tips,
                       COALESCE(SUM((pt.payment_details::json->>'amount')::float), 0) AS total_refunds,
                       COALESCE(SUM(orders.total_amount), 0) - COALESCE(SUM((pt.payment_details::json->>'amount')::float), 0) AS net_sales
                FROM orders
                LEFT OUTER JOIN payment_transactions pt ON pt.order_id = orders.id AND pt.type = 'refund'
                WHERE orders.is_invoice=FALSE
                GROUP BY orders.id,
                         orders.customer_id,
                         orders.location_id,
                         orders.received_at,
                         orders.source,
                         orders.type,
                         orders.payment_type;
  - changeSet:
      id: 60
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE OR REPLACE VIEW reports_orders
              AS
                SELECT orders.id AS id,
                       orders.customer_id AS customer_id,
                       orders.location_id AS location_id,
                       orders.received_at AS received_at,
                       orders.source AS source,
                       orders.type AS type,
                       orders.payment_type AS payment_type,
                       COALESCE(SUM(paid_order_items.item_prices), 0) AS total_price,
                       (COALESCE(SUM(paid_order_items.item_prices), 0) - COALESCE(SUM(paid_order_items.item_costs), 0)) AS profit,
                       COALESCE(SUM(paid_order_items.item_costs), 0) AS total_cost,
                       EXTRACT(EPOCH
                               FROM (orders.completed_at - orders.received_at)) AS waiting_time,
                       order_feedbacks.rating AS feedback_rating,
                       orders.received_at AT TIME ZONE locations.timezone AS received_at_tz
                FROM orders
                LEFT OUTER JOIN
                  (SELECT COALESCE(SUM(order_items.quantity * order_items.cost_amount), 0) AS item_costs,
                          COALESCE(SUM(order_items.total_price_amount), 0) AS item_prices,
                          order_items.order_id
                   FROM order_items
                   WHERE order_items.payment_status = 'paid'
                   GROUP BY order_items.order_id) AS paid_order_items ON paid_order_items.order_id = orders.id
                LEFT OUTER JOIN order_feedbacks ON order_feedbacks.order_id = orders.id
                LEFT OUTER JOIN locations ON locations.id = orders.location_id
                WHERE orders.payment_status IN ('paid',
                                              'partially_paid',
                                              'partially_refunded')
                AND orders.is_invoice=FALSE
                GROUP BY orders.id,
                         orders.customer_id,
                         orders.location_id,
                         orders.received_at,
                         orders.source,
                         orders.type,
                         orders.payment_type,
                         order_feedbacks.rating,
                         locations.timezone;
              CREATE OR REPLACE VIEW reports_sales
              AS
                SELECT orders.id AS id,
                       orders.customer_id AS customer_id,
                       orders.location_id AS location_id,
                       orders.received_at AS received_at,
                       orders.source AS source,
                       orders.type AS type,
                       orders.payment_type AS payment_type,
                       COALESCE(SUM(orders.total_amount), 0) AS gross_sales,
                       COALESCE(SUM(orders.discount_amount), 0) AS total_discounts,
                       COALESCE(SUM(orders.tax_amount), 0) AS total_taxes,
                       COALESCE(SUM(orders.tip_amount), 0) AS total_tips,
                       COALESCE(SUM((pt.payment_details::json->>'amount')::float), 0) AS total_refunds,
                       COALESCE(SUM(orders.total_amount), 0) - COALESCE(SUM((pt.payment_details::json->>'amount')::float), 0) AS net_sales,
                       orders.received_at AT TIME ZONE locations.timezone AS received_at_tz
                FROM orders
                LEFT OUTER JOIN payment_transactions pt ON pt.order_id = orders.id AND pt.type = 'refund'
                LEFT OUTER JOIN locations ON locations.id = orders.location_id
                WHERE orders.is_invoice=FALSE
                GROUP BY orders.id,
                         orders.customer_id,
                         orders.location_id,
                         orders.received_at,
                         orders.source,
                         orders.type,
                         orders.payment_type,
                         locations.timezone;
  - changeSet:
      id: 61
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE OR REPLACE VIEW reports_product_sales
              AS
                SELECT oi.id AS id,
                       oi.merchant_id AS merchant_id,
                       oi.product_id AS product_id,
                       orders.location_id AS location_id,
                       oi.discount_amount,
                       oi.total_price_amount,
                       oi.quantity,
                       oi.tax_amount,
                       SUM(refunds.quantity) AS returned_quantity,
                       SUM(refunds.returned_amount) AS returned_amount,
                       orders.received_at AT TIME ZONE locations.timezone AS received_at_tz
                FROM order_items oi, orders, locations,
                LATERAL (SELECT SUM(quantity) as quantity,
                                SUM(total_price_amount) AS returned_amount
                        FROM order_items oi2
                        WHERE oi2.payment_status = 'refunded'
                        AND oi2.product_id = oi.product_id
                        AND oi2.order_id = oi.order_id
                        ) AS refunds
                WHERE oi.order_id = orders.id
                AND locations.id = orders.location_id
                AND oi.payment_status = 'paid'
                GROUP BY oi.id,
                         oi.merchant_id,
                         oi.product_id,
                         orders.location_id,
                         oi.discount_amount,
                         oi.total_price_amount,
                         oi.quantity,
                         oi.tax_amount,
                         locations.timezone,
                         orders.received_at;
  - changeSet:
      id: 62
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP VIEW IF EXISTS reports_sales;
              CREATE OR REPLACE VIEW reports_sales
              AS
                SELECT orders.id AS id,
                       orders.customer_id AS customer_id,
                       orders.location_id AS location_id,
                       orders.received_at AS received_at,
                       orders.source AS source,
                       orders.type AS type,
                       orders.payment_type AS payment_type,
                       COALESCE(orders.total_amount, 0) AS total_amount,
                       COALESCE(orders.discount_amount, 0) AS discount_amount,
                       COALESCE(orders.tax_amount, 0) AS tax_amount,
                       COALESCE(orders.tip_amount, 0) AS tip_amount,
                       refunds.total AS total_refunds,
                       COALESCE(orders.total_amount, 0) - refunds.total AS net_sales,
                       orders.received_at AT TIME ZONE locations.timezone AS received_at_tz,
                       items.items_cost_amount AS items_cost_amount,
                       items.items_discount_amount AS items_discount_amount,
                       items.non_taxable_amount AS non_taxable_amount,
                       items.items_refunds_amount AS items_refunds_amount,
                       items.taxable_amount AS taxable_amount,
                       items.items_tax_amount AS items_tax_amount
                FROM orders
                LEFT OUTER JOIN locations ON locations.id = orders.location_id
                LEFT OUTER JOIN LATERAL(
                  SELECT
                    COALESCE(SUM((pt.payment_details::json->>'amount')::float), 0) AS total
                  FROM payment_transactions pt
                  WHERE pt.order_id = orders.id AND pt.type = 'refund'
                ) refunds ON true
                LEFT OUTER JOIN LATERAL (
                  SELECT
                    ROUND(SUM(
                       CASE COALESCE(oi.tax_amount, 0) > 0 WHEN TRUE  THEN (oi.calculated_price_amount * oi.quantity)
                                                           WHEN FALSE THEN 0
                       END
                     ), 2) AS taxable_amount,
                     ROUND(SUM(
                       CASE COALESCE(oi.tax_amount, 0) = 0 WHEN TRUE  THEN (oi.calculated_price_amount * oi.quantity)
                                                           WHEN FALSE THEN 0
                       END
                     ), 2) AS non_taxable_amount,
                     ROUND(SUM(COALESCE(oi.tax_amount,0)), 2) AS items_tax_amount,
                     ROUND(SUM(COALESCE(oi.discount_amount,0)), 2) AS items_discount_amount,
                     ROUND(SUM(
                       CASE oi.payment_status = 'refunded' WHEN TRUE  THEN (oi.calculated_price_amount * oi.quantity)
                                                           WHEN FALSE THEN 0
                       END
                     ), 2) AS items_refunds_amount,
                     ROUND(SUM(
                       CASE oi.payment_status <> 'refunded' WHEN TRUE  THEN (oi.cost_amount * oi.quantity)
                                                            WHEN FALSE THEN 0
                       END
                     ), 2) AS items_cost_amount
                  FROM order_items oi
                  WHERE oi.order_id = orders.id
                ) items ON true
                WHERE orders.is_invoice=FALSE;
  - changeSet:
      id: 63
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP VIEW IF EXISTS reports_product_sales;
              CREATE OR REPLACE VIEW reports_product_sales
              AS
                SELECT   oi.id              AS id,
                         oi.merchant_id     AS merchant_id,
                         oi.product_id      AS product_id,
                         orders.location_id AS location_id,
                         oi.total_price_amount,
                         oi.quantity,
                         SUM(refunds.quantity)                              AS returned_quantity,
                         SUM(refunds.returned_amount)                       AS returned_amount,
                         orders.received_at at time zone locations.timezone AS received_at_tz,
                         ROUND(
                         CASE COALESCE(oi.tax_amount, 0) > 0
                                  WHEN true THEN (oi.calculated_price_amount * oi.quantity)
                                  WHEN false THEN 0
                         END , 2) AS taxable_amount,
                         ROUND(
                         CASE COALESCE(oi.tax_amount, 0) = 0
                                  WHEN true THEN (oi.calculated_price_amount * oi.quantity)
                                  WHEN false THEN 0
                         END , 2)                                 AS non_taxable_amount,
                         ROUND(COALESCE(oi.tax_amount,0), 2)      AS tax_amount,
                         ROUND(COALESCE(oi.discount_amount,0), 2) AS discount_amount,
                         ROUND(
                         CASE oi.payment_status <> 'refunded'
                                  WHEN true THEN (oi.cost_amount * oi.quantity)
                                  WHEN false THEN 0
                         END , 2) AS cost_amount
                FROM     order_items oi,
                         orders,
                         locations,
                         LATERAL
                         (
                                SELECT SUM(quantity)           AS quantity,
                                       SUM(total_price_amount) AS returned_amount
                                FROM   order_items oi2
                                WHERE  oi2.payment_status = 'refunded'
                                AND    oi2.product_id = oi.product_id
                                AND    oi2.order_id = oi.order_id ) AS refunds
                WHERE    oi.order_id = orders.id
                AND      locations.id = orders.location_id
                AND      oi.payment_status = 'paid'
                GROUP BY oi.id,
                         oi.merchant_id,
                         oi.product_id,
                         orders.location_id,
                         oi.discount_amount,
                         oi.total_price_amount,
                         oi.quantity,
                         oi.tax_amount,
                         locations.timezone,
                         orders.received_at;
  - changeSet:
      id: 64
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: receiving_orders
            columns:
              - column:
                  name: invoice_number
                  type: varchar(255)
              - column:
                  name: payment_status
                  type: varchar(30)
                  remarks: "io.paytouch.core.data.model.enums.ReceivingOrderPaymentStatus"
              - column:
                  name: payment_method
                  type: varchar(30)
                  remarks: "io.paytouch.core.data.model.enums.ReceivingOrderPaymentMethod"
              - column:
                  name: payment_due_date
                  type: datetime
        - addColumn:
            tableName: purchase_orders
            columns:
              - column:
                  name: invoice_number
                  type: varchar(255)
  - changeSet:
      id: 65
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: merchants
            columns:
              - column:
                  name: creditcall_transaction_key
                  type: varchar(255)
                  value: "3VW4jG4TDAy6TVrT"
        - dropDefaultValue:
            tableName: merchants
            columnName: creditcall_terminal_id
  - changeSet:
      id: 66
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - createTable:
            tableName: order_discounts
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: order_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_order,
                      references: orders(id),
                    }
              - column:
                  name: discount_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_discount, references: discounts(id) }
              - column:
                  name: title
                  type: varchar(255)
              - column:
                  name: type
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: total_amount
                  type: number(12,2)
              - column:
                  name: currency
                  type: varchar(3)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addForeignKeyConstraint:
            baseColumnNames: discount_id
            baseTableName: order_discounts
            constraintName: discounts
            onDelete: "SET NULL"
            referencedColumnNames: id
            referencedTableName: discounts
        - addColumn:
            tableName: orders
            columns:
              - column:
                  name: ticket_discount_amount
                  type: number(12,2)
  - changeSet:
      id: 67
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP VIEW IF EXISTS reports_product_sales CASCADE;
              CREATE OR REPLACE VIEW reports_product_sales
              AS
                SELECT   oi.id              AS id,
                         oi.merchant_id     AS merchant_id,
                         oi.product_id      AS product_id,
                         oi.order_id        AS order_id,
                         oi.quantity        AS quantity,
                         orders.location_id AS location_id,
                         returned_quantity,
                         returned_amount,
                         orders.received_at at time zone locations.timezone AS received_at_tz,
                         ROUND(
                           CASE COALESCE(oi.tax_amount, 0) > 0 WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                                               WHEN FALSE THEN 0
                           END, 2) AS taxable_amount,
                         ROUND(
                           CASE COALESCE(oi.tax_amount, 0) = 0 WHEN TRUE  THEN oi.total_price_amount
                                                               WHEN FALSE THEN 0
                           END, 2) AS non_taxable_amount,
                         ROUND(COALESCE(oi.tax_amount, 0), 2)      AS tax_amount,
                         ROUND(COALESCE(oi.discount_amount, 0), 2) AS discount_amount,
                         ROUND(COALESCE(oi.cost_amount * oi.quantity, 0), 2) AS cogs_amount,
                         ROUND(COALESCE(oi.total_price_amount - oi.tax_amount, 0), 2) AS gross_sale_amount
                FROM     order_items oi,
                         orders,
                         locations,
                         LATERAL
                         (
                                SELECT SUM(quantity)           AS returned_quantity,
                                       SUM(total_price_amount) AS returned_amount
                                FROM   order_items oi2
                                WHERE  oi2.payment_status = 'refunded'
                                AND    oi2.product_id = oi.product_id
                                AND    oi2.order_id = oi.order_id ) AS refunds
                WHERE    oi.order_id = orders.id
                AND      locations.id = orders.location_id
                AND      oi.payment_status = 'paid';
        - sql:
            sql: >
              DROP VIEW IF EXISTS reports_sales CASCADE;
              CREATE OR REPLACE VIEW reports_sales
              AS
                SELECT orders.id AS id,
                       orders.merchant_id AS merchant_id,
                       orders.customer_id AS customer_id,
                       orders.location_id AS location_id,
                       orders.received_at AS received_at,
                       orders.source AS source,
                       orders.type AS type,
                       orders.payment_type AS payment_type,
                       gross_sale_amount,
                       net_sale_amount,
                       gross_profit_amount,
                       total_discount_amount,
                       COALESCE(orders.tip_amount, 0) AS tip_amount,
                       refunds_amount,
                       orders.received_at AT TIME ZONE locations.timezone AS received_at_tz,
                       cogs_amount,
                       non_taxable_amount,
                       taxable_amount,
                       collected_tax_amount
                FROM orders
                LEFT OUTER JOIN locations ON locations.id = orders.location_id
                JOIN LATERAL(
                  SELECT
                    COALESCE(SUM((pt.payment_details::json->>'amount')::float), 0) AS refunds_amount
                  FROM payment_transactions pt
                  WHERE pt.order_id = orders.id AND pt.type = 'refund'
                ) refunds ON true
                JOIN LATERAL (
                  SELECT
                    ROUND(SUM(rps.taxable_amount), 2) AS taxable_amount,
                    ROUND(SUM(rps.non_taxable_amount), 2) AS non_taxable_amount,
                    ROUND(SUM(rps.cogs_amount), 2) AS cogs_amount,
                    ROUND(SUM(rps.discount_amount), 2) AS discount_amount,
                    ROUND(SUM(rps.tax_amount), 2) AS collected_tax_amount
                  FROM reports_product_sales rps
                  WHERE rps.order_id = orders.id
                ) paid_items ON true
                JOIN LATERAL (SELECT COALESCE(orders.total_amount, 0) - COALESCE(orders.tax_amount, 0) - COALESCE(orders.tip_amount, 0) AS gross_sale_amount) gsa ON true
                JOIN LATERAL (SELECT gross_sale_amount - refunds_amount AS net_sale_amount) nsa ON true
                JOIN LATERAL (SELECT net_sale_amount - cogs_amount AS gross_profit_amount) gpa ON true
                JOIN LATERAL (SELECT paid_items.discount_amount + COALESCE(orders.ticket_discount_amount, 0) AS total_discount_amount) tda ON true
                WHERE orders.is_invoice=FALSE
                  AND orders.payment_status IN ('paid',
                                                'partially_paid',
                                                'partially_refunded');
  - changeSet:
      id: 68
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP VIEW reports_order_tax_rates;
              CREATE OR REPLACE VIEW reports_order_tax_rates
              AS
                SELECT order_tax_rates.total_amount,
                       order_tax_rates.order_id,
                       tax_rates.name AS name,
                       tax_rates.id AS tax_rate_id,
                       tax_rates.merchant_id AS merchant_id,
                       tax_rates.merchant_id AS id
                FROM order_tax_rates
                LEFT OUTER JOIN tax_rates ON tax_rates.id = order_tax_rates.tax_rate_id;
        - sql:
            sql: >
              CREATE OR REPLACE VIEW reports_orders
              AS
                SELECT orders.id AS id,
                       orders.customer_id AS customer_id,
                       orders.location_id AS location_id,
                       orders.received_at AS received_at,
                       orders.source AS source,
                       orders.type AS type,
                       orders.payment_type AS payment_type,
                       COALESCE(SUM(paid_order_items.item_prices), 0) AS total_price,
                       (COALESCE(SUM(paid_order_items.item_prices), 0) - COALESCE(SUM(paid_order_items.item_costs), 0)) AS profit,
                       COALESCE(SUM(paid_order_items.item_costs), 0) AS total_cost,
                       EXTRACT(EPOCH
                               FROM (orders.completed_at - orders.received_at)) AS waiting_time,
                       order_feedbacks.rating AS feedback_rating,
                       orders.received_at AT TIME ZONE locations.timezone AS received_at_tz,
                       orders.merchant_id AS merchant_id
                FROM orders
                LEFT OUTER JOIN
                  (SELECT COALESCE(SUM(order_items.quantity * order_items.cost_amount), 0) AS item_costs,
                          COALESCE(SUM(order_items.total_price_amount), 0) AS item_prices,
                          order_items.order_id
                   FROM order_items
                   WHERE order_items.payment_status = 'paid'
                   GROUP BY order_items.order_id) AS paid_order_items ON paid_order_items.order_id = orders.id
                LEFT OUTER JOIN order_feedbacks ON order_feedbacks.order_id = orders.id
                LEFT OUTER JOIN locations ON locations.id = orders.location_id
                WHERE orders.payment_status IN ('paid',
                                              'partially_paid',
                                              'partially_refunded')
                AND orders.is_invoice=FALSE
                GROUP BY orders.id,
                         orders.customer_id,
                         orders.location_id,
                         orders.received_at,
                         orders.source,
                         orders.type,
                         orders.payment_type,
                         order_feedbacks.rating,
                         locations.timezone;
        - sql:
            sql: >
              CREATE OR REPLACE VIEW reports_customers
              AS
                SELECT customer_merchants.customer_id AS id,
                customer_merchants.first_name AS first_name,
                customer_merchants.last_name AS last_name,
                customer_locations.location_id AS location_id,
                customer_locations.customer_id AS customer_id,
                customer_locations.total_spend_amount AS spend,
                first_order_received_at,
                (SELECT MIN(customer_loyalty_programs.customer_opt_in_at) FROM customer_loyalty_programs WHERE customer_loyalty_programs.customer_id = customer_merchants.customer_id)  AS first_loyalty_opt_in_at,
                customer_merchants.merchant_id AS merchant_id
                FROM customer_merchants
                LEFT OUTER JOIN customer_locations ON customer_merchants.customer_id = customer_locations.customer_id
                JOIN LATERAL (
                  SELECT MIN(reports_orders.received_at) AS first_order_received_at
                  FROM reports_orders
                  WHERE reports_orders.location_id = customer_locations.location_id AND reports_orders.customer_id = customer_locations.customer_id
                ) related_orders ON true
  - changeSet:
      id: 69
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE products
              SET    deleted_at = now()
              WHERE  id IN (SELECT id
                            FROM   products
                            WHERE  id NOT IN (SELECT p.id
                                              FROM   products p,
                                                     product_variant_options pvo
                                              WHERE  p.id = pvo.product_id)
                                   AND type = 'variant'
                                   AND deleted_at IS NULL);
  - changeSet:
      id: 70
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE products
              SET    updated_at = now()
              WHERE  id IN (SELECT product_id
                            FROM   variant_options
                            WHERE  id NOT IN (SELECT vo.id
                                              FROM   variant_options vo,
                                                     product_variant_options pvo
                                              WHERE  vo.id = pvo.variant_option_id));
        - sql:
            sql: >
              DELETE FROM variant_options
              WHERE  id IN (SELECT id
                            FROM   variant_options
                            WHERE  id NOT IN (SELECT vo.id
                                              FROM   variant_options vo,
                                                     product_variant_options pvo
                                              WHERE  vo.id = pvo.variant_option_id));
  - changeSet:
      id: 71
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE products
              SET    updated_at = now()
              WHERE  id IN (SELECT vo.product_id
                            FROM   variant_options vo
                            WHERE  vo.id NOT IN (SELECT pvo.variant_option_id
                                              FROM   product_variant_options pvo,
                                                     products p
                                              WHERE  pvo.product_id = p.id
                                                     AND p.deleted_at IS NULL));
        - sql:
            sql: >
              DELETE FROM variant_options
              WHERE  id NOT IN (SELECT pvo.variant_option_id
                                FROM   product_variant_options pvo,
                                       products p
                                WHERE  pvo.product_id = p.id
                                       AND p.deleted_at IS NULL);
  - changeSet:
      id: 72
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_all_orders_func(merchant_id uuid, location_ids uuid[])
              RETURNS TABLE (id uuid,
                             customer_id uuid,
                             location_id uuid,
                             received_at timestamptz,
                             merchant_id uuid)
              AS $body$
                  SELECT          orders.id                                                                                        AS id,
                                  orders.customer_id                                                                               AS customer_id,
                                  orders.location_id                                                                               AS location_id,
                                  orders.received_at                                                                               AS received_at,
                                  orders.merchant_id                                                                               AS merchant_id
                  FROM            orders
                  WHERE           orders.payment_status IN ('paid',
                                                            'partially_paid',
                                                            'partially_refunded')
                  AND             orders.is_invoice=false
                  AND             orders.merchant_id = $1
                  AND             orders.location_id = ANY ($2)
                  GROUP BY        orders.id,
                                  orders.customer_id,
                                  orders.location_id,
                                  orders.received_at
              $body$
              language sql;
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_orders_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             customer_id uuid,
                             location_id uuid,
                             received_at timestamptz,
                             source varchar,
                             type varchar,
                             payment_type varchar,
                             total_price numeric,
                             profit numeric,
                             total_cost numeric,
                             waiting_time double precision,
                             feedback_rating int,
                             received_at_tz timestamp,
                             merchant_id uuid)
              AS $body$
                  SELECT          orders.id                                                                                        AS id,
                                  orders.customer_id                                                                               AS customer_id,
                                  orders.location_id                                                                               AS location_id,
                                  orders.received_at                                                                               AS received_at,
                                  orders.source                                                                                    AS source,
                                  orders.type                                                                                      AS type,
                                  orders.payment_type                                                                              AS payment_type,
                                  COALESCE(SUM(paid_order_items.item_prices), 0)                                                   AS total_price,
                                  (COALESCE(SUM(paid_order_items.item_prices), 0) - COALESCE(Sum(paid_order_items.item_costs), 0)) AS profit,
                                  COALESCE(SUM(paid_order_items.item_costs), 0)                                                    AS total_cost,
                                  EXTRACT(EPOCH FROM (orders.completed_at - orders.received_at))                                   AS waiting_time,
                                  order_feedbacks.rating                                                                           AS feedback_rating,
                                  orders.received_at at time zone locations.timezone                                               AS received_at_tz,
                                  orders.merchant_id                                                                               AS merchant_id
                  FROM            orders
                  LEFT OUTER JOIN
                                  (
                                           SELECT   COALESCE(SUM(order_items.quantity * order_items.cost_amount), 0) AS item_costs,
                                                    COALESCE(SUM(order_items.total_price_amount), 0)                 AS item_prices,
                                                    order_items.order_id
                                           FROM     order_items
                                           WHERE    order_items.payment_status = 'paid'
                                           GROUP BY order_items.order_id) AS paid_order_items
                  ON              paid_order_items.order_id = orders.id
                  LEFT OUTER JOIN order_feedbacks
                  ON              order_feedbacks.order_id = orders.id
                  LEFT OUTER JOIN locations
                  ON              locations.id = orders.location_id
                  WHERE           orders.payment_status IN ('paid',
                                                            'partially_paid',
                                                            'partially_refunded')
                  AND             orders.is_invoice=false
                  AND             orders.merchant_id = $1
                  AND             orders.location_id = ANY ($2)
                  AND             orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
                  GROUP BY        orders.id,
                                  orders.customer_id,
                                  orders.location_id,
                                  orders.received_at,
                                  orders.source,
                                  orders.type,
                                  orders.payment_type,
                                  order_feedbacks.rating,
                                  locations.timezone
              $body$
              language sql;
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_customers_func(merchant_id uuid, location_ids uuid[])
              RETURNS TABLE (id uuid,
                             first_name varchar,
                             last_name varchar,
                             location_id uuid,
                             customer_id uuid,
                             spend numeric,
                             first_order_received_at timestamptz,
                             first_loyalty_opt_in_at timestamp,
                             merchant_id uuid)
              AS $body$
                  SELECT          customer_merchants.customer_id        AS id,
                                  customer_merchants.first_name         AS first_name,
                                  customer_merchants.last_name          AS last_name,
                                  customer_locations.location_id        AS location_id,
                                  customer_locations.customer_id        AS customer_id,
                                  customer_locations.total_spend_amount AS spend,
                                  first_order_received_at,
                                  (
                                         SELECT MIN(customer_loyalty_programs.customer_opt_in_at)
                                         FROM   customer_loyalty_programs
                                         WHERE  customer_loyalty_programs.customer_id = customer_merchants.customer_id) AS first_loyalty_opt_in_at,
                                  customer_merchants.merchant_id                                                        AS merchant_id
                  FROM            customer_merchants
                  LEFT OUTER JOIN customer_locations
                  ON              customer_merchants.customer_id = customer_locations.customer_id
                  AND             customer_merchants.merchant_id = $1
                  AND             customer_locations.location_id = ANY ($2)
                  JOIN            lateral
                                  (
                                         SELECT MIN(reports_orders.received_at) AS first_order_received_at
                                         FROM   reports_all_orders_func($1, $2) AS reports_orders
                                         WHERE  reports_orders.location_id = customer_locations.location_id
                                         AND    reports_orders.customer_id = customer_locations.customer_id ) related_orders
                  ON              true
              $body$
              language sql;
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_order_tax_rates_func(merchant_id uuid)
              RETURNS TABLE (total_amount numeric,
                             order_id uuid,
                             name varchar,
                             tax_rate_id uuid,
                             merchant_id uuid,
                             id uuid)
              AS $body$
                  SELECT order_tax_rates.total_amount,
                     order_tax_rates.order_id,
                     tax_rates.name        AS name,
                     tax_rates.id          AS tax_rate_id,
                     tax_rates.merchant_id AS merchant_id,
                     tax_rates.merchant_id AS id
                  FROM   order_tax_rates
                  LEFT OUTER JOIN tax_rates
                  ON tax_rates.id = order_tax_rates.tax_rate_id
                  AND tax_rates.merchant_id = $1
              $body$
              language sql;
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             product_id uuid,
                             order_id uuid,
                             quantity numeric,
                             location_id uuid,
                             returned_quantity numeric,
                             returned_amount numeric,
                             received_at_tz timestamp,
                             taxable_amount numeric,
                             non_taxable_amount numeric,
                             tax_amount numeric,
                             discount_amount numeric,
                             cogs_amount numeric,
                             gross_sale_amount numeric)
              AS $body$
                  SELECT   oi.id              AS id,
                           oi.merchant_id     AS merchant_id,
                           oi.product_id      AS product_id,
                           oi.order_id        AS order_id,
                           oi.quantity        AS quantity,
                           orders.location_id AS location_id,
                           returned_quantity,
                           returned_amount,
                           orders.received_at at time zone locations.timezone AS received_at_tz,
                           ROUND(
                             CASE COALESCE(oi.tax_amount, 0) > 0 WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                                                 WHEN FALSE THEN 0
                             END, 2) AS taxable_amount,
                           ROUND(
                             CASE COALESCE(oi.tax_amount, 0) = 0 WHEN TRUE  THEN oi.total_price_amount
                                                                 WHEN FALSE THEN 0
                             END, 2) AS non_taxable_amount,
                           ROUND(COALESCE(oi.tax_amount, 0), 2)      AS tax_amount,
                           ROUND(COALESCE(oi.discount_amount, 0), 2) AS discount_amount,
                           ROUND(COALESCE(oi.cost_amount * oi.quantity, 0), 2) AS cogs_amount,
                           ROUND(COALESCE(oi.total_price_amount - oi.tax_amount, 0), 2) AS gross_sale_amount
                  FROM     order_items oi,
                           orders,
                           locations,
                           LATERAL
                           (
                                  SELECT SUM(quantity)           AS returned_quantity,
                                         SUM(total_price_amount) AS returned_amount
                                  FROM   order_items oi2
                                  WHERE  oi2.payment_status = 'refunded'
                                  AND    oi2.product_id = oi.product_id
                                  AND    oi2.order_id = oi.order_id ) AS refunds
                  WHERE    oi.order_id = orders.id
                  AND      locations.id = orders.location_id
                  AND      oi.payment_status = 'paid'
                  AND      oi.merchant_id = $1
                  AND      orders.location_id = ANY ($2)
                  AND      orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             customer_id uuid,
                             location_id uuid,
                             received_at timestamptz,
                             source varchar,
                             type varchar,
                             payment_type varchar,
                             gross_sale_amount numeric,
                             net_sale_amount double precision,
                             gross_profit_amount double precision,
                             total_discount_amount numeric,
                             tip_amount numeric,
                             refunds_amount double precision,
                             received_at_tz timestamp,
                             cogs_amount numeric,
                             non_taxable_amount numeric,
                             taxable_amount numeric,
                             collected_tax_amount numeric)
              AS $body$
                  SELECT          orders.id           AS id,
                                  orders.merchant_id  AS merchant_id,
                                  orders.customer_id  AS customer_id,
                                  orders.location_id  AS location_id,
                                  orders.received_at  AS received_at,
                                  orders.source       AS source,
                                  orders.type         AS type,
                                  orders.payment_type AS payment_type,
                                  gross_sale_amount,
                                  net_sale_amount,
                                  gross_profit_amount,
                                  total_discount_amount,
                                  COALESCE(orders.tip_amount, 0) AS tip_amount,
                                  refunds_amount,
                                  orders.received_at at time zone locations.timezone AS received_at_tz,
                                  cogs_amount,
                                  non_taxable_amount,
                                  taxable_amount,
                                  collected_tax_amount
                  FROM            orders
                  LEFT OUTER JOIN locations
                  ON              locations.id = orders.location_id
                  JOIN            lateral
                                  (
                                         SELECT COALESCE(sum((pt.payment_details::json->>'amount')::float), 0) AS refunds_amount
                                         FROM   payment_transactions pt
                                         WHERE  pt.order_id = orders.id
                                         AND    pt.type = 'refund' ) refunds
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT round(sum(rps.taxable_amount), 2)     AS taxable_amount,
                                                round(sum(rps.non_taxable_amount), 2) AS non_taxable_amount,
                                                round(sum(rps.cogs_amount), 2)        AS cogs_amount,
                                                round(sum(rps.discount_amount), 2)    AS discount_amount,
                                                round(sum(rps.tax_amount), 2)         AS collected_tax_amount
                                         FROM   reports_product_sales_func($1, $2, $3, $4) AS rps
                                         WHERE  rps.order_id = orders.id ) paid_items
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT COALESCE(orders.total_amount, 0) - COALESCE(orders.tax_amount, 0) - COALESCE(orders.tip_amount, 0) AS gross_sale_amount) gsa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT gross_sale_amount - refunds_amount AS net_sale_amount) nsa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT net_sale_amount - cogs_amount AS gross_profit_amount) gpa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT paid_items.discount_amount + COALESCE(orders.ticket_discount_amount, 0) AS total_discount_amount) tda
                  ON              true
                  WHERE           orders.is_invoice=false
                  AND             orders.payment_status IN ('paid',
                                                            'partially_paid',
                                                            'partially_refunded')
                  AND             orders.merchant_id = $1
                  AND             orders.location_id = ANY ($2)
                  AND             orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;
  - changeSet:
      id: 73
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP VIEW IF EXISTS reports_product_sales CASCADE
        - sql:
            sql: >
              DROP VIEW IF EXISTS reports_sales CASCADE
        - sql:
            sql: >
              DROP VIEW IF EXISTS reports_order_tax_rates CASCADE
        - sql:
            sql: >
              DROP VIEW IF EXISTS reports_orders CASCADE
        - sql:
            sql: >
              DROP VIEW IF EXISTS reports_customers CASCADE
  - changeSet:
      id: 74
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp);
              CREATE OR REPLACE FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             product_id uuid,
                             is_variant_of_product_id uuid,
                             order_id uuid,
                             quantity numeric,
                             location_id uuid,
                             returned_quantity numeric,
                             returned_amount numeric,
                             received_at_tz timestamp,
                             taxable_amount numeric,
                             non_taxable_amount numeric,
                             tax_amount numeric,
                             discount_amount numeric,
                             cogs_amount numeric,
                             gross_sale_amount numeric)
              AS $body$
                  SELECT   oi.id              AS id,
                           oi.merchant_id     AS merchant_id,
                           oi.product_id      AS product_id,
                           p.is_variant_of_product_id AS is_variant_of_product_id,
                           oi.order_id        AS order_id,
                           oi.quantity        AS quantity,
                           orders.location_id AS location_id,
                           returned_quantity,
                           returned_amount,
                           orders.received_at at time zone locations.timezone AS received_at_tz,
                           ROUND(
                             CASE COALESCE(oi.tax_amount, 0) > 0 WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                                                 WHEN FALSE THEN 0
                             END, 2) AS taxable_amount,
                           ROUND(
                             CASE COALESCE(oi.tax_amount, 0) = 0 WHEN TRUE  THEN oi.total_price_amount
                                                                 WHEN FALSE THEN 0
                             END, 2) AS non_taxable_amount,
                           ROUND(COALESCE(oi.tax_amount, 0), 2)      AS tax_amount,
                           ROUND(COALESCE(oi.discount_amount, 0), 2) AS discount_amount,
                           ROUND(COALESCE(oi.cost_amount * oi.quantity, 0), 2) AS cogs_amount,
                           ROUND(COALESCE(oi.total_price_amount - oi.tax_amount, 0), 2) AS gross_sale_amount
                  FROM     order_items oi,
                           orders,
                           locations,
                           products p,
                           LATERAL
                           (
                                  SELECT SUM(quantity)           AS returned_quantity,
                                         SUM(total_price_amount) AS returned_amount
                                  FROM   order_items oi2
                                  WHERE  oi2.payment_status = 'refunded'
                                  AND    oi2.product_id = oi.product_id
                                  AND    oi2.order_id = oi.order_id ) AS refunds
                  WHERE    oi.order_id = orders.id
                  AND      oi.product_id = p.id
                  AND      locations.id = orders.location_id
                  AND      oi.payment_status = 'paid'
                  AND      oi.merchant_id = $1
                  AND      orders.location_id = ANY ($2)
                  AND      orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;
  - changeSet:
      id: 75
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - createTable:
            tableName: gift_cards
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: product_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_product,
                      references: products(id),
                    }
              - column:
                  name: amounts
                  type: jsonb
              - column:
                  name: template_details_text
                  type: text
              - column:
                  name: apple_wallet_template_id
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: android_pay_template_id
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: gift_card_passes
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: lookup_id
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: gift_card_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_gift_card,
                      references: gift_cards(id),
                    }
              - column:
                  name: customer_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_customer,
                      references: customers(id),
                    }
              - column:
                  name: original_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: balance_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: ios_pass_public_url
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: android_pass_public_url
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: active
                  type: boolean
                  defaultValueBoolean: true
                  constraints: { nullable: false }
              - column:
                  name: pass_installed_at
                  type: datetime
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createIndex:
            columns:
              - column:
                  name: lookup_id
            indexName: idx_lookup_id
            tableName: gift_card_passes
        - createTable:
            tableName: gift_card_pass_transactions
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: gift_card_pass_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_gift_card_pass,
                      references: gift_card_passes(id),
                    }
              - column:
                  name: total_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
  - changeSet:
      id: 76
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: location_settings
            columns:
              - column:
                  name: bypass_signature_amount
                  type: number(12,2)
                  value: 0.0
                  defaultValue: 0.0
                  constraints: { nullable: false }
  - changeSet:
      id: 77
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp);
              CREATE OR REPLACE FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             product_id uuid,
                             is_variant_of_product_id uuid,
                             order_id uuid,
                             quantity numeric,
                             location_id uuid,
                             returned_quantity numeric,
                             returned_amount numeric,
                             received_at_tz timestamp,
                             taxable_amount numeric,
                             non_taxable_amount numeric,
                             tax_amount numeric,
                             discount_amount numeric,
                             cogs_amount numeric,
                             gross_sale_amount numeric)
              AS $body$
                  SELECT   oi.id              AS id,
                           oi.merchant_id     AS merchant_id,
                           oi.product_id      AS product_id,
                           p.is_variant_of_product_id AS is_variant_of_product_id,
                           oi.order_id        AS order_id,
                           oi.quantity        AS quantity,
                           orders.location_id AS location_id,
                           returned_quantity,
                           returned_amount,
                           orders.received_at at time zone locations.timezone AS received_at_tz,
                           ROUND(
                             CASE COALESCE(oi.tax_amount, 0) > 0 WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                                                 WHEN FALSE THEN 0
                             END, 2) AS taxable_amount,
                           ROUND(
                             CASE COALESCE(oi.tax_amount, 0) = 0 WHEN TRUE  THEN oi.total_price_amount
                                                                 WHEN FALSE THEN 0
                             END, 2) AS non_taxable_amount,
                           ROUND(COALESCE(oi.tax_amount, 0), 2)      AS tax_amount,
                           ROUND(COALESCE(oi.discount_amount, 0), 2) AS discount_amount,
                           ROUND(COALESCE(oi.cost_amount * oi.quantity, 0), 2) AS cogs_amount,
                           ROUND(COALESCE(oi.total_price_amount, 0), 2) AS gross_sale_amount
                  FROM     order_items oi,
                           orders,
                           locations,
                           products p,
                           LATERAL
                           (
                                  SELECT SUM(quantity)           AS returned_quantity,
                                         SUM(total_price_amount) AS returned_amount
                                  FROM   order_items oi2
                                  WHERE  oi2.payment_status = 'refunded'
                                  AND    oi2.product_id = oi.product_id
                                  AND    oi2.order_id = oi.order_id ) AS refunds
                  WHERE    oi.order_id = orders.id
                  AND      oi.product_id = p.id
                  AND      locations.id = orders.location_id
                  AND      oi.payment_status = 'paid'
                  AND      oi.merchant_id = $1
                  AND      orders.location_id = ANY ($2)
                  AND      orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;
        - sql:
            sql: >
              DROP FUNCTION reports_orders_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp);
              DROP FUNCTION reports_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp);
              CREATE OR REPLACE FUNCTION reports_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             customer_id uuid,
                             location_id uuid,
                             received_at timestamptz,
                             source varchar,
                             type varchar,
                             payment_type varchar,
                             gross_sale_amount double precision,
                             net_sale_amount double precision,
                             gross_profit_amount double precision,
                             total_discount_amount numeric,
                             tip_amount numeric,
                             refunds_amount double precision,
                             received_at_tz timestamp,
                             cogs_amount numeric,
                             non_taxable_amount numeric,
                             taxable_amount numeric,
                             collected_tax_amount numeric,
                             waiting_time double precision,
                             feedback_rating int)
              AS $body$
                  SELECT          orders.id           AS id,
                                  orders.merchant_id  AS merchant_id,
                                  orders.customer_id  AS customer_id,
                                  orders.location_id  AS location_id,
                                  orders.received_at  AS received_at,
                                  orders.source       AS source,
                                  orders.type         AS type,
                                  orders.payment_type AS payment_type,
                                  gross_sale_amount,
                                  net_sale_amount,
                                  gross_profit_amount,
                                  total_discount_amount,
                                  COALESCE(orders.tip_amount, 0) AS tip_amount,
                                  refunds_amount,
                                  orders.received_at at time zone locations.timezone AS received_at_tz,
                                  cogs_amount,
                                  non_taxable_amount,
                                  taxable_amount,
                                  collected_tax_amount,
                                  EXTRACT(EPOCH FROM (orders.completed_at - orders.received_at)) AS waiting_time,
                                  order_feedbacks.rating AS feedback_rating
                  FROM            orders
                  LEFT OUTER JOIN locations
                  ON              locations.id = orders.location_id
                  LEFT OUTER JOIN order_feedbacks
                  ON              order_feedbacks.order_id = orders.id
                  JOIN            lateral
                                  (
                                         SELECT COALESCE(sum((pt.payment_details::json->>'amount')::float), 0) AS refunds_amount
                                         FROM   payment_transactions pt
                                         WHERE  pt.order_id = orders.id
                                         AND    pt.type = 'refund' ) refunds
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT round(sum(rps.taxable_amount), 2)     AS taxable_amount,
                                                round(sum(rps.non_taxable_amount), 2) AS non_taxable_amount,
                                                round(sum(rps.cogs_amount), 2)        AS cogs_amount,
                                                round(sum(rps.discount_amount), 2)    AS discount_amount,
                                                round(sum(rps.tax_amount), 2)         AS collected_tax_amount
                                         FROM   reports_product_sales_func($1, $2, $3, $4) AS rps
                                         WHERE  rps.order_id = orders.id ) paid_items
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT COALESCE(orders.total_amount, 0) - refunds_amount AS gross_sale_amount) gsa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT gross_sale_amount - COALESCE(orders.tax_amount, 0) - COALESCE(orders.tip_amount, 0) AS net_sale_amount) nsa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT net_sale_amount - cogs_amount AS gross_profit_amount) gpa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT paid_items.discount_amount + COALESCE(orders.ticket_discount_amount, 0) AS total_discount_amount) tda
                  ON              true
                  WHERE           orders.is_invoice=false
                  AND             orders.payment_status IN ('paid',
                                                            'partially_paid',
                                                            'partially_refunded')
                  AND             orders.merchant_id = $1
                  AND             orders.location_id = ANY ($2)
                  AND             orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;

  - changeSet:
      id: 78
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP FUNCTION reports_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp);
              CREATE OR REPLACE FUNCTION reports_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             customer_id uuid,
                             location_id uuid,
                             received_at timestamptz,
                             source varchar,
                             type varchar,
                             payment_type varchar,
                             gross_sale_amount double precision,
                             net_sale_amount double precision,
                             gross_profit_amount double precision,
                             total_discount_amount numeric,
                             tip_amount numeric,
                             refunds_amount double precision,
                             received_at_tz timestamp,
                             cogs_amount numeric,
                             non_taxable_amount numeric,
                             taxable_amount numeric,
                             collected_tax_amount numeric,
                             waiting_time double precision,
                             feedback_rating int)
              AS $body$
                  SELECT          orders.id           AS id,
                                  orders.merchant_id  AS merchant_id,
                                  orders.customer_id  AS customer_id,
                                  orders.location_id  AS location_id,
                                  orders.received_at  AS received_at,
                                  orders.source       AS source,
                                  orders.type         AS type,
                                  orders.payment_type AS payment_type,
                                  gross_sale_amount,
                                  net_sale_amount,
                                  gross_profit_amount,
                                  total_discount_amount,
                                  COALESCE(orders.tip_amount, 0) AS tip_amount,
                                  refunds_amount,
                                  orders.received_at at time zone locations.timezone AS received_at_tz,
                                  cogs_amount,
                                  non_taxable_amount,
                                  taxable_amount,
                                  collected_tax_amount,
                                  EXTRACT(EPOCH FROM (orders.completed_at - orders.received_at)) AS waiting_time,
                                  order_feedbacks.rating AS feedback_rating
                  FROM            orders
                  LEFT OUTER JOIN locations
                  ON              locations.id = orders.location_id
                  LEFT OUTER JOIN order_feedbacks
                  ON              order_feedbacks.order_id = orders.id
                  JOIN            lateral
                                  (
                                         SELECT COALESCE(sum((pt.payment_details::json->>'amount')::float), 0) AS refunds_amount
                                         FROM   payment_transactions pt
                                         WHERE  pt.order_id = orders.id
                                         AND    pt.type = 'refund' ) refunds
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT round(sum(rps.taxable_amount), 2)     AS taxable_amount,
                                                round(sum(rps.non_taxable_amount), 2) AS non_taxable_amount,
                                                round(sum(rps.cogs_amount), 2)        AS cogs_amount,
                                                round(sum(rps.discount_amount), 2)    AS discount_amount,
                                                round(sum(rps.tax_amount), 2)         AS collected_tax_amount
                                         FROM   reports_product_sales_func($1, $2, $3, $4) AS rps
                                         WHERE  rps.order_id = orders.id ) paid_items
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT COALESCE(orders.total_amount, 0) - refunds_amount AS gross_sale_amount) gsa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT gross_sale_amount - collected_tax_amount - COALESCE(orders.tip_amount, 0) AS net_sale_amount) nsa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT net_sale_amount - cogs_amount AS gross_profit_amount) gpa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT paid_items.discount_amount + COALESCE(orders.ticket_discount_amount, 0) AS total_discount_amount) tda
                  ON              true
                  WHERE           orders.is_invoice=false
                  AND             orders.payment_status IN ('paid',
                                                            'partially_paid',
                                                            'partially_refunded')
                  AND             orders.merchant_id = $1
                  AND             orders.location_id = ANY ($2)
                  AND             orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;
  - changeSet:
      id: 79
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - dropIndex:
            indexName: idx_lookup_id
            tableName: gift_card_passes
        - addUniqueConstraint:
            tableName: gift_card_passes
            columnNames: merchant_id, lookup_id
        - addColumn:
            tableName: gift_card_passes
            columns:
              - column:
                  name: order_item_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_order_item,
                      references: order_items(id),
                    }
  - changeSet:
      id: 80
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: locations
            columns:
              - column:
                  name: website
                  type: varchar(255)
        - dropNotNullConstraint:
            tableName: gift_cards
            columnName: apple_wallet_template_id
        - dropNotNullConstraint:
            tableName: gift_cards
            columnName: android_pay_template_id
  - changeSet:
      id: 81
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP FUNCTION reports_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp);
              CREATE OR REPLACE FUNCTION reports_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             customer_id uuid,
                             location_id uuid,
                             received_at timestamptz,
                             source varchar,
                             type varchar,
                             payment_type varchar,
                             gross_sale_amount double precision,
                             net_sale_amount double precision,
                             gross_profit_amount double precision,
                             total_discount_amount numeric,
                             tip_amount numeric,
                             refunds_amount double precision,
                             received_at_tz timestamp,
                             cogs_amount numeric,
                             non_taxable_amount numeric,
                             taxable_amount numeric,
                             collected_tax_amount numeric,
                             waiting_time double precision,
                             feedback_rating int)
              AS $body$
                  SELECT          orders.id           AS id,
                                  orders.merchant_id  AS merchant_id,
                                  orders.customer_id  AS customer_id,
                                  orders.location_id  AS location_id,
                                  orders.received_at  AS received_at,
                                  orders.source       AS source,
                                  orders.type         AS type,
                                  orders.payment_type AS payment_type,
                                  gross_sale_amount,
                                  net_sale_amount,
                                  gross_profit_amount,
                                  total_discount_amount,
                                  COALESCE(orders.tip_amount, 0) AS tip_amount,
                                  refunds_amount,
                                  orders.received_at at time zone locations.timezone AS received_at_tz,
                                  cogs_amount,
                                  non_taxable_amount,
                                  taxable_amount,
                                  collected_tax_amount,
                                  EXTRACT(EPOCH FROM (orders.completed_at - orders.received_at)) AS waiting_time,
                                  order_feedbacks.rating AS feedback_rating
                  FROM            orders
                  LEFT OUTER JOIN locations
                  ON              locations.id = orders.location_id
                  LEFT OUTER JOIN order_feedbacks
                  ON              order_feedbacks.order_id = orders.id
                  JOIN            lateral
                                  (
                                         SELECT COALESCE(sum((pt.payment_details::json->>'amount')::float), 0) AS refunds_amount
                                         FROM   payment_transactions pt
                                         WHERE  pt.order_id = orders.id
                                         AND    pt.type = 'refund' ) refunds
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT round(sum(rps.taxable_amount), 2)     AS taxable_amount,
                                                round(sum(rps.non_taxable_amount), 2) AS non_taxable_amount,
                                                round(sum(rps.cogs_amount), 2)        AS cogs_amount,
                                                round(sum(rps.discount_amount), 2)    AS discount_amount,
                                                round(sum(rps.tax_amount), 2)         AS collected_tax_amount
                                         FROM   reports_product_sales_func($1, $2, $3, $4) AS rps
                                         WHERE  rps.order_id = orders.id ) paid_items
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT COALESCE(orders.total_amount, 0) - refunds_amount AS gross_sale_amount) gsa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT gross_sale_amount - collected_tax_amount - COALESCE(orders.tip_amount, 0) AS net_sale_amount) nsa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT net_sale_amount - cogs_amount AS gross_profit_amount) gpa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT paid_items.discount_amount + COALESCE(orders.ticket_discount_amount, 0) AS total_discount_amount) tda
                  ON              true
                  WHERE           orders.is_invoice=false
                  AND             orders.payment_status IN ('paid',
                                                            'partially_paid',
                                                            'partially_refunded',
                                                            'refunded')
                  AND             orders.merchant_id = $1
                  AND             orders.location_id = ANY ($2)
                  AND             orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;
  - changeSet:
      id: 82
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropNotNullConstraint:
            tableName: gift_card_passes
            columnName: ios_pass_public_url
        - dropNotNullConstraint:
            tableName: gift_card_passes
            columnName: android_pass_public_url
  - changeSet:
      id: 83
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: gift_card_passes
            columns:
              - column:
                  name: recipient_email
                  type: varchar(255)
        - dropColumn:
            tableName: gift_card_passes
            columnName: customer_id
  - changeSet:
      id: 84
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - createTable:
            tableName: location_receipts
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: location_name
                  type: varchar(255)
              - column:
                  name: header_color
                  type: varchar(255)
              - column:
                  name: address_line_1
                  type: varchar(255)
              - column:
                  name: address_line_2
                  type: varchar(255)
              - column:
                  name: city
                  type: varchar(255)
              - column:
                  name: state
                  type: varchar(255)
              - column:
                  name: country
                  type: varchar(255)
              - column:
                  name: postal_code
                  type: varchar(12)
              - column:
                  name: phone_number
                  type: varchar(255)
              - column:
                  name: website_url
                  type: varchar(255)
              - column:
                  name: facebook_url
                  type: varchar(255)
              - column:
                  name: twitter_url
                  type: varchar(255)
              - column:
                  name: show_custom_text
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: custom_text
                  type: varchar(255)
              - column:
                  name: show_return_policy
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: return_policy_text
                  type: varchar(255)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addUniqueConstraint:
            tableName: location_receipts
            columnNames: merchant_id, location_id
  - changeSet:
      id: 85
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - modifyDataType:
            tableName: imports
            columnName: location_ids
            newDataType: text
  - changeSet:
      id: 86
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - modifyDataType:
            tableName: gift_card_passes
            columnName: android_pass_public_url
            newDataType: text
  - changeSet:
      id: 87
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE purchase_orders SET status = 'completed' WHERE status = 'fulfilled';
              UPDATE purchase_orders SET status = 'created' WHERE status != 'completed' AND status != 'partial';
              UPDATE transfer_orders SET status = 'completed' WHERE status = 'fulfilled';
              UPDATE transfer_orders SET status = 'created' WHERE status != 'completed' AND status != 'partial';
  - changeSet:
      id: 88
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: order_items
            columns:
              - column:
                  name: product_type
                  type: varchar(20)
        - sql:
            sql: >
              UPDATE order_items SET product_type = p.type FROM products p WHERE p.id = order_items.product_id;
  - changeSet:
      id: 89
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE INDEX ON payment_transactions((payment_details->>'transactionResult'));
  - changeSet:
      id: 90
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: products
            columns:
              - column:
                  name: avg_cost_amount
                  type: number(12,2)
        - addColumn:
            tableName: product_locations
            columns:
              - column:
                  name: avg_cost_amount
                  type: number(12,2)
        - sql:
            sql: >
              UPDATE products
              SET    avg_cost_amount = subquery.avg_cost
              FROM   (SELECT p.id,
                             ROUND(AVG(rop.cost_amount), 2) AS avg_cost
                     FROM   receiving_order_products rop,
                            products p
                     WHERE  p.id = rop.product_id
                     GROUP BY p.id) AS subquery
              WHERE products.id = subquery.id;
              UPDATE product_locations
              SET    avg_cost_amount = subquery.avg_cost
              FROM   (SELECT ROUND(AVG(rop.cost_amount), 2) AS avg_cost,
                             pl.product_id                  AS product_id,
                             pl.location_id                 AS location_id
                      FROM   receiving_orders ro,
                             receiving_order_products rop,
                             product_locations pl
                      WHERE  pl.product_id = rop.product_id
                             AND rop.receiving_order_id = ro.id
                             AND pl.location_id = ro.location_id
                      GROUP  BY pl.location_id,
                                pl.product_id) AS subquery
              WHERE  product_locations.product_id = subquery.product_id
              AND product_locations.location_id = subquery.location_id;
  - changeSet:
      id: 91
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: products
            columns:
              - column:
                  name: is_combo
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
        - sql:
            sql: >
              UPDATE products
              SET    is_combo = 'true',
                     type = 'simple'
              WHERE products.type = 'combo';
  - changeSet:
      id: 92
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - dropColumn:
            tableName: users
            columnName: currency
        - dropColumn:
            tableName: products
            columnName: price_currency
        - dropColumn:
            tableName: products
            columnName: cost_currency
  - changeSet:
      id: 93
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: receiving_order_products
            columns:
              - column:
                  name: product_name
                  type: varchar(255)
              - column:
                  name: product_unit
                  type: varchar(255)
        - sql:
            sql: >
              UPDATE receiving_order_products rop
              SET    product_name = p.name, product_unit = p.unit
              FROM products p
              WHERE rop.product_id = p.id;
        - addNotNullConstraint:
            tableName: receiving_order_products
            columnDataType: varchar(255)
            columnName: product_name
        - addNotNullConstraint:
            tableName: receiving_order_products
            columnDataType: varchar(255)
            columnName: product_unit
        - addColumn:
            tableName: transfer_order_products
            columns:
              - column:
                  name: product_name
                  type: varchar(255)
              - column:
                  name: product_unit
                  type: varchar(255)
        - sql:
            sql: >
              UPDATE transfer_order_products rop
              SET    product_name = p.name, product_unit = p.unit
              FROM products p
              WHERE rop.product_id = p.id;
        - addNotNullConstraint:
            tableName: transfer_order_products
            columnDataType: varchar(255)
            columnName: product_name
        - addNotNullConstraint:
            tableName: transfer_order_products
            columnDataType: varchar(255)
            columnName: product_unit
        - addColumn:
            tableName: return_order_products
            columns:
              - column:
                  name: product_name
                  type: varchar(255)
              - column:
                  name: product_unit
                  type: varchar(255)
        - sql:
            sql: >
              UPDATE return_order_products rop
              SET    product_name = p.name, product_unit = p.unit
              FROM products p
              WHERE rop.product_id = p.id;
        - addNotNullConstraint:
            tableName: return_order_products
            columnDataType: varchar(255)
            columnName: product_name
        - addNotNullConstraint:
            tableName: return_order_products
            columnDataType: varchar(255)
            columnName: product_unit
  - changeSet:
      id: 94
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - dropColumn:
            tableName: product_locations
            columnName: price_currency
        - dropColumn:
            tableName: product_locations
            columnName: cost_currency
  - changeSet:
      id: 95
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              INSERT INTO location_receipts (
                id,
                merchant_id,
                location_id,
                location_name,
                header_color,
                address_line_1,
                address_line_2,
                city,
                state,
                country,
                postal_code,
                phone_number,
                website_url,
                facebook_url,
                twitter_url,
                created_at,
                updated_at
              )
              SELECT
                ler.id,
                ler.merchant_id,
                ler.location_id,
                ler.location_name,
                ler.header_color,
                ler.location_address_line_1,
                ler.location_address_line_2,
                ler.location_city,
                ler.location_state,
                ler.location_country,
                ler.location_postal_code,
                l.phone_number,
                ler.website_url,
                ler.facebook_url,
                ler.twitter_url,
                ler.created_at,
                ler.updated_at
              FROM location_email_receipts ler, locations l
              WHERE l.id = ler.location_id
              AND ler.location_id NOT IN (SELECT location_id FROM location_receipts);
  - changeSet:
      id: 96
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - dropColumn:
            tableName: customer_locations
            columnName: total_spend_currency
        - dropColumn:
            tableName: modifier_options
            columnName: price_currency
        - dropColumn:
            tableName: discounts
            columnName: currency
  - changeSet:
      id: 97
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - dropColumn:
            tableName: cash_drawers
            columnName: currency
  - changeSet:
      id: 98
      author: Marco Manzi <marco.manzi@paytouch.io>
      changes:
        - dropColumn:
            tableName: cash_drawer_activities
            columnName: currency
  - changeSet:
      id: 99
      author: Marco Manzi <marco.manzi@paytouch.io>
      changes:
        - dropColumn:
            tableName: inventory_count_products
            columnName: value_currency
        - dropColumn:
            tableName: inventory_counts
            columnName: value_change_currency
  - changeSet:
      id: 100
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              DELETE FROM product_quantity_history WHERE prev_quantity_amount = new_quantity_amount;
              DELETE FROM product_price_history WHERE prev_price_amount = new_price_amount;
              DELETE FROM product_cost_history WHERE prev_cost_amount = new_cost_amount;
              DELETE FROM stocks
              WHERE  id IN (SELECT id
                            FROM   (SELECT id,
                                           ROW_NUMBER()
                                             OVER (
                                               PARTITION BY product_id, location_id
                                               ORDER BY id) AS rnum
                                    FROM   stocks) s
                            WHERE  s.rnum > 1);
        - addUniqueConstraint:
            tableName: stocks
            columnNames: merchant_id, product_id, location_id
  - changeSet:
      id: 101
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DELETE FROM product_location_tax_rates WHERE id IN (SELECT pltr.id
              FROM product_locations pl
              INNER JOIN product_location_tax_rates pltr ON pl.id = pltr.product_location_id
              WHERE pl.location_id NOT IN (SELECT location_id FROM tax_rate_locations WHERE tax_rate_id = pltr.tax_rate_id));
  - changeSet:
      id: 102
      author: Marco Manzi <marco.manzi@paytouch.io>
      changes:
        - dropColumn:
            tableName: order_item_modifier_options
            columnName: price_currency
        - dropColumn:
            tableName: order_items
            columnName: currency
  - changeSet:
      id: 103
      author: Marco Manzi <marco.manzi@paytouch.io>
      changes:
        - dropColumn:
            tableName: loyalty_rewards
            columnName: currency
  - changeSet:
      id: 104
      author: Marco Manzi <marco.manzi@paytouch.io>
      changes:
        - dropColumn:
            tableName: order_discounts
            columnName: currency
        - dropColumn:
            tableName: order_item_discounts
            columnName: currency
  - changeSet:
      id: 105
      author: Marco Manzi <marco.manzi@paytouch.io>
      changes:
        - dropColumn:
            tableName: locations
            columnName: currency
  - changeSet:
      id: 106
      author: Marco Manzi <marco.manzi@paytouch.io>
      changes:
        - addColumn:
            tableName: orders
            columns:
              - column:
                  name: tag
                  type: varchar(255)
  - changeSet:
      id: 107
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP FUNCTION reports_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp);
              CREATE OR REPLACE FUNCTION reports_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             customer_id uuid,
                             location_id uuid,
                             received_at timestamptz,
                             source varchar,
                             type varchar,
                             payment_type varchar,
                             gross_sale_amount double precision,
                             net_sale_amount double precision,
                             gross_profit_amount double precision,
                             total_discount_amount numeric,
                             tip_amount numeric,
                             refunds_amount double precision,
                             received_at_tz timestamp,
                             cogs_amount numeric,
                             non_taxable_amount numeric,
                             taxable_amount numeric,
                             collected_tax_amount numeric,
                             waiting_time double precision,
                             feedback_rating int)
              AS $body$
                  SELECT          orders.id           AS id,
                                  orders.merchant_id  AS merchant_id,
                                  orders.customer_id  AS customer_id,
                                  orders.location_id  AS location_id,
                                  orders.received_at  AS received_at,
                                  orders.source       AS source,
                                  orders.type         AS type,
                                  orders.payment_type AS payment_type,
                                  gross_sale_amount,
                                  net_sale_amount,
                                  gross_profit_amount,
                                  total_discount_amount,
                                  COALESCE(orders.tip_amount, 0) AS tip_amount,
                                  refunds_amount,
                                  orders.received_at at time zone locations.timezone AS received_at_tz,
                                  cogs_amount,
                                  non_taxable_amount,
                                  taxable_amount,
                                  collected_tax_amount,
                                  EXTRACT(EPOCH FROM (orders.completed_at - orders.received_at)) AS waiting_time,
                                  order_feedbacks.rating AS feedback_rating
                  FROM            orders
                  LEFT OUTER JOIN locations
                  ON              locations.id = orders.location_id
                  LEFT OUTER JOIN order_feedbacks
                  ON              order_feedbacks.order_id = orders.id
                  JOIN            lateral
                                  (
                                         SELECT COALESCE(sum((pt.payment_details::json->>'amount')::float), 0) AS refunds_amount
                                         FROM   payment_transactions pt
                                         WHERE  pt.order_id = orders.id
                                         AND    pt.type = 'refund'
                                         AND    pt.payment_type != 'gift_card'
                                  ) refunds
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT COALESCE(sum((pt.payment_details::json->>'amount')::float), 0) AS gift_cards_payments_amount
                                         FROM   payment_transactions pt
                                         WHERE  pt.order_id = orders.id
                                         AND    pt.type = 'payment'
                                         AND    pt.payment_type = 'gift_card'
                                  ) gift_card_transactions
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT round(sum(rps.taxable_amount), 2)     AS taxable_amount,
                                                round(sum(rps.non_taxable_amount), 2) AS non_taxable_amount,
                                                round(sum(rps.cogs_amount), 2)        AS cogs_amount,
                                                round(sum(rps.discount_amount), 2)    AS discount_amount,
                                                round(sum(rps.tax_amount), 2)         AS collected_tax_amount
                                         FROM   reports_product_sales_func($1, $2, $3, $4) AS rps
                                         WHERE  rps.order_id = orders.id ) paid_items
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT COALESCE(orders.total_amount, 0) - refunds_amount - gift_cards_payments_amount AS gross_sale_amount) gsa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT gross_sale_amount - collected_tax_amount - COALESCE(orders.tip_amount, 0) AS net_sale_amount) nsa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT net_sale_amount - cogs_amount AS gross_profit_amount) gpa
                  ON              true
                  JOIN            lateral
                                  (
                                         SELECT paid_items.discount_amount + COALESCE(orders.ticket_discount_amount, 0) AS total_discount_amount) tda
                  ON              true
                  WHERE           orders.is_invoice=false
                  AND             orders.payment_status IN ('paid',
                                                            'partially_paid',
                                                            'partially_refunded',
                                                            'refunded')
                  AND             orders.merchant_id = $1
                  AND             orders.location_id = ANY ($2)
                  AND             orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;
  - changeSet:
      id: 108
      author: Marco Manzi <marco.manzi@paytouch.io>
      changes:
        - dropColumn:
            tableName: orders
            columnName: currency
  - changeSet:
      id: 109
      author: Marco Manzi <marco.manzi@paytouch.io>
      changes:
        - dropColumn:
            tableName: product_price_history
            columnName: currency
        - dropColumn:
            tableName: product_cost_history
            columnName: currency
        - dropColumn:
            tableName: product_quantity_history
            columnName: new_stock_value_currency
  - changeSet:
      id: 110
      author: Marco Manzi <marco.manzi@paytouch.io>
      changes:
        - dropColumn:
            tableName: purchase_order_products
            columnName: currency
        - dropColumn:
            tableName: receiving_order_products
            columnName: currency
  - changeSet:
      id: 111
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - createTable:
            tableName: reports_orders
            columns:
              - column:
                  name: id # same as orders(id)
                  type: uuid
                  constraints:
                    {
                      primaryKey: true,
                      deleteCascade: true,
                      foreignKeyName: fk_order,
                      references: orders(id),
                    }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: customer_id
                  type: uuid
                  constraints:
                    {
                      deleteCascade: true,
                      foreignKeyName: fk_customer_id,
                      references: customers(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: received_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: source
                  type: varchar(20)
              - column:
                  name: type
                  type: varchar(20)
              - column:
                  name: payment_type
                  type: varchar(20)
              - column:
                  name: payment_status
                  type: varchar(20)
              - column:
                  name: gross_sale_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: net_sale_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: gross_profit_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: total_discount_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: tip_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: refunds_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: received_at_tz
                  type: datetime
              - column:
                  name: cogs_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: non_taxable_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: taxable_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: collected_tax_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: waiting_time
                  type: int
              - column:
                  name: feedback_rating
                  type: int
              - column:
                  name: is_invoice
                  type: boolean
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createIndex:
            columns:
              - column:
                  name: payment_type
            indexName: idx_payment_type
            tableName: reports_orders
        - createIndex:
            columns:
              - column:
                  name: type
            indexName: idx_type
            tableName: reports_orders
        - createIndex:
            columns:
              - column:
                  name: source
            indexName: idx_source
            tableName: reports_orders
        - createIndex:
            columns:
              - column:
                  name: feedback_rating
            indexName: idx_feedback_rating
            tableName: reports_orders
        - createIndex:
            columns:
              - column:
                  name: is_invoice
            indexName: idx_is_invoice
            tableName: reports_orders
        - createIndex:
            columns:
              - column:
                  name: payment_status
            indexName: idx_payment_status
            tableName: reports_orders
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_orders_update(ids uuid[])
              RETURNS integer
              AS $body$
                   INSERT INTO reports_orders (
                       id,
                       merchant_id,
                       customer_id,
                       location_id,
                       received_at,
                       source,
                       type,
                       payment_type,
                       payment_status,
                       is_invoice,
                       gross_sale_amount,
                       net_sale_amount,
                       gross_profit_amount,
                       total_discount_amount,
                       tip_amount,
                       refunds_amount,
                       received_at_tz,
                       cogs_amount,
                       non_taxable_amount,
                       taxable_amount,
                       collected_tax_amount,
                       waiting_time,
                       feedback_rating,
                       created_at,
                       updated_at
                   )
                   SELECT          orders.id             AS id,
                                   orders.merchant_id    AS merchant_id,
                                   orders.customer_id    AS customer_id,
                                   orders.location_id    AS location_id,
                                   orders.received_at    AS received_at,
                                   orders.source         AS source,
                                   orders.type           AS type,
                                   orders.payment_type   AS payment_type,
                                   orders.payment_status AS payment_status,
                                   orders.is_invoice     AS is_invoice,
                                   SUM(COALESCE(gross_sale_amount, 0))     AS gross_sale_amount,
                                   SUM(COALESCE(net_sale_amount, 0))       AS net_sale_amount,
                                   SUM(COALESCE(gross_profit_amount, 0))   AS gross_profit_amount,
                                   SUM(COALESCE(total_discount_amount, 0)) AS total_discount_amount,
                                   SUM(COALESCE(orders.tip_amount, 0))     AS tip_amount,
                                   SUM(COALESCE(refunds_amount, 0))        AS refunds_amount,
                                   orders.received_at at time zone locations.timezone AS received_at_tz,
                                   SUM(COALESCE(cogs_amount, 0))           AS cogs_amount,
                                   SUM(COALESCE(non_taxable_amount, 0))    AS non_taxable_amount,
                                   SUM(COALESCE(taxable_amount, 0))        AS taxable_amount,
                                   SUM(COALESCE(collected_tax_amount, 0))  AS collected_tax_amount,
                                   EXTRACT(epoch FROM (orders.completed_at - orders.received_at)) AS waiting_time,
                                   AVG(order_feedbacks.rating)             AS feedback_rating,
                                   now() AS created_at,
                                   now() AS updated_at
                   FROM            orders
                   LEFT OUTER JOIN locations
                   ON              locations.id = orders.location_id
                   LEFT OUTER JOIN order_feedbacks
                   ON              order_feedbacks.order_id = orders.id
                   JOIN            lateral
                                   (
                                          SELECT COALESCE(SUM((pt.payment_details::json->>'amount')::float), 0) AS refunds_amount
                                          FROM   payment_transactions pt
                                          WHERE  pt.order_id = orders.id
                                          AND    pt.type = 'refund'
                                          AND    pt.payment_type != 'gift_card' ) refunds
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT COALESCE(SUM((pt.payment_details::json->>'amount')::float), 0) AS gift_cards_payments_amount
                                          FROM   payment_transactions pt
                                          WHERE  pt.order_id = orders.id
                                          AND    pt.type = 'payment'
                                          AND    pt.payment_type = 'gift_card' ) gift_card_transactions
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT   SUM(ROUND(
                                                     CASE COALESCE(oi.tax_amount, 0) > 0 WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                                                                         WHEN FALSE THEN 0
                                                     END, 2))                                               AS taxable_amount,
                                                   SUM(ROUND(
                                                     CASE COALESCE(oi.tax_amount, 0) = 0 WHEN TRUE  THEN oi.total_price_amount
                                                                                         WHEN FALSE THEN 0
                                                   END, 2))                                                 AS non_taxable_amount,
                                                   SUM(ROUND(COALESCE(oi.cost_amount * oi.quantity, 0), 2)) AS cogs_amount,
                                                   SUM(ROUND(COALESCE(oi.discount_amount, 0), 2))           AS discount_amount,
                                                   SUM(ROUND(COALESCE(oi.tax_amount, 0), 2))                AS collected_tax_amount
                                          FROM     order_items oi
                                          WHERE    oi.order_id = orders.id
                                          AND      oi.payment_status = 'paid') paid_items
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT COALESCE(orders.total_amount, 0) - refunds_amount - gift_cards_payments_amount AS gross_sale_amount ) gsa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT gross_sale_amount - collected_tax_amount - COALESCE(orders.tip_amount, 0) AS net_sale_amount ) nsa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT net_sale_amount - cogs_amount AS gross_profit_amount ) gpa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT paid_items.discount_amount + COALESCE(orders.ticket_discount_amount, 0) AS total_discount_amount ) tda
                   ON              true
                   WHERE           orders.id = ANY ($1)
                   GROUP BY orders.id, locations.timezone
                   ON CONFLICT (id)
                   DO UPDATE SET   merchant_id = excluded.merchant_id,
                                   customer_id = excluded.customer_id,
                                   location_id = excluded.location_id,
                                   received_at = excluded.received_at,
                                   source = excluded.source,
                                   type = excluded.type,
                                   payment_type = excluded.payment_type,
                                   payment_status = excluded.payment_status,
                                   is_invoice = excluded.is_invoice,
                                   gross_sale_amount = excluded.gross_sale_amount,
                                   net_sale_amount = excluded.net_sale_amount,
                                   gross_profit_amount = excluded.gross_profit_amount,
                                   total_discount_amount = excluded.total_discount_amount,
                                   tip_amount = excluded.tip_amount,
                                   refunds_amount = excluded.refunds_amount,
                                   received_at_tz = excluded.received_at_tz,
                                   cogs_amount = excluded.cogs_amount,
                                   non_taxable_amount = excluded.non_taxable_amount,
                                   taxable_amount = excluded.taxable_amount,
                                   collected_tax_amount = excluded.collected_tax_amount,
                                   waiting_time = excluded.waiting_time,
                                   feedback_rating = excluded.feedback_rating,
                                   updated_at = excluded.updated_at
                   RETURNING array_length($1, 1)
              $body$
              language sql;
        - sql:
            sql: >
              SELECT reports_orders_update( ARRAY (SELECT orders.id FROM orders) );
  - changeSet:
      id: 112
      author: Marco Manzi <marco.manzi@paytouch.io>
      changes:
        - addColumn:
            tableName: return_orders
            columns:
              - column:
                  name: synced
                  type: boolean
                  value: false
                  defaultValueBoolean: false
                  constraints: { nullable: false }
  - changeSet:
      id: 113
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: gift_card_passes
            columns:
              - column:
                  name: is_custom_amount
                  type: boolean
                  value: false
                  defaultValueBoolean: false
                  constraints: { nullable: false }
  - changeSet:
      id: 114
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - createTable:
            tableName: reports_gift_card_pass_transactions
            columns: # unique constraint gift_card_pass_id + gift_card_pass_transaction_id
              - column:
                  name: gift_card_pass_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_gift_card_pass,
                      references: gift_card_passes(id),
                    }
              - column:
                  name: gift_card_pass_transaction_id
                  type: uuid
                  constraints:
                    {
                      foreignKeyName: fk_gift_card_pass_transaction,
                      references: gift_card_pass_transactions(id),
                    }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: customer_id
                  type: uuid
                  constraints:
                    {
                      foreignKeyName: fk_customer_id,
                      references: customers(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_location, references: locations(id) }
              - column:
                  name: original_location_id
                  type: uuid
                  constraints:
                    {
                      foreignKeyName: fk_original_location,
                      references: locations(id),
                    }
              - column:
                  name: order_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_order, references: orders(id) }
              - column:
                  name: received_at_tz
                  type: datetime
              - column:
                  name: charged_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: redeemed_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: remaining_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: original_balance_amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: is_custom_amount
                  type: boolean
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addUniqueConstraint:
            columnNames: gift_card_pass_id, gift_card_pass_transaction_id
            tableName: reports_gift_card_pass_transactions
        - createIndex:
            columns:
              - column:
                  name: is_custom_amount
            indexName: idx_is_custom_amount
            tableName: reports_gift_card_pass_transactions
        - createIndex:
            columns:
              - column:
                  name: original_balance_amount
            indexName: idx_original_balance_amount
            tableName: reports_gift_card_pass_transactions
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_gift_card_passes_update(order_ids uuid[])
              RETURNS integer
              AS $body$
                  INSERT INTO reports_gift_card_pass_transactions
                              (
                                          gift_card_pass_id,
                                          gift_card_pass_transaction_id,
                                          merchant_id,
                                          customer_id,
                                          location_id,
                                          original_location_id,
                                          order_id,
                                          received_at_tz,
                                          charged_amount,
                                          redeemed_amount,
                                          remaining_amount,
                                          original_balance_amount,
                                          is_custom_amount,
                                          created_at,
                                          updated_at
                              )
                  SELECT          gift_card_passes.id                                AS gift_card_pass_id,
                                  NULL                                               AS gift_card_transaction_id,
                                  orders.merchant_id                                 AS merchant_id,
                                  orders.customer_id                                 AS customer_id,
                                  orders.location_id                                 AS location_id,
                                  orders.location_id                                 AS original_location_id,
                                  orders.id                                          AS order_id,
                                  orders.received_at AT TIME zone locations.timezone AS received_at_tz,
                                  0                                                  AS charged_amount,
                                  0                                                  AS redeemed_amount,
                                  gift_card_passes.original_amount                   AS remaining_amount,
                                  gift_card_passes.original_amount                   AS original_balance_amount,
                                  gift_card_passes.is_custom_amount                  AS is_custom_amount,
                                  now()                                              AS created_at,
                                  now()                                              AS updated_at
                  FROM            gift_card_passes
                  LEFT OUTER JOIN order_items
                  ON              gift_card_passes.order_item_id = order_items.id
                  LEFT OUTER JOIN orders
                  ON              orders.id = order_items.order_id
                  LEFT OUTER JOIN locations
                  ON              locations.id = orders.location_id
                  WHERE           orders.id = ANY ($1)
                  ON CONFLICT (gift_card_pass_id, gift_card_pass_transaction_id)
                  DO UPDATE SET merchant_id = excluded.merchant_id,
                                customer_id = excluded.customer_id,
                                location_id = excluded.location_id,
                                original_location_id = excluded.original_location_id,
                                order_id = excluded.order_id,
                                received_at_tz = excluded.received_at_tz,
                                charged_amount = excluded.charged_amount,
                                redeemed_amount = excluded.redeemed_amount,
                                remaining_amount = excluded.remaining_amount,
                                original_balance_amount = excluded.original_balance_amount,
                                is_custom_amount = excluded.is_custom_amount,
                                updated_at = excluded.updated_at
                  RETURNING array_length($1, 1)
              $body$
              language sql;
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_gift_card_pass_transactions_update(order_ids uuid[])
              RETURNS integer
              AS $body$
                  INSERT INTO reports_gift_card_pass_transactions
                              (
                                          gift_card_pass_id,
                                          gift_card_pass_transaction_id,
                                          merchant_id,
                                          customer_id,
                                          location_id,
                                          original_location_id,
                                          order_id,
                                          received_at_tz,
                                          charged_amount,
                                          redeemed_amount,
                                          remaining_amount,
                                          original_balance_amount,
                                          is_custom_amount,
                                          created_at,
                                          updated_at
                              )
                  SELECT          gift_card_passes.id                                AS gift_card_pass_id,
                                  gift_card_pass_transactions.id                     AS gift_card_transaction_id,
                                  orders.merchant_id                                 AS merchant_id,
                                  orders.customer_id                                 AS customer_id,
                                  orders.location_id                                 AS location_id,
                                  original_location_id                               AS original_location_id,
                                  orders.id                                          AS order_id,
                                  orders.received_at AT TIME zone locations.timezone AS received_at_tz,
                                  gift_card_pass_transactions.total_amount           AS charged_amount,
                                  redeemed_amount                                    AS redeemed_amount,
                                  gift_card_passes.original_amount - redeemed_amount AS remaining_amount,
                                  gift_card_passes.original_amount                   AS original_balance_amount,
                                  gift_card_passes.is_custom_amount                  AS is_custom_amount,
                                  now()                                              AS created_at,
                                  now()                                              AS updated_at
                  FROM            gift_card_pass_transactions
                  LEFT OUTER JOIN gift_card_passes
                  ON              gift_card_pass_transactions.gift_card_pass_id = gift_card_passes.id
                  LEFT OUTER JOIN order_items
                  ON              gift_card_passes.order_item_id = order_items.id
                  LEFT OUTER JOIN orders
                  ON              orders.id = order_items.order_id
                  LEFT OUTER JOIN locations
                  ON              locations.id = orders.location_id
                  JOIN           lateral (
                        SELECT o.location_id AS original_location_id
                        FROM   order_items AS oi,
                               orders AS o
                        WHERE  oi.id = gift_card_passes.order_item_id
                        AND    oi.order_id = o.id
                  ) oli
                   ON true
                   JOIN           lateral (
                        SELECT SUM(gcpt.total_amount) AS redeemed_amount
                        FROM gift_card_pass_transactions gcpt
                        WHERE gcpt.gift_card_pass_id = gift_card_passes.id
                        AND   gcpt.created_at <= gift_card_pass_transactions.created_at
                   ) ra
                  ON true
                  WHERE           orders.id = ANY ($1)
                  ON CONFLICT (gift_card_pass_id, gift_card_pass_transaction_id)
                  DO UPDATE SET merchant_id = excluded.merchant_id,
                                customer_id = excluded.customer_id,
                                location_id = excluded.location_id,
                                original_location_id = excluded.original_location_id,
                                order_id = excluded.order_id,
                                received_at_tz = excluded.received_at_tz,
                                charged_amount = excluded.charged_amount,
                                redeemed_amount = excluded.redeemed_amount,
                                remaining_amount = excluded.remaining_amount,
                                original_balance_amount = excluded.original_balance_amount,
                                is_custom_amount = excluded.is_custom_amount,
                                updated_at = excluded.updated_at
                  RETURNING array_length($1, 1)
              $body$
              language sql;
        - sql:
            sql: >
              SELECT reports_gift_card_passes_update( ARRAY (SELECT orders.id FROM orders) );
              SELECT reports_gift_card_pass_transactions_update( ARRAY (SELECT orders.id FROM orders) );
  - changeSet:
      id: 115
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_gift_card_pass_transactions_update(order_ids uuid[])
              RETURNS integer
              AS $body$
                  INSERT INTO reports_gift_card_pass_transactions
                              (
                                          gift_card_pass_id,
                                          gift_card_pass_transaction_id,
                                          merchant_id,
                                          customer_id,
                                          location_id,
                                          original_location_id,
                                          order_id,
                                          received_at_tz,
                                          charged_amount,
                                          redeemed_amount,
                                          remaining_amount,
                                          original_balance_amount,
                                          is_custom_amount,
                                          created_at,
                                          updated_at
                              )
                  SELECT          gift_card_passes.id                                AS gift_card_pass_id,
                                  gift_card_pass_transactions.id                     AS gift_card_transaction_id,
                                  orders.merchant_id                                 AS merchant_id,
                                  COALESCE(orders.customer_id, original_customer_id) AS customer_id,
                                  orders.location_id                                 AS location_id,
                                  original_location_id                               AS original_location_id,
                                  orders.id                                          AS order_id,
                                  orders.received_at AT TIME zone locations.timezone AS received_at_tz,
                                  gift_card_pass_transactions.total_amount           AS charged_amount,
                                  redeemed_amount                                    AS redeemed_amount,
                                  gift_card_passes.original_amount - redeemed_amount AS remaining_amount,
                                  gift_card_passes.original_amount                   AS original_balance_amount,
                                  gift_card_passes.is_custom_amount                  AS is_custom_amount,
                                  now()                                              AS created_at,
                                  now()                                              AS updated_at
                  FROM            gift_card_pass_transactions
                  LEFT OUTER JOIN gift_card_passes
                  ON              gift_card_pass_transactions.gift_card_pass_id = gift_card_passes.id
                  LEFT OUTER JOIN payment_transactions
                  ON              payment_transactions.payment_details::json->>'giftCardPassTransactionId'::text = gift_card_pass_transactions.id::text
                  LEFT OUTER JOIN orders
                  ON              orders.id = payment_transactions.order_id
                  LEFT OUTER JOIN locations
                  ON              locations.id = orders.location_id
                  JOIN           lateral (
                        SELECT o.location_id AS original_location_id,
                               o.customer_id AS original_customer_id
                        FROM   order_items AS oi,
                               orders AS o
                        WHERE  oi.id = gift_card_passes.order_item_id
                        AND    oi.order_id = o.id
                  ) oli
                   ON true
                   JOIN           lateral (
                        SELECT SUM(gcpt.total_amount) AS redeemed_amount
                        FROM gift_card_pass_transactions gcpt
                        WHERE gcpt.gift_card_pass_id = gift_card_passes.id
                        AND   gcpt.created_at <= gift_card_pass_transactions.created_at
                   ) ra
                  ON true
                  WHERE           orders.id = ANY ($1)
                  ON CONFLICT (gift_card_pass_id, gift_card_pass_transaction_id)
                  DO UPDATE SET merchant_id = excluded.merchant_id,
                                customer_id = excluded.customer_id,
                                location_id = excluded.location_id,
                                original_location_id = excluded.original_location_id,
                                order_id = excluded.order_id,
                                received_at_tz = excluded.received_at_tz,
                                charged_amount = excluded.charged_amount,
                                redeemed_amount = excluded.redeemed_amount,
                                remaining_amount = excluded.remaining_amount,
                                original_balance_amount = excluded.original_balance_amount,
                                is_custom_amount = excluded.is_custom_amount,
                                updated_at = excluded.updated_at
                  RETURNING array_length($1, 1)
              $body$
              language sql;
        - sql:
            sql: >
              SELECT reports_gift_card_pass_transactions_update( ARRAY (SELECT orders.id FROM orders) );
  - changeSet:
      id: 116
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp);
              CREATE OR REPLACE FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             product_id uuid,
                             is_variant_of_product_id uuid,
                             order_id uuid,
                             quantity numeric,
                             location_id uuid,
                             returned_quantity numeric,
                             returned_amount numeric,
                             received_at_tz timestamp,
                             taxable_amount numeric,
                             non_taxable_amount numeric,
                             tax_amount numeric,
                             discount_amount numeric,
                             cogs_amount numeric,
                             gross_sale_amount numeric)
              AS $body$
                  SELECT   oi.id              AS id,
                           oi.merchant_id     AS merchant_id,
                           oi.product_id      AS product_id,
                           p.is_variant_of_product_id AS is_variant_of_product_id,
                           oi.order_id        AS order_id,
                           CASE oi.payment_status = 'paid' WHEN TRUE  THEN oi.quantity
                                                           WHEN FALSE THEN 0
                           END AS quantity,
                           orders.location_id AS location_id,
                           CASE oi.payment_status = 'refunded' WHEN TRUE  THEN quantity
                                                               WHEN FALSE THEN 0
                           END AS returned_quantity,
                           CASE oi.payment_status = 'refunded' WHEN TRUE  THEN total_price_amount
                                                               WHEN FALSE THEN 0
                           END AS returned_amount,
                           orders.received_at at time zone locations.timezone AS received_at_tz,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) > 0
                                WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                WHEN FALSE THEN 0
                             END, 2) AS taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) = 0
                                WHEN TRUE  THEN oi.total_price_amount
                                WHEN FALSE THEN 0
                             END, 2) AS non_taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS tax_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.discount_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS discount_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.cost_amount * oi.quantity, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS cogs_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_sale_amount
                  FROM     order_items oi,
                           orders,
                           locations,
                           products p
                  WHERE    oi.order_id = orders.id
                  AND      oi.product_id = p.id
                  AND      locations.id = orders.location_id
                  AND      oi.merchant_id = $1
                  AND      orders.location_id = ANY ($2)
                  AND      orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;
  - changeSet:
      id: 117
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropNotNullConstraint:
            tableName: locations
            columnName: phone_number
        - dropNotNullConstraint:
            tableName: locations
            columnName: address_line_1
        - dropNotNullConstraint:
            tableName: locations
            columnName: city
        - dropNotNullConstraint:
            tableName: locations
            columnName: state
        - dropNotNullConstraint:
            tableName: locations
            columnName: country
        - dropNotNullConstraint:
            tableName: locations
            columnName: postal_code
  - changeSet:
      id: 118
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              DELETE FROM reports_gift_card_pass_transactions;
        - dropColumn:
            tableName: reports_gift_card_pass_transactions
            columnName: redeemed_amount
        - dropColumn:
            tableName: reports_gift_card_pass_transactions
            columnName: original_balance_amount
        - dropColumn:
            tableName: reports_gift_card_pass_transactions
            columnName: is_custom_amount
        - addColumn:
            tableName: reports_gift_card_pass_transactions
            columns:
              - column:
                  name: original_balance_group
                  type: varchar(30)
                  constraints: { nullable: false }
        - createIndex:
            columns:
              - column:
                  name: original_balance_group
            indexName: idx_original_balance_group
            tableName: reports_gift_card_pass_transactions
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_gift_card_passes_update(order_ids uuid[])
              RETURNS integer
              AS $body$
                  INSERT INTO reports_gift_card_pass_transactions
                              (
                                          gift_card_pass_id,
                                          gift_card_pass_transaction_id,
                                          merchant_id,
                                          customer_id,
                                          location_id,
                                          original_location_id,
                                          order_id,
                                          received_at_tz,
                                          charged_amount,
                                          remaining_amount,
                                          original_balance_group,
                                          created_at,
                                          updated_at
                              )
                  SELECT          gift_card_passes.id                                AS gift_card_pass_id,
                                  NULL                                               AS gift_card_transaction_id,
                                  orders.merchant_id                                 AS merchant_id,
                                  orders.customer_id                                 AS customer_id,
                                  orders.location_id                                 AS location_id,
                                  orders.location_id                                 AS original_location_id,
                                  orders.id                                          AS order_id,
                                  orders.received_at AT TIME zone locations.timezone AS received_at_tz,
                                  0                                                  AS charged_amount,
                                  gift_card_passes.original_amount                   AS remaining_amount,
                                  CASE WHEN gift_card_passes.is_custom_amount THEN 'custom'
                                       ELSE gift_card_passes.original_amount::text
                                  END                                                AS original_balance_group,
                                  now()                                              AS created_at,
                                  now()                                              AS updated_at
                  FROM            gift_card_passes
                  LEFT OUTER JOIN order_items
                  ON              gift_card_passes.order_item_id = order_items.id
                  LEFT OUTER JOIN orders
                  ON              orders.id = order_items.order_id
                  LEFT OUTER JOIN locations
                  ON              locations.id = orders.location_id
                  WHERE           orders.id = ANY ($1)
                  ON CONFLICT (gift_card_pass_id, gift_card_pass_transaction_id)
                  DO UPDATE SET merchant_id = excluded.merchant_id,
                                customer_id = excluded.customer_id,
                                location_id = excluded.location_id,
                                original_location_id = excluded.original_location_id,
                                order_id = excluded.order_id,
                                received_at_tz = excluded.received_at_tz,
                                charged_amount = excluded.charged_amount,
                                remaining_amount = excluded.remaining_amount,
                                original_balance_group = excluded.original_balance_group,
                                updated_at = excluded.updated_at
                  RETURNING array_length($1, 1)
              $body$
              language sql;
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_gift_card_pass_transactions_update(order_ids uuid[])
              RETURNS integer
              AS $body$
                  INSERT INTO reports_gift_card_pass_transactions
                              (
                                          gift_card_pass_id,
                                          gift_card_pass_transaction_id,
                                          merchant_id,
                                          customer_id,
                                          location_id,
                                          original_location_id,
                                          order_id,
                                          received_at_tz,
                                          charged_amount,
                                          remaining_amount,
                                          original_balance_group,
                                          created_at,
                                          updated_at
                              )
                  SELECT          gift_card_passes.id                                AS gift_card_pass_id,
                                  gift_card_pass_transactions.id                     AS gift_card_transaction_id,
                                  orders.merchant_id                                 AS merchant_id,
                                  COALESCE(orders.customer_id, original_customer_id) AS customer_id,
                                  orders.location_id                                 AS location_id,
                                  original_location_id                               AS original_location_id,
                                  orders.id                                          AS order_id,
                                  orders.received_at AT TIME zone locations.timezone AS received_at_tz,
                                  gift_card_pass_transactions.total_amount           AS charged_amount,
                                  gift_card_passes.original_amount - redeemed_amount AS remaining_amount,
                                  CASE WHEN gift_card_passes.is_custom_amount THEN 'custom'
                                       ELSE gift_card_passes.original_amount::text
                                  END                                                AS original_balance_group,
                                  now()                                              AS created_at,
                                  now()                                              AS updated_at
                  FROM            gift_card_pass_transactions
                  LEFT OUTER JOIN gift_card_passes
                  ON              gift_card_pass_transactions.gift_card_pass_id = gift_card_passes.id
                  LEFT OUTER JOIN payment_transactions
                  ON              payment_transactions.payment_details::json->>'giftCardPassTransactionId'::text = gift_card_pass_transactions.id::text
                  LEFT OUTER JOIN orders
                  ON              orders.id = payment_transactions.order_id
                  LEFT OUTER JOIN locations
                  ON              locations.id = orders.location_id
                  JOIN           lateral (
                        SELECT o.location_id AS original_location_id,
                               o.customer_id AS original_customer_id
                        FROM   order_items AS oi,
                               orders AS o
                        WHERE  oi.id = gift_card_passes.order_item_id
                        AND    oi.order_id = o.id
                  ) oli
                   ON true
                   JOIN           lateral (
                        SELECT SUM(gcpt.total_amount) AS redeemed_amount
                        FROM gift_card_pass_transactions gcpt
                        WHERE gcpt.gift_card_pass_id = gift_card_passes.id
                        AND   gcpt.created_at <= gift_card_pass_transactions.created_at
                   ) ra
                  ON true
                  WHERE           orders.id = ANY ($1)
                  ON CONFLICT (gift_card_pass_id, gift_card_pass_transaction_id)
                  DO UPDATE SET merchant_id = excluded.merchant_id,
                                customer_id = excluded.customer_id,
                                location_id = excluded.location_id,
                                original_location_id = excluded.original_location_id,
                                order_id = excluded.order_id,
                                received_at_tz = excluded.received_at_tz,
                                charged_amount = excluded.charged_amount,
                                remaining_amount = excluded.remaining_amount,
                                original_balance_group = excluded.original_balance_group,
                                updated_at = excluded.updated_at
                  RETURNING array_length($1, 1)
              $body$
              language sql;
        - sql:
            sql: >
              SELECT reports_gift_card_passes_update( ARRAY (SELECT orders.id FROM orders) );
              SELECT reports_gift_card_pass_transactions_update( ARRAY (SELECT orders.id FROM orders) );
  - changeSet:
      id: 119
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        # reports_gift_card_pass_transactions.gift_card_pass_transaction_id needs to be text instead of uuid,
        # as we need to generate conflict on upsert using a default ''.
        # At the time of this writing upsertions with null values as conflict are not supported
        - dropForeignKeyConstraint:
            baseTableName: reports_gift_card_pass_transactions
            constraintName: fk_gift_card_pass_transaction
        - modifyDataType:
            tableName: reports_gift_card_pass_transactions
            columnName: gift_card_pass_transaction_id
            newDataType: varchar(255)
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_gift_card_passes_update(order_ids uuid[])
              RETURNS integer
              AS $body$
                  INSERT INTO reports_gift_card_pass_transactions
                              (
                                          gift_card_pass_id,
                                          gift_card_pass_transaction_id,
                                          merchant_id,
                                          customer_id,
                                          location_id,
                                          original_location_id,
                                          order_id,
                                          received_at_tz,
                                          charged_amount,
                                          remaining_amount,
                                          original_balance_group,
                                          created_at,
                                          updated_at
                              )
                  SELECT          gift_card_passes.id                                AS gift_card_pass_id,
                                  ''                                                 AS gift_card_transaction_id,
                                  orders.merchant_id                                 AS merchant_id,
                                  orders.customer_id                                 AS customer_id,
                                  orders.location_id                                 AS location_id,
                                  orders.location_id                                 AS original_location_id,
                                  orders.id                                          AS order_id,
                                  orders.received_at AT TIME zone locations.timezone AS received_at_tz,
                                  0                                                  AS charged_amount,
                                  gift_card_passes.original_amount                   AS remaining_amount,
                                  CASE WHEN gift_card_passes.is_custom_amount THEN 'custom'
                                       ELSE gift_card_passes.original_amount::text
                                  END                                                AS original_balance_group,
                                  now()                                              AS created_at,
                                  now()                                              AS updated_at
                  FROM            gift_card_passes
                  LEFT OUTER JOIN order_items
                  ON              gift_card_passes.order_item_id = order_items.id
                  LEFT OUTER JOIN orders
                  ON              orders.id = order_items.order_id
                  LEFT OUTER JOIN locations
                  ON              locations.id = orders.location_id
                  WHERE           orders.id = ANY ($1)
                  ON CONFLICT (gift_card_pass_id, gift_card_pass_transaction_id)
                  DO UPDATE SET merchant_id = excluded.merchant_id,
                                customer_id = excluded.customer_id,
                                location_id = excluded.location_id,
                                original_location_id = excluded.original_location_id,
                                order_id = excluded.order_id,
                                received_at_tz = excluded.received_at_tz,
                                charged_amount = excluded.charged_amount,
                                remaining_amount = excluded.remaining_amount,
                                original_balance_group = excluded.original_balance_group,
                                updated_at = excluded.updated_at
                  RETURNING array_length($1, 1)
              $body$
              language sql;
        - sql:
            sql: >
              DELETE FROM reports_gift_card_pass_transactions;
              CREATE UNIQUE INDEX idx_reports_gift_card_pass_transactions ON reports_gift_card_pass_transactions (gift_card_pass_id, COALESCE(gift_card_pass_transaction_id, ''));
              SELECT reports_gift_card_passes_update( ARRAY (SELECT orders.id FROM orders) );
              SELECT reports_gift_card_pass_transactions_update( ARRAY (SELECT orders.id FROM orders) );
  - changeSet:
      id: 120
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - modifyDataType:
            tableName: exports
            columnName: type
            newDataType: varchar(50)
  - changeSet:
      id: 121
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: merchants
            columns:
              - column:
                  name: setup_steps
                  type: jsonb
              - column:
                  name: setup_completed
                  type: boolean
                  defaultValue: false
                  constraints: { nullable: false }
  - changeSet:
      id: 122
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: purchase_orders
            columns:
              - column:
                  name: deleted_at
                  type: datetime
  - changeSet:
      id: 123
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: merchants
            columns:
              - column:
                  name: mode
                  type: varchar(30)
                  constraints: { nullable: false }
                  defaultValue: production
                  remarks: "io.paytouch.core.data.model.enums.MerchantMode"
              - column:
                  name: demo_merchant_id
                  type: uuid
  - changeSet:
      id: 124
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE merchants SET setup_completed = true;
  - changeSet:
      id: 125
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: loyalty_programs
            columns:
              - column:
                  name: template_details_text
                  type: text
        - addColumn:
            tableName: customer_loyalty_programs
            columns:
              - column:
                  name: lookup_id
                  type: varchar(20)
        - sql:
            sql: >
              update customer_loyalty_programs set lookup_id = (select ((10 * 10 * random())::bigint)::varchar);
        - addNotNullConstraint:
            tableName: customer_loyalty_programs
            columnDataType: varchar(20)
            columnName: lookup_id
  - changeSet:
      id: 126
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - modifyDataType:
            tableName: customer_loyalty_programs
            columnName: android_pass_public_url
            newDataType: text
  - changeSet:
      id: 127
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: merchants
            columns:
              - column:
                  name: has_sample_data
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
  - changeSet:
      id: 128
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: user_locations
            columns:
              - column:
                  name: merchant_id
                  type: uuid
        - sql:
            sql: >
              update user_locations set merchant_id = (select merchant_id from locations l where user_locations.location_id = l.id limit 1);
        - addNotNullConstraint:
            columnDataType: uuid
            columnName: merchant_id
            tableName: user_locations
  - changeSet:
      id: 129
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: loyalty_programs
            columns:
              - column:
                  name: minimum_purchase_amount
                  type: number(12,2)
              - column:
                  name: points_to_reward
                  type: int
                  defaultValue: 0
                  constraints: { nullable: false }
        - dropColumn:
            tableName: loyalty_rewards
            columnName: points
  - changeSet:
      id: 130
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - dropNotNullConstraint:
            tableName: users
            columnName: pin
  - changeSet:
      id: 131
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - dropColumn:
            tableName: merchants
            columnName: has_sample_data
        - addColumn:
            tableName: merchants
            columns:
              - column:
                  name: loading_status
                  type: varchar(20)
                  value: "successful"
        - addNotNullConstraint:
            tableName: merchants
            columnName: loading_status
  - changeSet:
      id: 132
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE users SET pin = NULL WHERE deleted_at IS NOT NULL;
  - changeSet:
      id: 133
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: merchants
            columns:
              - column:
                  name: business_name
                  type: varchar(255)
              - column:
                  name: default_zone_id
                  type: varchar(255)
        - sql:
            sql: >
              UPDATE merchants SET business_name = (SELECT name FROM locations l WHERE merchants.id = l.merchant_id LIMIT 1) WHERE id in (SELECT merchant_id FROM locations);
              UPDATE merchants SET default_zone_id = (SELECT timezone FROM locations l WHERE merchants.id = l.merchant_id LIMIT 1) WHERE id in (SELECT merchant_id FROM locations);
              UPDATE merchants SET business_name = 'My Business Name' WHERE id NOT in (SELECT merchant_id FROM locations);
              UPDATE merchants SET default_zone_id = 'America/Los_Angeles' WHERE id NOT in (SELECT merchant_id FROM locations);
        - addNotNullConstraint:
            tableName: merchants
            columnName: business_name
        - addNotNullConstraint:
            tableName: merchants
            columnName: default_zone_id
        - renameColumn:
            tableName: merchants
            oldColumnName: demo_merchant_id
            newColumnName: switch_merchant_id
        - addForeignKeyConstraint:
            baseColumnNames: switch_merchant_id
            baseTableName: merchants
            constraintName: fk_merchant
            referencedColumnNames: id
            referencedTableName: merchants
  - changeSet:
      id: 134
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE customer_loyalty_programs clp
              SET lookup_id = randlookup.lkp FROM
               (SELECT id, substring(((pow(10, 11) * random())::bigint)::varchar, 0, 11) lkp
                FROM customer_loyalty_programs) randlookup
              WHERE clp.id = randlookup.id;
  - changeSet:
      id: 135
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - renameTable:
            oldTableName: customer_loyalty_programs
            newTableName: loyalty_memberships
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_customers_func(merchant_id uuid, location_ids uuid[])
              RETURNS TABLE (id uuid,
                             first_name varchar,
                             last_name varchar,
                             location_id uuid,
                             customer_id uuid,
                             spend numeric,
                             first_order_received_at timestamptz,
                             first_loyalty_opt_in_at timestamp,
                             merchant_id uuid)
              AS $body$
                  SELECT          customer_merchants.customer_id        AS id,
                                  customer_merchants.first_name         AS first_name,
                                  customer_merchants.last_name          AS last_name,
                                  customer_locations.location_id        AS location_id,
                                  customer_locations.customer_id        AS customer_id,
                                  customer_locations.total_spend_amount AS spend,
                                  first_order_received_at,
                                  (
                                         SELECT MIN(loyalty_memberships.customer_opt_in_at)
                                         FROM   loyalty_memberships
                                         WHERE  loyalty_memberships.customer_id = customer_merchants.customer_id) AS first_loyalty_opt_in_at,
                                  customer_merchants.merchant_id                                                        AS merchant_id
                  FROM            customer_merchants
                  LEFT OUTER JOIN customer_locations
                  ON              customer_merchants.customer_id = customer_locations.customer_id
                  AND             customer_merchants.merchant_id = $1
                  AND             customer_locations.location_id = ANY ($2)
                  JOIN            lateral
                                  (
                                         SELECT MIN(reports_orders.received_at) AS first_order_received_at
                                         FROM   reports_all_orders_func($1, $2) AS reports_orders
                                         WHERE  reports_orders.location_id = customer_locations.location_id
                                         AND    reports_orders.customer_id = customer_locations.customer_id ) related_orders
                  ON              true
              $body$
              language sql;
        - createTable:
            tableName: loyalty_points_history
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: loyalty_membership_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_loyalty_membership,
                      references: loyalty_memberships(id),
                    }
              - column:
                  name: type
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: points
                  type: int
                  constraints: { nullable: false }
              - column:
                  name: object_id
                  type: uuid
              - column:
                  name: object_type
                  type: varchar(20)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: reward_redemptions
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: loyalty_reward_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_loyalty_reward,
                      references: loyalty_rewards(id),
                    }
              - column:
                  name: loyalty_membership_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_loyalty_membership,
                      references: loyalty_memberships(id),
                    }
              - column:
                  name: points
                  type: int
                  constraints: { nullable: false }
              - column:
                  name: status
                  type: varchar(20)
              - column:
                  name: order_id
                  type: uuid
              - column:
                  name: object_id
                  type: uuid
              - column:
                  name: object_type
                  type: varchar(20)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - dropTable:
            tableName: customer_loyalty_rewards
  - changeSet:
      id: 136
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DELETE FROM loyalty_reward_products;
              DELETE FROM loyalty_memberships;
              DELETE FROM loyalty_programs lp USING
                (SELECT MIN(created_at) AS created_at,
                        merchant_id
                 FROM loyalty_programs
                 GROUP BY merchant_id HAVING COUNT(*) > 1) b
              WHERE lp.merchant_id = b.merchant_id
                AND lp.created_at <> b.created_at;
        - addUniqueConstraint:
            tableName: loyalty_memberships
            columnNames: customer_id, loyalty_program_id
  - changeSet:
      id: 137
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE loyalty_rewards SET type = 'discount_percentage' WHERE type = 'discount';
  - changeSet:
      id: 138
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: loyalty_programs
            columns:
              - column:
                  name: welcome_email_subject
                  type: varchar(255)
              - column:
                  name: welcome_email_color
                  type: varchar(255)
  - changeSet:
      id: 139
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE orders SET payment_status = 'voided' WHERE payment_status = 'cancelled';
              UPDATE order_items SET payment_status = 'voided' WHERE payment_status = 'cancelled';
  - changeSet:
      id: 140
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE reward_redemptions SET status = 'reserved' WHERE status = 'redeemed';
              UPDATE reward_redemptions SET status = 'redeemed' WHERE status = 'synced';
  - changeSet:
      id: 141
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DELETE FROM order_item_discounts WHERE title IS NULL AND amount = 0 AND type = 'percentage';
  - changeSet:
      id: 142
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropForeignKeyConstraint:
            baseTableName: order_discounts
            constraintName: discounts
        - dropForeignKeyConstraint:
            baseTableName: order_discounts
            constraintName: fk_discount
        - addForeignKeyConstraint:
            baseColumnNames: discount_id
            baseTableName: order_discounts
            constraintName: fk_discount
            onDelete: "SET NULL"
            referencedColumnNames: id
            referencedTableName: discounts
  - changeSet:
      id: 143
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addColumn:
            tableName: payment_transactions
            columns:
              - column:
                  name: refunded_payment_transaction_id
                  type: uuid
                  constraints:
                    {
                      foreignKeyName: fk_payment_transaction,
                      references: payment_transactions(id),
                    }
  - changeSet:
      id: 144
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE orders SET source = 'register';
              UPDATE reports_orders SET source = 'register';
  - changeSet:
      id: 145
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              WITH x AS (
                SELECT id, row_number()
                OVER (
                  PARTITION BY merchant_id, pin
                  ORDER BY is_owner DESC
                ) AS rn
                FROM users
                WHERE pin IS NOT NULL
              ) UPDATE users SET pin = NULL WHERE id IN (SELECT x.id FROM x WHERE x.rn > 1);
        - addUniqueConstraint:
            tableName: users
            columnNames: merchant_id, pin
  - changeSet:
      id: 146
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addNotNullConstraint:
            columnDataType: varchar(255)
            columnName: country
            tableName: locations
            defaultNullValue: US
  - changeSet:
      id: 147
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - addNotNullConstraint:
            columnDataType: varchar(20)
            columnName: creditcall_terminal_id
            tableName: merchants
        - addNotNullConstraint:
            columnDataType: varchar(255)
            columnName: creditcall_transaction_key
            tableName: merchants
  - changeSet:
      id: 148
      author: Marco Manzi <marco.manzi@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_customers_func(merchant_id uuid, location_ids uuid[])
              RETURNS TABLE (id uuid,
                             first_name varchar,
                             last_name varchar,
                             location_id uuid,
                             customer_id uuid,
                             spend numeric,
                             first_order_received_at timestamptz,
                             first_loyalty_opt_in_at timestamp,
                             merchant_id uuid)
              AS $body$
                  SELECT          customer_merchants.customer_id        AS id,
                                  customer_merchants.first_name         AS first_name,
                                  customer_merchants.last_name          AS last_name,
                                  customer_locations.location_id        AS location_id,
                                  customer_locations.customer_id        AS customer_id,
                                  customer_locations.total_spend_amount AS spend,
                                  first_order_received_at,
                                  (
                                         SELECT COALESCE(MIN(loyalty_memberships.customer_opt_in_at), MIN(loyalty_memberships.merchant_opt_in_at))
                                         FROM   loyalty_memberships
                                         WHERE  loyalty_memberships.customer_id = customer_merchants.customer_id) AS first_loyalty_opt_in_at,
                                  customer_merchants.merchant_id                                                        AS merchant_id
                  FROM            customer_merchants
                  LEFT OUTER JOIN customer_locations
                  ON              customer_merchants.customer_id = customer_locations.customer_id
                  AND             customer_merchants.merchant_id = $1
                  AND             customer_locations.location_id = ANY ($2)
                  JOIN            lateral
                                  (
                                         SELECT MIN(reports_orders.received_at) AS first_order_received_at
                                         FROM   reports_all_orders_func($1, $2) AS reports_orders
                                         WHERE  reports_orders.location_id = customer_locations.location_id
                                         AND    reports_orders.customer_id = customer_locations.customer_id ) related_orders
                  ON              true
              $body$
              language sql;
  - changeSet:
      id: 149
      author: Marco Manzi <marco.manzi@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp);
              CREATE OR REPLACE FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             product_id uuid,
                             is_variant_of_product_id uuid,
                             order_id uuid,
                             quantity numeric,
                             location_id uuid,
                             returned_quantity numeric,
                             returned_amount numeric,
                             received_at_tz timestamp,
                             taxable_amount numeric,
                             non_taxable_amount numeric,
                             tax_amount numeric,
                             discount_amount numeric,
                             cogs_amount numeric,
                             gross_sale_amount numeric,
                             gross_profit_amount numeric)
              AS $body$
                  SELECT   oi.id              AS id,
                           oi.merchant_id     AS merchant_id,
                           oi.product_id      AS product_id,
                           p.is_variant_of_product_id AS is_variant_of_product_id,
                           oi.order_id        AS order_id,
                           CASE oi.payment_status = 'paid' WHEN TRUE  THEN oi.quantity
                                                           WHEN FALSE THEN 0
                           END AS quantity,
                           orders.location_id AS location_id,
                           CASE oi.payment_status = 'refunded' WHEN TRUE  THEN quantity
                                                               WHEN FALSE THEN 0
                           END AS returned_quantity,
                           CASE oi.payment_status = 'refunded' WHEN TRUE  THEN total_price_amount
                                                               WHEN FALSE THEN 0
                           END AS returned_amount,
                           orders.received_at at time zone locations.timezone AS received_at_tz,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) > 0
                                WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                WHEN FALSE THEN 0
                             END, 2) AS taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) = 0
                                WHEN TRUE  THEN oi.total_price_amount
                                WHEN FALSE THEN 0
                             END, 2) AS non_taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS tax_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.discount_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS discount_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.cost_amount * oi.quantity, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS cogs_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_sale_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0) - COALESCE(oi.cost_amount * oi.quantity, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_profit_amount
                  FROM     order_items oi,
                           orders,
                           locations,
                           products p
                  WHERE    oi.order_id = orders.id
                  AND      oi.product_id = p.id
                  AND      locations.id = orders.location_id
                  AND      oi.merchant_id = $1
                  AND      orders.location_id = ANY ($2)
                  AND      orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;
  - changeSet:
      id: 150
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - createTable:
            tableName: catalogs
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_merchant, references: merchants(id) }
              - column:
                  name: name
                  type: varchar(255)
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: product_category_options
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_merchant, references: merchants(id) }
              - column:
                  name: product_category_id
                  type: uuid
                  constraints:
                    {
                      foreignKeyName: fk_product_category,
                      references: product_categories(id),
                    }
              - column:
                  name: take_away_enabled
                  type: boolean
              - column:
                  name: delivery_enabled
                  type: boolean
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addColumn:
            tableName: categories
            columns:
              - column:
                  name: catalog_id
                  type: uuid
                  constraints:
                    { foreignKeyName: fk_catalog, references: catalogs(id) }
  - changeSet:
      id: 151
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - createTable:
            tableName: online_order_attributes
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: acceptance_status
                  type: varchar(30)
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.data.model.enums.AcceptanceStatus"
              - column:
                  name: rejection_reason
                  type: varchar(255)
              - column:
                  name: prepare_by_time
                  type: varchar(255)
              - column:
                  name: estimated_prep_time_in_mins
                  type: int
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: order_delivery_addresses
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: address_line_1
                  type: varchar(255)
              - column:
                  name: address_line_2
                  type: varchar(255)
              - column:
                  name: city
                  type: varchar(255)
              - column:
                  name: state
                  type: varchar(255)
              - column:
                  name: country
                  type: varchar(255)
              - column:
                  name: postal_code
                  type: varchar(12)
              - column:
                  name: driving_distance_in_meters
                  type: number(12,2)
              - column:
                  name: estimated_driving_time_in_mins
                  type: int
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addColumn:
            tableName: orders
            columns:
              - column:
                  name: delivery_address_id
                  type: uuid
                  constraints:
                    {
                      foreignKeyName: fk_delivery_address,
                      references: order_delivery_addresses(id),
                    }
              - column:
                  name: online_order_attribute_id
                  type: uuid
                  constraints:
                    {
                      foreignKeyName: fk_online_order_attribute,
                      references: online_order_attributes(id),
                    }
        - addNotNullConstraint:
            tableName: catalogs
            columnDataType: uuid
            columnName: merchant_id
        - addNotNullConstraint:
            tableName: product_category_options
            columnDataType: uuid
            columnName: merchant_id
        - addNotNullConstraint:
            tableName: product_category_options
            columnDataType: uuid
            columnName: product_category_id
  - changeSet:
      id: 152
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: reward_redemptions
            columns:
              - column:
                  name: loyalty_reward_type
                  type: varchar(30)
                  remarks: "io.paytouch.core.entities.enums.RewardType"
        - sql:
            sql: >
              UPDATE reward_redemptions
              SET    loyalty_reward_type = subquery.loyalty_reward_type
              FROM   (SELECT rr.id,
                            lr.type as loyalty_reward_type
                    FROM   loyalty_rewards lr,
                           reward_redemptions rr
                    WHERE lr.id = rr.loyalty_reward_id) AS subquery
              WHERE reward_redemptions.id = subquery.id;
              -- Fix incoherent object_type and loyalty_reward_type [PP-1376]
              UPDATE reward_redemptions
              SET loyalty_reward_type = 'discount_percentage'
              WHERE object_type = 'order_discount' AND loyalty_reward_type NOT LIKE 'discount%';

              UPDATE reward_redemptions
              SET loyalty_reward_type = 'free_product'
              WHERE object_type = 'order_discount' AND loyalty_reward_type NOT IN ('free_product', 'gift_card');
        - addNotNullConstraint:
            tableName: reward_redemptions
            columnDataType: varchar(30)
            columnName: loyalty_reward_type
  - changeSet:
      id: 153
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE reward_redemptions
              SET loyalty_reward_type = 'discount_percentage'
              WHERE object_type = 'order_discount' AND loyalty_reward_type NOT LIKE 'discount%';

              UPDATE reward_redemptions
              SET loyalty_reward_type = 'free_product'
              WHERE object_type = 'order_item' AND loyalty_reward_type NOT IN ('free_product', 'gift_card');
  - changeSet:
      id: 154
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: location_settings
            columns:
              - column:
                  name: online_storefront_enabled
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: max_driving_distance_in_meters
                  type: number(12,2)
  - changeSet:
      id: 155
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE products
              SET has_parts = false
              WHERE id NOT IN (SELECT product_id FROM product_parts);

              UPDATE products
              SET has_parts = true
              WHERE id IN (SELECT product_id FROM product_parts);
  - changeSet:
      id: 156
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_orders_update(ids uuid[])
              RETURNS integer
              AS $body$
                   INSERT INTO reports_orders (
                       id,
                       merchant_id,
                       customer_id,
                       location_id,
                       received_at,
                       source,
                       type,
                       payment_type,
                       payment_status,
                       is_invoice,
                       gross_sale_amount,
                       net_sale_amount,
                       gross_profit_amount,
                       total_discount_amount,
                       tip_amount,
                       refunds_amount,
                       received_at_tz,
                       cogs_amount,
                       non_taxable_amount,
                       taxable_amount,
                       collected_tax_amount,
                       waiting_time,
                       feedback_rating,
                       created_at,
                       updated_at
                   )
                   SELECT          orders.id             AS id,
                                   orders.merchant_id    AS merchant_id,
                                   orders.customer_id    AS customer_id,
                                   orders.location_id    AS location_id,
                                   orders.received_at    AS received_at,
                                   orders.source         AS source,
                                   orders.type           AS type,
                                   orders.payment_type   AS payment_type,
                                   orders.payment_status AS payment_status,
                                   orders.is_invoice     AS is_invoice,
                                   SUM(COALESCE(gross_sale_amount, 0))     AS gross_sale_amount,
                                   SUM(COALESCE(net_sale_amount, 0))       AS net_sale_amount,
                                   SUM(COALESCE(gross_profit_amount, 0))   AS gross_profit_amount,
                                   SUM(COALESCE(total_discount_amount, 0)) AS total_discount_amount,
                                   SUM(COALESCE(orders.tip_amount, 0))     AS tip_amount,
                                   SUM(COALESCE(refunds_amount, 0))        AS refunds_amount,
                                   orders.received_at at time zone locations.timezone AS received_at_tz,
                                   SUM(COALESCE(cogs_amount, 0))           AS cogs_amount,
                                   SUM(COALESCE(non_taxable_amount, 0))    AS non_taxable_amount,
                                   SUM(COALESCE(taxable_amount, 0))        AS taxable_amount,
                                   SUM(COALESCE(collected_tax_amount, 0))  AS collected_tax_amount,
                                   EXTRACT(epoch FROM (orders.completed_at - orders.received_at)) AS waiting_time,
                                   AVG(order_feedbacks.rating)             AS feedback_rating,
                                   now() AS created_at,
                                   now() AS updated_at
                   FROM            orders
                   LEFT OUTER JOIN locations
                   ON              locations.id = orders.location_id
                   LEFT OUTER JOIN order_feedbacks
                   ON              order_feedbacks.order_id = orders.id
                   JOIN            lateral
                                   (
                                          SELECT COALESCE(SUM((pt.payment_details::json->>'amount')::float), 0) AS refunds_amount
                                          FROM   payment_transactions pt
                                          WHERE  pt.order_id = orders.id
                                          AND    pt.type IN ('refund', 'void')
                                          AND    pt.payment_type != 'gift_card' ) refunds
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT COALESCE(SUM((pt.payment_details::json->>'amount')::float), 0) AS gift_cards_payments_amount
                                          FROM   payment_transactions pt
                                          WHERE  pt.order_id = orders.id
                                          AND    pt.type = 'payment'
                                          AND    pt.payment_type = 'gift_card' ) gift_card_transactions
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT   SUM(ROUND(
                                                     CASE COALESCE(oi.tax_amount, 0) > 0 WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                                                                         WHEN FALSE THEN 0
                                                     END, 2))                                               AS taxable_amount,
                                                   SUM(ROUND(
                                                     CASE COALESCE(oi.tax_amount, 0) = 0 WHEN TRUE  THEN oi.total_price_amount
                                                                                         WHEN FALSE THEN 0
                                                   END, 2))                                                 AS non_taxable_amount,
                                                   SUM(ROUND(COALESCE(oi.cost_amount * oi.quantity, 0), 2)) AS cogs_amount,
                                                   SUM(ROUND(COALESCE(oi.discount_amount, 0), 2))           AS discount_amount,
                                                   SUM(ROUND(COALESCE(oi.tax_amount, 0), 2))                AS collected_tax_amount
                                          FROM     order_items oi
                                          WHERE    oi.order_id = orders.id
                                          AND      oi.payment_status = 'paid') paid_items
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT COALESCE(orders.total_amount, 0) - refunds_amount - gift_cards_payments_amount AS gross_sale_amount ) gsa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT gross_sale_amount - collected_tax_amount - COALESCE(orders.tip_amount, 0) AS net_sale_amount ) nsa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT net_sale_amount - cogs_amount AS gross_profit_amount ) gpa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT paid_items.discount_amount + COALESCE(orders.ticket_discount_amount, 0) AS total_discount_amount ) tda
                   ON              true
                   WHERE           orders.id = ANY ($1)
                   GROUP BY orders.id, locations.timezone
                   ON CONFLICT (id)
                   DO UPDATE SET   merchant_id = excluded.merchant_id,
                                   customer_id = excluded.customer_id,
                                   location_id = excluded.location_id,
                                   received_at = excluded.received_at,
                                   source = excluded.source,
                                   type = excluded.type,
                                   payment_type = excluded.payment_type,
                                   payment_status = excluded.payment_status,
                                   is_invoice = excluded.is_invoice,
                                   gross_sale_amount = excluded.gross_sale_amount,
                                   net_sale_amount = excluded.net_sale_amount,
                                   gross_profit_amount = excluded.gross_profit_amount,
                                   total_discount_amount = excluded.total_discount_amount,
                                   tip_amount = excluded.tip_amount,
                                   refunds_amount = excluded.refunds_amount,
                                   received_at_tz = excluded.received_at_tz,
                                   cogs_amount = excluded.cogs_amount,
                                   non_taxable_amount = excluded.non_taxable_amount,
                                   taxable_amount = excluded.taxable_amount,
                                   collected_tax_amount = excluded.collected_tax_amount,
                                   waiting_time = excluded.waiting_time,
                                   feedback_rating = excluded.feedback_rating,
                                   updated_at = excluded.updated_at
                   RETURNING array_length($1, 1)
              $body$
              language sql;
        - sql:
            sql: >
              SELECT reports_orders_update( ARRAY (SELECT orders.id FROM orders) );
        - sql:
            sql: >
              DROP FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp);
              CREATE OR REPLACE FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             product_id uuid,
                             is_variant_of_product_id uuid,
                             order_id uuid,
                             quantity numeric,
                             location_id uuid,
                             returned_quantity numeric,
                             returned_amount numeric,
                             received_at_tz timestamp,
                             taxable_amount numeric,
                             non_taxable_amount numeric,
                             tax_amount numeric,
                             discount_amount numeric,
                             cogs_amount numeric,
                             gross_sale_amount numeric,
                             gross_profit_amount numeric)
              AS $body$
                  SELECT   oi.id              AS id,
                           oi.merchant_id     AS merchant_id,
                           oi.product_id      AS product_id,
                           p.is_variant_of_product_id AS is_variant_of_product_id,
                           oi.order_id        AS order_id,
                           CASE oi.payment_status = 'paid' WHEN TRUE  THEN oi.quantity
                                                           WHEN FALSE THEN 0
                           END AS quantity,
                           orders.location_id AS location_id,
                           CASE oi.payment_status IN ('refunded', 'voided') WHEN TRUE  THEN quantity
                                                                            WHEN FALSE THEN 0
                           END AS returned_quantity,
                           CASE oi.payment_status IN ('refunded', 'voided') WHEN TRUE  THEN total_price_amount
                                                                            WHEN FALSE THEN 0
                           END AS returned_amount,
                           orders.received_at at time zone locations.timezone AS received_at_tz,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) > 0
                                WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                WHEN FALSE THEN 0
                             END, 2) AS taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) = 0
                                WHEN TRUE  THEN oi.total_price_amount
                                WHEN FALSE THEN 0
                             END, 2) AS non_taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS tax_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.discount_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS discount_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.cost_amount * oi.quantity, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS cogs_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_sale_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0) - COALESCE(oi.cost_amount * oi.quantity, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_profit_amount
                  FROM     order_items oi,
                           orders,
                           locations,
                           products p
                  WHERE    oi.order_id = orders.id
                  AND      oi.product_id = p.id
                  AND      locations.id = orders.location_id
                  AND      oi.merchant_id = $1
                  AND      orders.location_id = ANY ($2)
                  AND      orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;
  - changeSet:
      id: 155
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: order_item_modifier_options
            columns:
              - column:
                  name: modifier_set_name
                  type: varchar(255)
        - sql:
            sql: >
              UPDATE order_item_modifier_options oimo
              SET modifier_set_name = data.name
              FROM (
                SELECT ms.name as name, mo.id as modifier_option_id
                FROM modifier_sets ms, modifier_options mo
                WHERE mo.modifier_set_id = ms.id
              ) data
              WHERE data.modifier_option_id = oimo.modifier_option_id;
  - changeSet:
      id: 157
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - dropForeignKeyConstraint:
            baseTableName: categories
            constraintName: fk_catalog
        - addForeignKeyConstraint:
            baseColumnNames: catalog_id
            baseTableName: categories
            constraintName: fk_catalog
            onDelete: CASCADE
            referencedColumnNames: id
            referencedTableName: catalogs
  - changeSet:
      id: 158
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: order_delivery_addresses
            columns:
              - column:
                  name: first_name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: last_name
                  type: varchar(255)
                  constraints: { nullable: false }
  - changeSet:
      id: 159
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropForeignKeyConstraint:
            baseTableName: product_category_options
            constraintName: fk_product_category
        - addForeignKeyConstraint:
            baseColumnNames: product_category_id
            baseTableName: product_category_options
            constraintName: fk_product_category
            onDelete: CASCADE
            referencedColumnNames: id
            referencedTableName: product_categories
  - changeSet:
      id: 160
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: orders
            columns:
              - column:
                  name: delivery_fee_amount
                  type: number(12,2)
  - changeSet:
      id: 161
      author: Daniela Sfregola <daniela@paytouch.io>
      changes:
        - dropNotNullConstraint:
            tableName: order_delivery_addresses
            columnName: first_name
        - dropNotNullConstraint:
            tableName: order_delivery_addresses
            columnName: last_name
  - changeSet:
      id: 162
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: user_roles
            columns:
              - column:
                  name: has_online_storefront_access
                  type: boolean
                  value: true
        - addNotNullConstraint:
            tableName: user_roles
            columnDataType: boolean
            columnName: has_online_storefront_access
  - changeSet:
      id: 163
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE OR REPLACE VIEW article_identifiers AS
              WITH variant_opts AS
                ( SELECT pvo.product_id,
                         vot.name,
                         vo.name,
                         CONCAT_WS(':*:', vot.name, vo.name) AS identifier
                 FROM product_variant_options pvo
                 JOIN variant_options vo ON pvo.variant_option_id = vo.id
                 JOIN variant_option_types vot ON vo.variant_option_type_id = vot.id
                 ORDER BY CONCAT(vot.name, ':*:', vo.name))
              SELECT
              p.id,
              p.merchant_id,
              p.type,
              p.name,
              p.sku,
              p.upc,
              concat_ws(':$:', p.name, COALESCE(p.sku, ''), COALESCE(p.upc, ''), string_agg(vo.identifier, ':$:')) AS full_identifier,
              COALESCE(string_agg(vo.identifier, ':$:'), '') AS variant_options,
              p.created_at,
              p.updated_at
              FROM products p
              LEFT JOIN variant_opts vo ON p.id = vo.product_id
              WHERE p.deleted_at IS NULL
              GROUP BY p.id;
  - changeSet:
      id: 164
      author: Gabriele Salvini <gabriele@paytouch.io>
      changes:
        - addColumn:
            tableName: modifier_sets
            columns:
              - column:
                  name: hide_on_receipts
                  type: boolean
                  value: false
        - addNotNullConstraint:
            tableName: modifier_sets
            columnDataType: boolean
            columnName: hide_on_receipts
  - changeSet:
      id: 165
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addUniqueConstraint:
            tableName: supplier_products
            columnNames: merchant_id, supplier_id, product_id
  - changeSet:
      id: 166
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP VIEW article_identifiers;
              CREATE OR REPLACE VIEW article_identifiers AS
              WITH variant_opts AS
                ( SELECT pvo.product_id,
                         vot.name,
                         vo.name,
                         CONCAT_WS(':*:', vot.name, vo.name) AS identifier
                 FROM product_variant_options pvo
                 JOIN variant_options vo ON pvo.variant_option_id = vo.id
                 JOIN variant_option_types vot ON vo.variant_option_type_id = vot.id
                 ORDER BY CONCAT(vot.name, ':*:', vo.name))
              SELECT
              p.id,
              p.merchant_id,
              p.is_variant_of_product_id,
              p.type,
              p.name,
              p.sku,
              p.upc,
              concat_ws(':$:', p.name, COALESCE(p.sku, ''), COALESCE(p.upc, ''), string_agg(vo.identifier, ':$:')) AS full_identifier,
              COALESCE(string_agg(vo.identifier, ':$:'), '') AS variant_options,
              p.created_at,
              p.updated_at
              FROM products p
              LEFT JOIN variant_opts vo ON p.id = vo.product_id
              WHERE p.deleted_at IS NULL
              GROUP BY p.id;
  - changeSet:
      id: 167
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: locations
            columns:
              - column:
                  name: latitude
                  type: number(14,11)
              - column:
                  name: longitude
                  type: number(14,11)
  - changeSet:
      id: 168
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE receiving_orders SET status = 'canceled' WHERE status = 'cancelled';
              UPDATE orders SET fulfillment_status = 'canceled' WHERE fulfillment_status = 'cancelled';
  - changeSet:
      id: 169
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: reports_orders
            columns:
              - column:
                  name: gift_card_value_sales_amount
                  type: number(12,2)
        - addNotNullConstraint:
            tableName: reports_orders
            columnName: gift_card_value_sales_amount
            defaultNullValue: 0
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_orders_update(ids uuid[])
              RETURNS integer
              AS $body$
                   INSERT INTO reports_orders (
                       id,
                       merchant_id,
                       customer_id,
                       location_id,
                       received_at,
                       source,
                       type,
                       payment_type,
                       payment_status,
                       is_invoice,
                       gross_sale_amount,
                       net_sale_amount,
                       gross_profit_amount,
                       total_discount_amount,
                       tip_amount,
                       refunds_amount,
                       received_at_tz,
                       cogs_amount,
                       non_taxable_amount,
                       taxable_amount,
                       collected_tax_amount,
                       gift_card_value_sales_amount,
                       waiting_time,
                       feedback_rating,
                       created_at,
                       updated_at
                   )
                   SELECT          orders.id             AS id,
                                   orders.merchant_id    AS merchant_id,
                                   orders.customer_id    AS customer_id,
                                   orders.location_id    AS location_id,
                                   orders.received_at    AS received_at,
                                   orders.source         AS source,
                                   orders.type           AS type,
                                   orders.payment_type   AS payment_type,
                                   orders.payment_status AS payment_status,
                                   orders.is_invoice     AS is_invoice,
                                   SUM(COALESCE(gross_sale_amount, 0))     AS gross_sale_amount,
                                   SUM(COALESCE(net_sale_amount, 0))       AS net_sale_amount,
                                   SUM(COALESCE(gross_profit_amount, 0))   AS gross_profit_amount,
                                   SUM(COALESCE(total_discount_amount, 0)) AS total_discount_amount,
                                   SUM(COALESCE(orders.tip_amount, 0))     AS tip_amount,
                                   SUM(COALESCE(refunds_amount, 0))        AS refunds_amount,
                                   orders.received_at at time zone locations.timezone AS received_at_tz,
                                   SUM(COALESCE(cogs_amount, 0))           AS cogs_amount,
                                   SUM(COALESCE(non_taxable_amount, 0))    AS non_taxable_amount,
                                   SUM(COALESCE(taxable_amount, 0))        AS taxable_amount,
                                   SUM(COALESCE(collected_tax_amount, 0))  AS collected_tax_amount,
                                   SUM(COALESCE(gift_card_value_sales_amount, 0))  AS gift_card_value_sales_amount,
                                   EXTRACT(epoch FROM (orders.completed_at - orders.received_at)) AS waiting_time,
                                   AVG(order_feedbacks.rating)             AS feedback_rating,
                                   now() AS created_at,
                                   now() AS updated_at
                   FROM            orders
                   LEFT OUTER JOIN locations
                   ON              locations.id = orders.location_id
                   LEFT OUTER JOIN order_feedbacks
                   ON              order_feedbacks.order_id = orders.id
                   JOIN            lateral
                                   (
                                          SELECT COALESCE(SUM((pt.payment_details::json->>'amount')::float), 0) AS refunds_amount
                                          FROM   payment_transactions pt
                                          WHERE  pt.order_id = orders.id
                                          AND    pt.type IN ('refund', 'void')) refunds
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT   SUM(ROUND(
                                                     CASE COALESCE(oi.tax_amount, 0) > 0 WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                                                                         WHEN FALSE THEN 0
                                                     END, 2))                                               AS taxable_amount,
                                                   SUM(ROUND(
                                                     CASE COALESCE(oi.tax_amount, 0) = 0 WHEN TRUE  THEN oi.total_price_amount
                                                                                         WHEN FALSE THEN 0
                                                   END, 2))                                                 AS non_taxable_amount,
                                                   SUM(ROUND(COALESCE(oi.cost_amount * oi.quantity, 0), 2)) AS cogs_amount,
                                                   SUM(ROUND(COALESCE(oi.discount_amount, 0), 2))           AS discount_amount,
                                                   SUM(ROUND(COALESCE(oi.tax_amount, 0), 2))                AS collected_tax_amount,
                                                   COALESCE(SUM(ROUND(
                                                     CASE oi.product_type = 'gift_card'  WHEN TRUE  THEN oi.total_price_amount
                                                                                         WHEN FALSE THEN 0
                                                   END, 2)) , 0)                                            AS gift_card_value_sales_amount
                                          FROM     order_items oi
                                          WHERE    oi.order_id = orders.id
                                          AND      oi.payment_status = 'paid') paid_items
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT COALESCE(orders.total_amount, 0) - refunds_amount - gift_card_value_sales_amount AS gross_sale_amount ) gsa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT gross_sale_amount - collected_tax_amount - COALESCE(orders.tip_amount, 0) AS net_sale_amount ) nsa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT net_sale_amount - cogs_amount AS gross_profit_amount ) gpa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT paid_items.discount_amount + COALESCE(orders.ticket_discount_amount, 0) AS total_discount_amount ) tda
                   ON              true
                   WHERE           orders.id = ANY ($1)
                   GROUP BY orders.id, locations.timezone
                   ON CONFLICT (id)
                   DO UPDATE SET   merchant_id = excluded.merchant_id,
                                   customer_id = excluded.customer_id,
                                   location_id = excluded.location_id,
                                   received_at = excluded.received_at,
                                   source = excluded.source,
                                   type = excluded.type,
                                   payment_type = excluded.payment_type,
                                   payment_status = excluded.payment_status,
                                   is_invoice = excluded.is_invoice,
                                   gross_sale_amount = excluded.gross_sale_amount,
                                   net_sale_amount = excluded.net_sale_amount,
                                   gross_profit_amount = excluded.gross_profit_amount,
                                   total_discount_amount = excluded.total_discount_amount,
                                   tip_amount = excluded.tip_amount,
                                   refunds_amount = excluded.refunds_amount,
                                   received_at_tz = excluded.received_at_tz,
                                   cogs_amount = excluded.cogs_amount,
                                   non_taxable_amount = excluded.non_taxable_amount,
                                   taxable_amount = excluded.taxable_amount,
                                   collected_tax_amount = excluded.collected_tax_amount,
                                   waiting_time = excluded.waiting_time,
                                   feedback_rating = excluded.feedback_rating,
                                   updated_at = excluded.updated_at
                   RETURNING array_length($1, 1)
              $body$
              language sql;
        - sql:
            sql: >
              SELECT reports_orders_update( ARRAY (SELECT orders.id FROM orders) );
        - sql:
            sql: >
              DROP FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp);
              CREATE OR REPLACE FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             product_id uuid,
                             is_variant_of_product_id uuid,
                             order_id uuid,
                             quantity numeric,
                             location_id uuid,
                             returned_quantity numeric,
                             returned_amount numeric,
                             received_at_tz timestamp,
                             taxable_amount numeric,
                             non_taxable_amount numeric,
                             tax_amount numeric,
                             discount_amount numeric,
                             cogs_amount numeric,
                             gross_sale_amount numeric,
                             gross_profit_amount numeric)
              AS $body$
                  SELECT   oi.id              AS id,
                           oi.merchant_id     AS merchant_id,
                           oi.product_id      AS product_id,
                           p.is_variant_of_product_id AS is_variant_of_product_id,
                           oi.order_id        AS order_id,
                           CASE oi.payment_status = 'paid' WHEN TRUE  THEN oi.quantity
                                                           WHEN FALSE THEN 0
                           END AS quantity,
                           orders.location_id AS location_id,
                           CASE oi.payment_status IN ('refunded', 'voided') WHEN TRUE  THEN quantity
                                                                            WHEN FALSE THEN 0
                           END AS returned_quantity,
                           CASE oi.payment_status IN ('refunded', 'voided') WHEN TRUE  THEN total_price_amount
                                                                            WHEN FALSE THEN 0
                           END AS returned_amount,
                           orders.received_at at time zone locations.timezone AS received_at_tz,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) > 0
                                WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                WHEN FALSE THEN 0
                             END, 2) AS taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) = 0
                                WHEN TRUE  THEN oi.total_price_amount
                                WHEN FALSE THEN 0
                             END, 2) AS non_taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS tax_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.discount_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS discount_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.cost_amount * oi.quantity, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS cogs_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_sale_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0) - COALESCE(oi.cost_amount * oi.quantity, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_profit_amount
                  FROM     order_items oi,
                           orders,
                           locations,
                           products p
                  WHERE    oi.order_id = orders.id
                  AND      oi.product_id = p.id
                  AND      locations.id = orders.location_id
                  AND      oi.merchant_id = $1
                  AND      orders.location_id = ANY ($2)
                  AND      orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;
  - changeSet:
      id: 170
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp);
              CREATE OR REPLACE FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             product_id uuid,
                             is_variant_of_product_id uuid,
                             order_id uuid,
                             quantity numeric,
                             location_id uuid,
                             returned_quantity numeric,
                             returned_amount numeric,
                             received_at_tz timestamp,
                             taxable_amount numeric,
                             non_taxable_amount numeric,
                             tax_amount numeric,
                             discount_amount numeric,
                             cogs_amount numeric,
                             gross_sale_amount numeric,
                             net_sale_amount numeric,
                             gross_profit_amount numeric)
              AS $body$
                  SELECT   oi.id              AS id,
                           oi.merchant_id     AS merchant_id,
                           oi.product_id      AS product_id,
                           p.is_variant_of_product_id AS is_variant_of_product_id,
                           oi.order_id        AS order_id,
                           CASE oi.payment_status = 'paid' WHEN TRUE  THEN oi.quantity
                                                           WHEN FALSE THEN 0
                           END AS quantity,
                           orders.location_id AS location_id,
                           CASE oi.payment_status IN ('refunded', 'voided') WHEN TRUE  THEN quantity
                                                                            WHEN FALSE THEN 0
                           END AS returned_quantity,
                           CASE oi.payment_status IN ('refunded', 'voided') WHEN TRUE  THEN total_price_amount
                                                                            WHEN FALSE THEN 0
                           END AS returned_amount,
                           orders.received_at at time zone locations.timezone AS received_at_tz,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) > 0
                                WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                WHEN FALSE THEN 0
                             END, 2) AS taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) = 0
                                WHEN TRUE  THEN oi.total_price_amount
                                WHEN FALSE THEN 0
                             END, 2) AS non_taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS tax_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.discount_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS discount_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.cost_amount * oi.quantity, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS cogs_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_sale_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0) - COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS net_sale_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0) - COALESCE(oi.cost_amount * oi.quantity, 0) - COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_profit_amount
                  FROM     order_items oi,
                           orders,
                           locations,
                           products p
                  WHERE    oi.order_id = orders.id
                  AND      oi.product_id = p.id
                  AND      locations.id = orders.location_id
                  AND      oi.merchant_id = $1
                  AND      orders.location_id = ANY ($2)
                  AND      orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;
  - changeSet:
      id: 171
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - createTable:
            tableName: bundle_sets
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: bundle_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_bundle,
                      references: products(id),
                    }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: position
                  type: int
                  constraints: { nullable: false }
              - column:
                  name: min_quantity
                  type: int
                  constraints: { nullable: false }
              - column:
                  name: max_quantity
                  type: int
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: bundle_options
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: bundle_set_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_bundle_set,
                      references: bundle_sets(id),
                    }
              - column:
                  name: article_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_article,
                      references: products(id),
                    }
              - column:
                  name: price_adjustment
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
  - changeSet:
      id: 172
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropNotNullConstraint:
            tableName: bundle_sets
            columnName: name
  - changeSet:
      id: 173
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - createTable:
            tableName: order_bundles
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: order_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_order,
                      references: orders(id),
                    }
              - column:
                  name: bundle_order_item_id
                  type: uuid
                  # foreign key constraint for this field is defined as a separate change after this createTable
              - column:
                  name: bundle_set_id
                  type: uuid
                  constraints:
                    {
                      foreignKeyName: fk_bundle_set,
                      references: bundle_sets(id),
                    }
              - column:
                  name: bundle_set_name
                  type: varchar(255)
              - column:
                  name: bundle_option_id
                  type: uuid
                  constraints:
                    {
                      foreignKeyName: fk_bundle_option,
                      references: bundle_options(id),
                    }
              - column:
                  name: article_order_item_id
                  type: uuid
                  # foreign key constraint for this field is defined as a separate change after this createTable
              - column:
                  name: price_adjustment
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addForeignKeyConstraint:
            baseColumnNames: bundle_order_item_id
            baseTableName: order_bundles
            constraintName: fk_bundle_order_item
            onDelete: "SET NULL"
            referencedColumnNames: id
            referencedTableName: order_items
        - addForeignKeyConstraint:
            baseColumnNames: article_order_item_id
            baseTableName: order_bundles
            constraintName: fk_article_order_item
            onDelete: "SET NULL"
            referencedColumnNames: id
            referencedTableName: order_items
  - changeSet:
      id: 174
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              DROP FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp);
              CREATE OR REPLACE FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             product_id uuid,
                             is_variant_of_product_id uuid,
                             order_id uuid,
                             quantity numeric,
                             location_id uuid,
                             returned_quantity numeric,
                             returned_amount numeric,
                             received_at_tz timestamp,
                             taxable_amount numeric,
                             non_taxable_amount numeric,
                             tax_amount numeric,
                             discount_amount numeric,
                             cogs_amount numeric,
                             gross_sale_amount numeric,
                             net_sale_amount numeric,
                             gross_profit_amount numeric,
                             completed_at_tz timestamp)
              AS $body$
                  SELECT   oi.id              AS id,
                           oi.merchant_id     AS merchant_id,
                           oi.product_id      AS product_id,
                           p.is_variant_of_product_id AS is_variant_of_product_id,
                           oi.order_id        AS order_id,
                           CASE oi.payment_status = 'paid' WHEN TRUE  THEN oi.quantity
                                                           WHEN FALSE THEN 0
                           END AS quantity,
                           orders.location_id AS location_id,
                           CASE oi.payment_status IN ('refunded', 'voided') WHEN TRUE  THEN quantity
                                                                            WHEN FALSE THEN 0
                           END AS returned_quantity,
                           CASE oi.payment_status IN ('refunded', 'voided') WHEN TRUE  THEN total_price_amount
                                                                            WHEN FALSE THEN 0
                           END AS returned_amount,
                           orders.received_at at time zone locations.timezone AS received_at_tz,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) > 0
                                WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                WHEN FALSE THEN 0
                             END, 2) AS taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) = 0
                                WHEN TRUE  THEN oi.total_price_amount
                                WHEN FALSE THEN 0
                             END, 2) AS non_taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS tax_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.discount_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS discount_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.cost_amount * oi.quantity, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS cogs_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_sale_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0) - COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS net_sale_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0) - COALESCE(oi.cost_amount * oi.quantity, 0) - COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_profit_amount,
                           orders.completed_at at time zone locations.timezone AS completed_at_tz
                  FROM     order_items oi,
                           orders,
                           locations,
                           products p
                  WHERE    oi.order_id = orders.id
                  AND      oi.product_id = p.id
                  AND      locations.id = orders.location_id
                  AND      oi.merchant_id = $1
                  AND      orders.location_id = ANY ($2)
                  AND      orders.completed_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;
        - addColumn:
            tableName: reports_orders
            columns:
              - column:
                  name: completed_at_tz
                  type: datetime
        - sql:
            sql: >
              DROP FUNCTION reports_orders_update(ids uuid[]);
              CREATE OR REPLACE FUNCTION reports_orders_update(ids uuid[])
              RETURNS integer
              AS $body$
                   INSERT INTO reports_orders (
                       id,
                       merchant_id,
                       customer_id,
                       location_id,
                       received_at,
                       source,
                       type,
                       payment_type,
                       payment_status,
                       is_invoice,
                       gross_sale_amount,
                       net_sale_amount,
                       gross_profit_amount,
                       total_discount_amount,
                       tip_amount,
                       refunds_amount,
                       received_at_tz,
                       completed_at_tz,
                       cogs_amount,
                       non_taxable_amount,
                       taxable_amount,
                       collected_tax_amount,
                       gift_card_value_sales_amount,
                       waiting_time,
                       feedback_rating,
                       created_at,
                       updated_at
                   )
                   SELECT          orders.id             AS id,
                                   orders.merchant_id    AS merchant_id,
                                   orders.customer_id    AS customer_id,
                                   orders.location_id    AS location_id,
                                   orders.received_at    AS received_at,
                                   orders.source         AS source,
                                   orders.type           AS type,
                                   orders.payment_type   AS payment_type,
                                   orders.payment_status AS payment_status,
                                   orders.is_invoice     AS is_invoice,
                                   SUM(COALESCE(gross_sale_amount, 0))     AS gross_sale_amount,
                                   SUM(COALESCE(net_sale_amount, 0))       AS net_sale_amount,
                                   SUM(COALESCE(gross_profit_amount, 0))   AS gross_profit_amount,
                                   SUM(COALESCE(total_discount_amount, 0)) AS total_discount_amount,
                                   SUM(COALESCE(orders.tip_amount, 0))     AS tip_amount,
                                   SUM(COALESCE(refunds_amount, 0))        AS refunds_amount,
                                   orders.received_at at time zone locations.timezone AS received_at_tz,
                                   orders.completed_at at time zone locations.timezone AS completed_at_tz,
                                   SUM(COALESCE(cogs_amount, 0))           AS cogs_amount,
                                   SUM(COALESCE(non_taxable_amount, 0))    AS non_taxable_amount,
                                   SUM(COALESCE(taxable_amount, 0))        AS taxable_amount,
                                   SUM(COALESCE(collected_tax_amount, 0))  AS collected_tax_amount,
                                   SUM(COALESCE(gift_card_value_sales_amount, 0))  AS gift_card_value_sales_amount,
                                   EXTRACT(epoch FROM (orders.completed_at - orders.received_at)) AS waiting_time,
                                   AVG(order_feedbacks.rating)             AS feedback_rating,
                                   now() AS created_at,
                                   now() AS updated_at
                   FROM            orders
                   LEFT OUTER JOIN locations
                   ON              locations.id = orders.location_id
                   LEFT OUTER JOIN order_feedbacks
                   ON              order_feedbacks.order_id = orders.id
                   JOIN            lateral
                                   (
                                          SELECT COALESCE(SUM((pt.payment_details::json->>'amount')::float), 0) AS refunds_amount
                                          FROM   payment_transactions pt
                                          WHERE  pt.order_id = orders.id
                                          AND    pt.type IN ('refund', 'void')) refunds
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT   SUM(ROUND(
                                                     CASE COALESCE(oi.tax_amount, 0) > 0 WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                                                                         WHEN FALSE THEN 0
                                                     END, 2))                                               AS taxable_amount,
                                                   SUM(ROUND(
                                                     CASE COALESCE(oi.tax_amount, 0) = 0 WHEN TRUE  THEN oi.total_price_amount
                                                                                         WHEN FALSE THEN 0
                                                   END, 2))                                                 AS non_taxable_amount,
                                                   SUM(ROUND(COALESCE(oi.cost_amount * oi.quantity, 0), 2)) AS cogs_amount,
                                                   SUM(ROUND(COALESCE(oi.discount_amount, 0), 2))           AS discount_amount,
                                                   SUM(ROUND(COALESCE(oi.tax_amount, 0), 2))                AS collected_tax_amount,
                                                   COALESCE(SUM(ROUND(
                                                     CASE oi.product_type = 'gift_card'  WHEN TRUE  THEN oi.total_price_amount
                                                                                         WHEN FALSE THEN 0
                                                   END, 2)) , 0)                                            AS gift_card_value_sales_amount
                                          FROM     order_items oi
                                          WHERE    oi.order_id = orders.id
                                          AND      oi.payment_status = 'paid') paid_items
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT COALESCE(orders.total_amount, 0) - refunds_amount - gift_card_value_sales_amount AS gross_sale_amount ) gsa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT gross_sale_amount - collected_tax_amount - COALESCE(orders.tip_amount, 0) AS net_sale_amount ) nsa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT net_sale_amount - cogs_amount AS gross_profit_amount ) gpa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT paid_items.discount_amount + COALESCE(orders.ticket_discount_amount, 0) AS total_discount_amount ) tda
                   ON              true
                   WHERE           orders.id = ANY ($1)
                   GROUP BY orders.id, locations.timezone
                   ON CONFLICT (id)
                   DO UPDATE SET   merchant_id = excluded.merchant_id,
                                   customer_id = excluded.customer_id,
                                   location_id = excluded.location_id,
                                   received_at = excluded.received_at,
                                   source = excluded.source,
                                   type = excluded.type,
                                   payment_type = excluded.payment_type,
                                   payment_status = excluded.payment_status,
                                   is_invoice = excluded.is_invoice,
                                   gross_sale_amount = excluded.gross_sale_amount,
                                   net_sale_amount = excluded.net_sale_amount,
                                   gross_profit_amount = excluded.gross_profit_amount,
                                   total_discount_amount = excluded.total_discount_amount,
                                   tip_amount = excluded.tip_amount,
                                   refunds_amount = excluded.refunds_amount,
                                   received_at_tz = excluded.received_at_tz,
                                   completed_at_tz = excluded.completed_at_tz,
                                   cogs_amount = excluded.cogs_amount,
                                   non_taxable_amount = excluded.non_taxable_amount,
                                   taxable_amount = excluded.taxable_amount,
                                   collected_tax_amount = excluded.collected_tax_amount,
                                   waiting_time = excluded.waiting_time,
                                   feedback_rating = excluded.feedback_rating,
                                   updated_at = excluded.updated_at
                   RETURNING array_length($1, 1)
              $body$
              language sql;
        - addColumn:
            tableName: reports_gift_card_pass_transactions
            columns:
              - column:
                  name: completed_at_tz
                  type: datetime
        - sql:
            sql: >
              DROP FUNCTION reports_gift_card_passes_update(order_ids uuid[]);
              CREATE OR REPLACE FUNCTION reports_gift_card_passes_update(order_ids uuid[])
              RETURNS integer
              AS $body$
                  INSERT INTO reports_gift_card_pass_transactions
                              (
                                          gift_card_pass_id,
                                          gift_card_pass_transaction_id,
                                          merchant_id,
                                          customer_id,
                                          location_id,
                                          original_location_id,
                                          order_id,
                                          received_at_tz,
                                          completed_at_tz,
                                          charged_amount,
                                          remaining_amount,
                                          original_balance_group,
                                          created_at,
                                          updated_at
                              )
                  SELECT          gift_card_passes.id                                AS gift_card_pass_id,
                                  ''                                                 AS gift_card_transaction_id,
                                  orders.merchant_id                                 AS merchant_id,
                                  orders.customer_id                                 AS customer_id,
                                  orders.location_id                                 AS location_id,
                                  orders.location_id                                 AS original_location_id,
                                  orders.id                                          AS order_id,
                                  orders.received_at AT TIME zone locations.timezone AS received_at_tz,
                                  orders.completed_at AT TIME zone locations.timezone AS completed_at_tz,
                                  0                                                  AS charged_amount,
                                  gift_card_passes.original_amount                   AS remaining_amount,
                                  CASE WHEN gift_card_passes.is_custom_amount THEN 'custom'
                                       ELSE gift_card_passes.original_amount::text
                                  END                                                AS original_balance_group,
                                  now()                                              AS created_at,
                                  now()                                              AS updated_at
                  FROM            gift_card_passes
                  LEFT OUTER JOIN order_items
                  ON              gift_card_passes.order_item_id = order_items.id
                  LEFT OUTER JOIN orders
                  ON              orders.id = order_items.order_id
                  LEFT OUTER JOIN locations
                  ON              locations.id = orders.location_id
                  WHERE           orders.id = ANY ($1)
                  ON CONFLICT (gift_card_pass_id, gift_card_pass_transaction_id)
                  DO UPDATE SET merchant_id = excluded.merchant_id,
                                customer_id = excluded.customer_id,
                                location_id = excluded.location_id,
                                original_location_id = excluded.original_location_id,
                                order_id = excluded.order_id,
                                received_at_tz = excluded.received_at_tz,
                                completed_at_tz = excluded.completed_at_tz,
                                charged_amount = excluded.charged_amount,
                                remaining_amount = excluded.remaining_amount,
                                original_balance_group = excluded.original_balance_group,
                                updated_at = excluded.updated_at
                  RETURNING array_length($1, 1)
              $body$
              language sql;
        - sql:
            sql: >
              DROP FUNCTION reports_gift_card_pass_transactions_update(order_ids uuid[]);
              CREATE OR REPLACE FUNCTION reports_gift_card_pass_transactions_update(order_ids uuid[])
              RETURNS integer
              AS $body$
                  INSERT INTO reports_gift_card_pass_transactions
                              (
                                          gift_card_pass_id,
                                          gift_card_pass_transaction_id,
                                          merchant_id,
                                          customer_id,
                                          location_id,
                                          original_location_id,
                                          order_id,
                                          received_at_tz,
                                          completed_at_tz,
                                          charged_amount,
                                          remaining_amount,
                                          original_balance_group,
                                          created_at,
                                          updated_at
                              )
                  SELECT          gift_card_passes.id                                AS gift_card_pass_id,
                                  gift_card_pass_transactions.id                     AS gift_card_transaction_id,
                                  orders.merchant_id                                 AS merchant_id,
                                  COALESCE(orders.customer_id, original_customer_id) AS customer_id,
                                  orders.location_id                                 AS location_id,
                                  original_location_id                               AS original_location_id,
                                  orders.id                                          AS order_id,
                                  orders.received_at AT TIME zone locations.timezone AS received_at_tz,
                                  orders.completed_at AT TIME zone locations.timezone AS completed_at_tz,
                                  gift_card_pass_transactions.total_amount           AS charged_amount,
                                  gift_card_passes.original_amount - redeemed_amount AS remaining_amount,
                                  CASE WHEN gift_card_passes.is_custom_amount THEN 'custom'
                                       ELSE gift_card_passes.original_amount::text
                                  END                                                AS original_balance_group,
                                  now()                                              AS created_at,
                                  now()                                              AS updated_at
                  FROM            gift_card_pass_transactions
                  LEFT OUTER JOIN gift_card_passes
                  ON              gift_card_pass_transactions.gift_card_pass_id = gift_card_passes.id
                  LEFT OUTER JOIN payment_transactions
                  ON              payment_transactions.payment_details::json->>'giftCardPassTransactionId'::text = gift_card_pass_transactions.id::text
                  LEFT OUTER JOIN orders
                  ON              orders.id = payment_transactions.order_id
                  LEFT OUTER JOIN locations
                  ON              locations.id = orders.location_id
                  JOIN           lateral (
                        SELECT o.location_id AS original_location_id,
                               o.customer_id AS original_customer_id
                        FROM   order_items AS oi,
                               orders AS o
                        WHERE  oi.id = gift_card_passes.order_item_id
                        AND    oi.order_id = o.id
                  ) oli
                   ON true
                   JOIN           lateral (
                        SELECT SUM(gcpt.total_amount) AS redeemed_amount
                        FROM gift_card_pass_transactions gcpt
                        WHERE gcpt.gift_card_pass_id = gift_card_passes.id
                        AND   gcpt.created_at <= gift_card_pass_transactions.created_at
                   ) ra
                  ON true
                  WHERE           orders.id = ANY ($1)
                  ON CONFLICT (gift_card_pass_id, gift_card_pass_transaction_id)
                  DO UPDATE SET merchant_id = excluded.merchant_id,
                                customer_id = excluded.customer_id,
                                location_id = excluded.location_id,
                                original_location_id = excluded.original_location_id,
                                order_id = excluded.order_id,
                                received_at_tz = excluded.received_at_tz,
                                completed_at_tz = excluded.completed_at_tz,
                                charged_amount = excluded.charged_amount,
                                remaining_amount = excluded.remaining_amount,
                                original_balance_group = excluded.original_balance_group,
                                updated_at = excluded.updated_at
                  RETURNING array_length($1, 1)
              $body$
              language sql;
        - sql:
            sql: >
              DELETE FROM reports_gift_card_pass_transactions;
              SELECT reports_gift_card_passes_update( ARRAY (SELECT orders.id FROM orders) );
              SELECT reports_gift_card_pass_transactions_update( ARRAY (SELECT orders.id FROM orders) );
              SELECT reports_orders_update( ARRAY (SELECT orders.id FROM orders) );
  - changeSet:
      id: 175
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropColumn:
            tableName: purchase_orders
            columnName: payment_method
        - dropColumn:
            tableName: purchase_orders
            columnName: payment_due_date
        - dropColumn:
            tableName: purchase_orders
            columnName: invoice_number
        - addColumn:
            tableName: purchase_orders
            columns:
              - column:
                  name: sent
                  type: boolean
                  value: false
                  defaultValueBoolean: false
                  constraints: { nullable: false }
  - changeSet:
      id: 176
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - createTable:
            tableName: payment_transaction_fees
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: payment_transaction_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_payment_transaction,
                      references: payment_transactions(id),
                    }
              - column:
                  name: name
                  type: varchar(255)
              - column:
                  name: type
                  type: varchar(255)
              - column:
                  name: amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
  - changeSet:
      id: 177
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: merchants
            columns:
              - column:
                  name: payment_processor
                  type: varchar(15)
                  value: creditcall
              - column:
                  name: payment_processor_config
                  type: jsonb
        - sql:
            sql: >
              UPDATE merchants
              SET payment_processor_config = ('{"jsonClass":"CreditcallConfig","terminalId":"' || creditcall_terminal_id || '","transactionKey":"' || creditcall_transaction_key || '"}')::json;
        - addNotNullConstraint:
            tableName: merchants
            columnName: payment_processor
        - addNotNullConstraint:
            tableName: merchants
            columnName: payment_processor_config
  - changeSet:
      id: 178
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropColumn:
            tableName: merchants
            columnName: creditcall_terminal_id
        - dropColumn:
            tableName: merchants
            columnName: creditcall_transaction_key
  - changeSet:
      id: 179
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - modifyDataType:
            tableName: location_receipts
            columnName: return_policy_text
            newDataType: text
  - changeSet:
      id: 180
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: reports_orders
            columns:
              - column:
                  name: order_total_amount
                  type: number(12,2)
        - addColumn:
            tableName: reports_orders
            columns:
              - column:
                  name: total_fees_amount
                  type: number(12,2)
        - addColumn:
            tableName: reports_orders
            columns:
              - column:
                  name: refunded_fees_amount
                  type: number(12,2)
        - addColumn:
            tableName: reports_orders
            columns:
              - column:
                  name: employee_id
                  type: uuid
        - sql:
            sql: >
              DROP FUNCTION reports_orders_update(ids uuid[]);
              CREATE OR REPLACE FUNCTION reports_orders_update(ids uuid[])
              RETURNS integer
              AS $body$
                   INSERT INTO reports_orders (
                       id,
                       merchant_id,
                       customer_id,
                       location_id,
                       employee_id,
                       received_at,
                       source,
                       type,
                       payment_type,
                       payment_status,
                       is_invoice,
                       order_total_amount,
                       total_fees_amount,
                       refunded_fees_amount,
                       gross_sale_amount,
                       net_sale_amount,
                       gross_profit_amount,
                       total_discount_amount,
                       tip_amount,
                       refunds_amount,
                       received_at_tz,
                       completed_at_tz,
                       cogs_amount,
                       non_taxable_amount,
                       taxable_amount,
                       collected_tax_amount,
                       gift_card_value_sales_amount,
                       waiting_time,
                       feedback_rating,
                       created_at,
                       updated_at
                   )
                   SELECT          orders.id             AS id,
                                   orders.merchant_id    AS merchant_id,
                                   orders.customer_id    AS customer_id,
                                   orders.location_id    AS location_id,
                                   orders.user_id        AS employee_id,
                                   orders.received_at    AS received_at,
                                   orders.source         AS source,
                                   orders.type           AS type,
                                   orders.payment_type   AS payment_type,
                                   orders.payment_status AS payment_status,
                                   orders.is_invoice     AS is_invoice,
                                   orders.total_amount   AS order_total_amount,
                                   SUM(COALESCE(total_fees_amount, 0))     AS total_fees_amount,
                                   SUM(COALESCE(refunded_fees_amount, 0))  AS refunded_fees_amount,
                                   SUM(COALESCE(gross_sale_amount, 0))     AS gross_sale_amount,
                                   SUM(COALESCE(net_sale_amount, 0))       AS net_sale_amount,
                                   SUM(COALESCE(gross_profit_amount, 0))   AS gross_profit_amount,
                                   SUM(COALESCE(total_discount_amount, 0)) AS total_discount_amount,
                                   SUM(COALESCE(orders.tip_amount, 0))     AS tip_amount,
                                   SUM(COALESCE(refunds_amount, 0))        AS refunds_amount,
                                   orders.received_at at time zone locations.timezone AS received_at_tz,
                                   orders.completed_at at time zone locations.timezone AS completed_at_tz,
                                   SUM(COALESCE(cogs_amount, 0))           AS cogs_amount,
                                   SUM(COALESCE(non_taxable_amount, 0))    AS non_taxable_amount,
                                   SUM(COALESCE(taxable_amount, 0))        AS taxable_amount,
                                   SUM(COALESCE(collected_tax_amount, 0))  AS collected_tax_amount,
                                   SUM(COALESCE(gift_card_value_sales_amount, 0))  AS gift_card_value_sales_amount,
                                   EXTRACT(epoch FROM (orders.completed_at - orders.received_at)) AS waiting_time,
                                   AVG(order_feedbacks.rating)             AS feedback_rating,
                                   now() AS created_at,
                                   now() AS updated_at
                   FROM            orders
                   LEFT OUTER JOIN locations
                   ON              locations.id = orders.location_id
                   LEFT OUTER JOIN order_feedbacks
                   ON              order_feedbacks.order_id = orders.id
                   LEFT JOIN            lateral
                                      (
                                             SELECT
                                                 COALESCE(SUM((pt.payment_details::json->>'amount')::float), 0) + COALESCE(SUM(COALESCE(ptf.amount, 0)), 0) AS refunds_amount,
                                                 COALESCE(SUM(COALESCE(ptf.amount, 0)), 0) AS refunded_fees_amount
                                             FROM   payment_transactions pt
                                             LEFT JOIN payment_transaction_fees ptf
                                             ON    ptf.payment_transaction_id = pt.id
                                             WHERE  pt.order_id = orders.id
                                             AND    pt.type IN ('refund', 'void')
                                             GROUP BY pt.order_id
                                       ) refunds
                   ON              true
                   LEFT JOIN            lateral
                                   (
                                          SELECT
                                                COALESCE(SUM(COALESCE(ptf.amount, 0)), 0)  AS total_fees_amount
                                          FROM   payment_transactions pt
                                          LEFT JOIN payment_transaction_fees ptf
                                          ON    ptf.payment_transaction_id = pt.id
                                          WHERE  pt.order_id = orders.id
                                          GROUP BY pt.order_id
                                   ) fees
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT   SUM(ROUND(
                                                     CASE COALESCE(oi.tax_amount, 0) > 0 WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                                                                         WHEN FALSE THEN 0
                                                     END, 2))                                               AS taxable_amount,
                                                   SUM(ROUND(
                                                     CASE COALESCE(oi.tax_amount, 0) = 0 WHEN TRUE  THEN oi.total_price_amount
                                                                                         WHEN FALSE THEN 0
                                                   END, 2))                                                 AS non_taxable_amount,
                                                   SUM(ROUND(COALESCE(oi.cost_amount * oi.quantity, 0), 2)) AS cogs_amount,
                                                   SUM(ROUND(COALESCE(oi.discount_amount, 0), 2))           AS discount_amount,
                                                   SUM(ROUND(COALESCE(oi.tax_amount, 0), 2))                AS collected_tax_amount,
                                                   COALESCE(SUM(ROUND(
                                                     CASE oi.product_type = 'gift_card'  WHEN TRUE  THEN oi.total_price_amount
                                                                                         WHEN FALSE THEN 0
                                                   END, 2)) , 0)                                            AS gift_card_value_sales_amount
                                          FROM     order_items oi
                                          WHERE    oi.order_id = orders.id
                                          AND      oi.payment_status = 'paid') paid_items
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT COALESCE(orders.total_amount, 0) - COALESCE(refunds_amount, 0) - gift_card_value_sales_amount AS gross_sale_amount ) gsa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT gross_sale_amount - collected_tax_amount - COALESCE(orders.tip_amount, 0) AS net_sale_amount ) nsa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT net_sale_amount - cogs_amount AS gross_profit_amount ) gpa
                   ON              true
                   JOIN            lateral
                                   (
                                          SELECT paid_items.discount_amount + COALESCE(orders.ticket_discount_amount, 0) AS total_discount_amount ) tda
                   ON              true
                   WHERE           orders.id = ANY ($1)
                   GROUP BY orders.id, locations.timezone
                   ON CONFLICT (id)
                   DO UPDATE SET   merchant_id = excluded.merchant_id,
                                   customer_id = excluded.customer_id,
                                   location_id = excluded.location_id,
                                   employee_id = excluded.employee_id,
                                   received_at = excluded.received_at,
                                   source = excluded.source,
                                   type = excluded.type,
                                   payment_type = excluded.payment_type,
                                   payment_status = excluded.payment_status,
                                   is_invoice = excluded.is_invoice,
                                   order_total_amount = excluded.order_total_amount,
                                   total_fees_amount = excluded.total_fees_amount,
                                   refunded_fees_amount = excluded.refunded_fees_amount,
                                   gross_sale_amount = excluded.gross_sale_amount,
                                   net_sale_amount = excluded.net_sale_amount,
                                   gross_profit_amount = excluded.gross_profit_amount,
                                   total_discount_amount = excluded.total_discount_amount,
                                   tip_amount = excluded.tip_amount,
                                   refunds_amount = excluded.refunds_amount,
                                   received_at_tz = excluded.received_at_tz,
                                   completed_at_tz = excluded.completed_at_tz,
                                   cogs_amount = excluded.cogs_amount,
                                   non_taxable_amount = excluded.non_taxable_amount,
                                   taxable_amount = excluded.taxable_amount,
                                   collected_tax_amount = excluded.collected_tax_amount,
                                   waiting_time = excluded.waiting_time,
                                   feedback_rating = excluded.feedback_rating,
                                   updated_at = excluded.updated_at
                   RETURNING array_length($1, 1)
              $body$
              language sql;
        - sql:
            sql: >
              SELECT reports_orders_update( ARRAY (SELECT orders.id FROM orders) );
  - changeSet:
      id: 181
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: cash_drawers
            columns:
              - column:
                  name: export_filename
                  type: varchar(255)
  - changeSet:
      id: 182
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropColumn:
            tableName: order_bundles
            columnName: bundle_set_id
        - dropColumn:
            tableName: order_bundles
            columnName: bundle_set_name
        - dropColumn:
            tableName: order_bundles
            columnName: bundle_option_id
        - dropColumn:
            tableName: order_bundles
            columnName: article_order_item_id
        - dropColumn:
            tableName: order_bundles
            columnName: price_adjustment
        - addColumn:
            tableName: order_bundles
            columns:
              - column:
                  name: order_bundle_sets
                  type: jsonb
  - changeSet:
      id: 183
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: bundle_options
            columns:
              - column:
                  name: position
                  type: int
                  defaultValueNumeric: "0"
                  constraints: { nullable: false }
  - changeSet:
      id: 184
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: variant_options
            columns:
              - column:
                  name: position
                  type: int
                  defaultValueNumeric: "0"
                  constraints: { nullable: false }
        - addColumn:
            tableName: variant_option_types
            columns:
              - column:
                  name: position
                  type: int
                  defaultValueNumeric: "0"
                  constraints: { nullable: false }
  - changeSet:
      id: 185
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              update user_roles set
                    dashboard = dashboard::jsonb || jsonb_build_object('cashDrawers', '1111'),
                    register = register::jsonb || jsonb_build_object('cashDrawers', '1111')
                    where name = 'Admin';
              update user_roles set
                    dashboard = dashboard::jsonb || jsonb_build_object('cashDrawers', '1111'),
                    register = register::jsonb || jsonb_build_object('cashDrawers', '1111')
                    where name = 'Manager';
              update user_roles set
                    dashboard = dashboard::jsonb || jsonb_build_object('cashDrawers', '1100'),
                    register = register::jsonb || jsonb_build_object('cashDrawers', '1100')
                    where name = 'Employee';
              update user_roles set
                    dashboard = dashboard::jsonb || jsonb_build_object('cashDrawers', '1100'),
                    register = register::jsonb || jsonb_build_object('cashDrawers', '1100')
                    where name = 'Cashier';
  - changeSet:
      id: 186
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: cash_drawer_activities
            columns:
              - column:
                  name: tip_for_user_id
                  type: uuid
                  constraints:
                    {
                      deleteCascade: true,
                      foreignKeyName: fk_tip_for_user,
                      references: users(id),
                    }
        - addColumn:
            tableName: order_item_variant_options
            columns:
              - column:
                  name: position
                  type: int
                  defaultValueNumeric: "0"
                  constraints: { nullable: false }
  - changeSet:
      id: 187
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: gift_cards
            columns:
              - column:
                  name: business_name
                  type: varchar(255)
        - addColumn:
            tableName: loyalty_programs
            columns:
              - column:
                  name: business_name
                  type: varchar(255)
  - changeSet:
      id: 188
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE gift_cards SET business_name = merchants.business_name FROM merchants where merchants.id = gift_cards.merchant_id;
              UPDATE loyalty_programs SET business_name = merchants.business_name FROM merchants where merchants.id = loyalty_programs.merchant_id;
        - addNotNullConstraint:
            tableName: gift_cards
            columnName: business_name
        - addNotNullConstraint:
            tableName: loyalty_programs
            columnName: business_name
  - changeSet:
      id: 189
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: location_settings
            columns:
              - column:
                  name: order_autocomplete
                  type: boolean
        - sql:
            sql: >
              UPDATE location_settings SET order_autocomplete = true
        - addNotNullConstraint:
            tableName: location_settings
            columnName: order_autocomplete
  - changeSet:
      id: 190
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: location_settings
            columns:
              - column:
                  name: order_routing_auto
                  type: boolean
        - sql:
            sql: >
              UPDATE location_settings SET order_routing_auto = true
        - addNotNullConstraint:
            tableName: location_settings
            columnName: order_routing_auto
  - changeSet:
      id: 191
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: cash_drawers
            columns:
              - column:
                  name: paid_in_amount
                  type: number(12,2)
              - column:
                  name: paid_out_amount
                  type: number(12,2)
              - column:
                  name: tipped_in_amount
                  type: number(12,2)
              - column:
                  name: tipped_out_amount
                  type: number(12,2)
  - changeSet:
      id: 192
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: cash_drawer_activities
            columns:
              - column:
                  name: starting_cash_amount
                  type: number(12,2)
              - column:
                  name: ending_cash_amount
                  type: number(12,2)
              - column:
                  name: tip_in_amount
                  type: number(12,2)
              - column:
                  name: tip_out_amount
                  type: number(12,2)
  - changeSet:
      id: 193
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - modifyDataType:
            tableName: cash_drawer_activities
            columnName: type
            newDataType: varchar(20)
  - changeSet:
      id: 194
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - dropNotNullConstraint:
            tableName: cash_drawer_activities
            columnName: pay_in_amount
        - dropNotNullConstraint:
            tableName: cash_drawer_activities
            columnName: pay_out_amount
        - dropNotNullConstraint:
            tableName: cash_drawer_activities
            columnName: current_balance_amount
  - changeSet:
      id: 195
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: orders
            columns:
              - column:
                  name: version
                  type: int
        - addColumn:
            tableName: payment_transactions
            columns:
              - column:
                  name: version
                  type: int
        - sql:
            sql: >
              UPDATE orders SET version = 1;
              UPDATE payment_transactions SET version = 1;
        - addNotNullConstraint:
            tableName: orders
            columnName: version
        - addNotNullConstraint:
            tableName: payment_transactions
            columnName: version
  - changeSet:
      id: 196
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: location_settings
            columns:
              - column:
                  name: cash_drawer_management
                  type: varchar(20)
        - sql:
            sql: >
              UPDATE location_settings SET cash_drawer_management = 'unlocked' WHERE cash_drawer_management_active = true;
              UPDATE location_settings SET cash_drawer_management = 'disabled' WHERE cash_drawer_management_active != true;
        - addNotNullConstraint:
            tableName: location_settings
            columnName: cash_drawer_management
  - changeSet:
      id: 197
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: cash_drawers
            columns:
              - column:
                  name: name
                  type: varchar(255)
  - changeSet:
      id: 198
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: cash_drawers
            columns:
              - column:
                  name: employee_id
                  type: uuid
                  constraints:
                    {
                      deleteCascade: true,
                      foreignKeyName: fk_employee,
                      references: users(id),
                    }
  - changeSet:
      id: 199
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: modifier_set_products
            columns:
              - column:
                  name: position
                  type: int
  - changeSet:
      id: 200
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - removeColumn:
            tableName: modifier_set_products
            columnName: price_tax_inclusive
  - changeSet:
      id: 201
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - createTable:
            tableName: kitchens
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
  - changeSet:
      id: 202
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: product_locations
            columns:
              - column:
                  name: route_to_kitchen_id
                  type: uuid
        - addColumn:
            tableName: order_routing_tickets
            columns:
              - column:
                  name: route_to_kitchen_id
                  type: uuid
        - sql:
            sql: >
              CREATE EXTENSION IF NOT EXISTS "pgcrypto";
              INSERT INTO kitchens SELECT gen_random_uuid(), m.id, l.id, 'Kitchen', NOW(), NOW() FROM merchants AS m JOIN locations AS l ON m.id = l.merchant_id WHERE business_type = 'restaurant';
              INSERT INTO kitchens SELECT gen_random_uuid(), m.id, l.id, 'Bar', NOW(), NOW() FROM merchants AS m JOIN locations AS l ON m.id = l.merchant_id WHERE business_type = 'restaurant';
  - changeSet:
      id: 203
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - createIndex:
            columns:
              - column:
                  name: object_type
              - column:
                  name: object_id
            indexName: image_uploads_object_id_object_type
            tableName: image_uploads
        - createIndex:
            columns:
              - column:
                  name: item_type
              - column:
                  name: item_id
            indexName: availabilities_item_id_item_type
            tableName: availabilities
        - createIndex:
            columns:
              - column:
                  name: object
              - column:
                  name: action
            indexName: events_object_action
            tableName: events
        - createIndex:
            columns:
              - column:
                  name: received_at
            indexName: events_received_at
            tableName: events
  - changeSet:
      id: 204
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: kitchens
            columns:
              - column:
                  name: deleted_at
                  type: datetime
  - changeSet:
      id: 205
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE product_locations AS o SET route_to_kitchen_id = i.kitchen_id FROM (SELECT pl.id as id, k.id as kitchen_id FROM product_locations AS pl JOIN products AS p ON pl.product_id = p.id JOIN kitchens AS k ON k.location_id = pl.location_id WHERE p.order_routing_kitchen = true AND k.name = 'Kitchen') AS i WHERE o.id = i.id;
              UPDATE product_locations AS o SET route_to_kitchen_id = i.kitchen_id FROM (SELECT pl.id as id, k.id as kitchen_id FROM product_locations AS pl JOIN products AS p ON pl.product_id = p.id JOIN kitchens AS k ON k.location_id = pl.location_id WHERE p.order_routing_bar = true AND k.name = 'Bar') AS i WHERE o.id = i.id;
              UPDATE order_routing_tickets AS t SET route_to_kitchen_id = k.id FROM (SELECT id, merchant_id, name FROM kitchens) AS k WHERE k.merchant_id = t.merchant_id AND LOWER(k.name) = LOWER(t.routing_destination);

              -- Remove tickets created by seeds for retail merchants
              DELETE FROM order_routing_ticket_order_items WHERE order_routing_ticket_id IN (SELECT id FROM order_routing_tickets WHERE route_to_kitchen_id IS NULL);
              DELETE FROM order_routing_tickets WHERE route_to_kitchen_id IS NULL;
        - addNotNullConstraint:
            tableName: order_routing_tickets
            columnName: route_to_kitchen_id
        - dropColumn:
            tableName: order_routing_tickets
            columnName: routing_destination
  - changeSet:
      id: 206
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: products
            columns:
              - column:
                  name: order_routing_enabled
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - sql:
                  sql: >
                    UPDATE products SET order_routing_enabled = order_routing_bar || order_routing_kitchen;
  - changeSet:
      id: 207
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: orders
            columns:
              - column:
                  name: received_at_tz
                  type: datetime
              - column:
                  name: completed_at_tz
                  type: datetime
        - sql:
            sql: >
              UPDATE orders SET received_at_tz = received_at AT TIME ZONE locations.timezone FROM locations WHERE locations.id = orders.location_id AND received_at IS NOT NULL;
              UPDATE orders SET completed_at_tz = completed_at AT TIME ZONE locations.timezone FROM locations WHERE locations.id = orders.location_id AND completed_at IS NOT NULL;
        - addNotNullConstraint:
            tableName: orders
            columnName: received_at_tz
  - changeSet:
      id: 208
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE product_locations outer_pl
                SET cost_amount = recipe_cost.value
                FROM
                ( SELECT pl.id,
                        SUM(pp.quantity_needed * part_pl.cost_amount) AS value
                FROM product_locations pl,
                        product_parts pp,
                        product_locations part_pl
                WHERE pl.product_id = pp.product_id
                    AND pp.part_id = part_pl.product_id
                    AND pl.location_id = part_pl.location_id
                GROUP BY pl.id) recipe_cost
                WHERE outer_pl.id = recipe_cost.id;
  - changeSet:
      id: 209
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE time_cards SET delta_mins = -delta_mins;
        - addColumn:
            tableName: time_cards
            columns:
              - column:
                  name: overtime_mins
                  type: int
              - column:
                  name: regular_mins
                  type: int
  - changeSet:
      id: 210
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: return_orders
            columns:
              - column:
                  name: purchase_order_id
                  type: uuid
                  constraints:
                    {
                      nullable: true,
                      deleteCascade: true,
                      foreignKeyName: fk_purchase_order,
                      references: purchase_orders(id),
                    }
  - changeSet:
      id: 211
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: kitchens
            columns:
              - column:
                  name: type
                  type: varchar(30)
                  remarks: "io.paytouch.core.data.model.enums.KitchenType"
              - column:
                  name: active
                  type: boolean
        - sql:
            sql: >
              UPDATE kitchens SET active = 't', type = case name when 'Bar' then 'bar' when 'Kitchen' then 'kitchen' end;
        - addNotNullConstraint:
            tableName: kitchens
            columnName: type
        - addNotNullConstraint:
            tableName: kitchens
            columnName: active
  - changeSet:
      id: 212
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - modifyDataType:
            tableName: online_order_attributes
            columnName: prepare_by_time
            newDataType: time
  - changeSet:
      id: 213
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE product_locations pl
              SET route_to_kitchen_id = NULL
              WHERE route_to_kitchen_id IN (SELECT id FROM kitchens WHERE deleted_at IS NOT NULL);
        - sql:
            sql: >
              INSERT INTO events (id, merchant_id, data, object, action, received_at, created_at, updated_at)
              SELECT id, merchant_id, NULL, 'kitchen', 'deleted', deleted_at, deleted_at, deleted_at
              FROM kitchens
              WHERE id NOT IN (SELECT id FROM events where object = 'kitchen' and action = 'deleted')
              AND deleted_at IS NOT NULL
  - changeSet:
      id: 214
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: location_settings
            columns:
              - column:
                  name: tips_handling
                  type: varchar(30)
                  defaultValue: tips_jar
                  constraints: { nullable: false }
                  remarks: "io.paytouch.core.data.model.enums.TipsHandlingMode"
        - sql:
            sql: >
              UPDATE location_settings SET tips_handling = 'disabled' WHERE tips_enabled = false;
        - dropColumn:
            tableName: location_settings
            columnName: tips_enabled
  - changeSet:
      id: 215
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              update location_settings set tips_handling = 'tip_jar' where tips_handling = 'tips_jar';
  - changeSet:
      id: 216
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - removeDefaultValue:
            tableName: location_settings
            columnName: tips_handling
  - changeSet:
      id: 217
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - createTable:
            tableName: tips_assignments
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: location_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_location,
                      references: locations(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints: { nullable: true }
              - column:
                  name: order_id
                  type: uuid
                  constraints: { nullable: true }
              - column:
                  name: amount
                  type: number(12,2)
                  constraints: { nullable: false }
              - column:
                  name: handled_via
                  type: varchar(20)
                  constraints: { nullable: false }
              - column:
                  name: handled_via_cash_drawer_activity_id
                  type: uuid
                  constraints: { nullable: true }
              - column:
                  name: payment_type
                  type: varchar(20)
                  constraints: { nullable: true }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createIndex:
            columns:
              - column:
                  name: merchant_id
            indexName: idx_merchant_id
            tableName: tips_assignments
  - changeSet:
      id: 218
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - createTable:
            tableName: oauth_apps
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: name
                  type: varchar(255)
                  constraints: { nullable: false }
              - column:
                  name: client_id
                  type: uuid
                  constraints: { nullable: false }
              - column:
                  name: client_secret
                  type: uuid
                  constraints: { nullable: false }
              - column:
                  name: redirect_uris
                  type: text
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createIndex:
            columns:
              - column:
                  name: client_id
            indexName: idx_oauth_apps_client_id
            tableName: oauth_apps
        - createTable:
            tableName: oauth_codes
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: user_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_user,
                      references: users(id),
                    }
              - column:
                  name: oauth_app_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_oauth_app,
                      references: oauth_apps(id),
                    }
              - column:
                  name: code
                  type: uuid
                  constraints: { nullable: false, unique: true }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - createTable:
            tableName: oauth_apps_sessions
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: merchant_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_merchant,
                      references: merchants(id),
                    }
              - column:
                  name: oauth_app_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      deleteCascade: true,
                      foreignKeyName: fk_oauth_app,
                      references: oauth_apps(id),
                    }
              - column:
                  name: session_id
                  type: uuid
                  constraints:
                    {
                      nullable: false,
                      foreignKeyName: fk_session,
                      references: sessions(id),
                    }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addUniqueConstraint:
            tableName: oauth_apps_sessions
            columnNames: merchant_id, oauth_app_id, session_id
  - changeSet:
      id: 219
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: orders
            columns:
              - column:
                  name: seating
                  type: jsonb
                  constraints: { nullable: true }
  - changeSet:
      id: 220
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: location_settings
            columns:
              - column:
                  name: preauth_enabled
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
  - changeSet:
      id: 221
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: loyalty_points_history
            columns:
              - column:
                  name: order_id
                  type: uuid
                  constraints: { nullable: true }
        - sql:
            sql: >
              update loyalty_points_history set order_id = orders.id FROM orders WHERE orders.id = loyalty_points_history.object_id AND loyalty_points_history.object_type = 'order';
              update loyalty_points_history set order_id = payment_transactions.order_id FROM payment_transactions WHERE payment_transactions.id = loyalty_points_history.object_id AND loyalty_points_history.object_type = 'payment_transaction';
              update loyalty_points_history set order_id = reward_redemptions.order_id FROM reward_redemptions WHERE reward_redemptions.id = loyalty_points_history.object_id AND loyalty_points_history.object_type = 'reward_redemption';
  - changeSet:
      id: 222
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: merchants
            columns:
              - column:
                  name: features
                  type: jsonb
                  defaultValue: "{}"
                  constraints: { nullable: false }
  - changeSet:
      id: 223
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - dropForeignKeyConstraint:
            baseTableName: cash_drawer_activities
            constraintName: fk_cash_drawer
  - changeSet:
      id: 224
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: tips_assignments
            columns:
              - column:
                  name: assigned_at
                  type: datetime
                  constraints: { nullable: true }
        - sql:
            sql: >
              update tips_assignments set assigned_at = created_at where assigned_at is null;
        - addNotNullConstraint:
            tableName: tips_assignments
            columnName: assigned_at
  - changeSet:
      id: 225
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: cash_drawers
            columns:
              - column:
                  name: printer_mac_address
                  type: varchar(255)
                  constraints: { nullable: true }
  - changeSet:
      id: 226
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - modifyDataType:
            tableName: sequence_next_numbers
            columnName: scope_id
            newDataType: varchar(255)
        - renameColumn:
            tableName: sequence_next_numbers
            oldColumnName: scope_id
            newColumnName: scope_key
        - addColumn:
            tableName: location_settings
            columns:
              - column:
                  name: next_order_number_scope_type
                  type: varchar(255)
                  defaultValue: "location"
                  constraints: { nullable: false }
  - changeSet:
      id: 227
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - createTable:
            tableName: password_reset_tokens
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: user_id
                  type: uuid
                  constraints: { nullable: false, unique: true }
              - column:
                  name: key
                  type: varchar(64)
                  constraints: { nullable: false }
              - column:
                  name: expires_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
  - changeSet:
      id: 228
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              update products
              set order_routing_enabled = templates.order_routing_enabled, updated_at = NOW()
              from products templates
              where products.type = 'variant' AND
              products.is_variant_of_product_id = templates.id AND
              templates.type = 'template';
  - changeSet:
      id: 229
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE time_cards
              SET regular_mins = total_mins - GREATEST(delta_mins, 0),
              overtime_mins = GREATEST(delta_mins, 0)
              WHERE total_mins IS NOT NULL;

  - changeSet:
      id: 230
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: kitchens
            columns:
              - column:
                  name: kds_enabled
                  type: boolean
                  constraints: { nullable: true }
                  defaultValueBoolean: true

  - changeSet:
      id: 231
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: orders
            columns:
              - column:
                  name: delivery_provider
                  type: varchar(20)
              - column:
                  name: delivery_provider_id
                  type: varchar(255)
              - column:
                  name: delivery_provider_number
                  type: varchar(255)
  - changeSet:
      id: 232
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - dropColumn:
            tableName: location_settings
            columnName: order_routing_bar
        - dropColumn:
            tableName: location_settings
            columnName: order_routing_kitchen
        - dropColumn:
            tableName: location_settings
            columnName: bar_view_active
        - dropColumn:
            tableName: location_settings
            columnName: kitchen_view_active
  - changeSet:
      id: 233
      author: Vladyslav Pekker <vlad@paytouch.io>
      changes:
        - sql:
            sql: >
              DELETE FROM reports_orders WHERE id IN (
                SELECT orders.id
                FROM orders JOIN online_order_attributes
                ON online_order_attributes.id = orders.online_order_attribute_id
                WHERE online_order_attributes.acceptance_status = 'open'
              );
  - changeSet:
      id: 234
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: location_settings
            columns:
              - column:
                  name: cfd
                  type: jsonb
  - changeSet:
      id: 235
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_loyalty_orders_func(merchant_id uuid)
              RETURNS TABLE (
                        id uuid,
                        merchant_id uuid,
                        customer_id uuid,
                        type varchar,
                        order_total_amount numeric,
                        points integer,
                        completed_at_tz timestamp)
              AS $body$
                SELECT
                        reports_orders.id AS id,
                        reports_orders.merchant_id AS merchant_id,
                        reports_orders.customer_id AS customer_id,
                        reports_orders.type AS type,
                        reports_orders.order_total_amount AS order_total_amount,
                        loyalty_points_history.points AS points,
                        reports_orders.completed_at_tz AS completed_at_tz
                FROM    reports_orders
                JOIN    loyalty_points_history
                ON      loyalty_points_history.object_id = reports_orders.id
                WHERE   reports_orders.merchant_id = $1
                AND     loyalty_points_history.type = 'spend_transaction'
                AND     reports_orders.payment_status = 'paid'
              $body$
              language sql;

              CREATE OR REPLACE FUNCTION reports_reward_redemptions_func(merchant_id uuid)
              RETURNS TABLE (
                        id uuid,
                        merchant_id uuid,
                        value numeric,
                        points integer,
                        type varchar,
                        created_at timestamp)
              AS $body$
                SELECT
                        reward_redemptions.id AS id,
                        reward_redemptions.merchant_id AS merchant_id,
                        CASE reward_redemptions.object_type
                            WHEN 'order_item' THEN order_items.price_amount
                            WHEN 'order_discount' THEN order_discounts.total_amount
                        END AS value,
                        reward_redemptions.points AS points,
                        reward_redemptions.loyalty_reward_type AS loyalty_reward_type,
                        reward_redemptions.created_at AS created_at
                FROM    reward_redemptions
                LEFT JOIN order_items
                ON      reward_redemptions.object_type = 'order_item'
                AND     reward_redemptions.object_id = order_items.id
                LEFT JOIN order_discounts
                ON      reward_redemptions.object_type = 'order_discount'
                AND     reward_redemptions.object_id = order_discounts.id
                WHERE   reward_redemptions.status = 'redeemed'
                AND     reward_redemptions.merchant_id = $1
              $body$
              language sql;
  - changeSet:
      id: 236
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE categories SET name = 'Combos Old'
              WHERE name = 'Combos'
              AND catalog_id IS NULL
              AND merchant_id IN (
                SELECT merchant_id
                FROM products
                WHERE is_combo = true
                GROUP BY merchant_id
              );

              INSERT INTO categories (
                id,
                merchant_id,
                name,
                active,
                position,
                created_at,
                updated_at
              )
              SELECT
                gen_random_uuid() AS id,
                merchant_id,
                'Combos' as name,
                true as active,
                -1 as position,
                NOW() as created_at,
                NOW() as updated_at
              FROM products
              WHERE is_combo = true
              GROUP BY merchant_id;

              INSERT INTO category_locations (
                  id,
                  merchant_id,
                  location_id,
                  category_id,
                  active,
                  created_at,
                  updated_at
              )
              SELECT
                gen_random_uuid() as id,
                categories.merchant_id,
                locations.id as location_id,
                categories.id as category_id,
                true as active,
                NOW() as created_at,
                NOW() as updated_at
              FROM categories
              JOIN locations ON categories.merchant_id = locations.merchant_id
              WHERE categories.name = 'Combos'
              AND categories.catalog_id IS NULL;

              INSERT INTO product_categories (
                  id,
                  merchant_id,
                  product_id,
                  category_id,
                  created_at,
                  updated_at
              )
              SELECT
                gen_random_uuid() as id,
                products.merchant_id as merchant_id,
                products.id as product_id,
                categories.id as category_id,
                NOW() as created_at,
                NOW() as updated_at
              FROM categories
              JOIN products ON products.merchant_id = categories.merchant_id
              WHERE categories.name = 'Combos'
              AND categories.catalog_id IS NULL
              AND products.is_combo = true;

              UPDATE products SET updated_at = NOW() WHERE is_combo = true;
  - changeSet:
      id: 237
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_loyalty_orders_func(merchant_id uuid)
              RETURNS TABLE (
                        id uuid,
                        merchant_id uuid,
                        customer_id uuid,
                        type varchar,
                        order_total_amount numeric,
                        points integer,
                        completed_at_tz timestamp)
              AS $body$
                SELECT
                        reports_orders.id AS id,
                        reports_orders.merchant_id AS merchant_id,
                        reports_orders.customer_id AS customer_id,
                        reports_orders.type AS type,
                        reports_orders.order_total_amount AS order_total_amount,
                        loyalty_points_history.points AS points,
                        reports_orders.completed_at_tz AS completed_at_tz
                FROM    reports_orders
                JOIN    payment_transactions
                ON      payment_transactions.order_id = reports_orders.id
                JOIN    loyalty_points_history
                ON      loyalty_points_history.object_id = payment_transactions.id
                WHERE   reports_orders.merchant_id = $1
                AND     loyalty_points_history.type = 'spend_transaction'
                AND     reports_orders.payment_status = 'paid'
              $body$
              language sql;
  - changeSet:
      id: 238
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             product_id uuid,
                             is_variant_of_product_id uuid,
                             order_id uuid,
                             quantity numeric,
                             location_id uuid,
                             returned_quantity numeric,
                             returned_amount numeric,
                             received_at_tz timestamp,
                             taxable_amount numeric,
                             non_taxable_amount numeric,
                             tax_amount numeric,
                             discount_amount numeric,
                             cogs_amount numeric,
                             gross_sale_amount numeric,
                             net_sale_amount numeric,
                             gross_profit_amount numeric,
                             completed_at_tz timestamp)
              AS $body$
                  SELECT   oi.id              AS id,
                           oi.merchant_id     AS merchant_id,
                           oi.product_id      AS product_id,
                           p.is_variant_of_product_id AS is_variant_of_product_id,
                           oi.order_id        AS order_id,
                           CASE oi.payment_status = 'paid' WHEN TRUE  THEN oi.quantity
                                                           WHEN FALSE THEN 0
                           END AS quantity,
                           orders.location_id AS location_id,
                           CASE oi.payment_status IN ('refunded', 'voided') WHEN TRUE  THEN quantity
                                                                            WHEN FALSE THEN 0
                           END AS returned_quantity,
                           CASE oi.payment_status IN ('refunded', 'voided') WHEN TRUE  THEN total_price_amount
                                                                            WHEN FALSE THEN 0
                           END AS returned_amount,
                           orders.received_at at time zone locations.timezone AS received_at_tz,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) > 0
                                WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                WHEN FALSE THEN 0
                             END, 2) AS taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) = 0
                                WHEN TRUE  THEN oi.total_price_amount
                                WHEN FALSE THEN 0
                             END, 2) AS non_taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS tax_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.discount_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS discount_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.cost_amount * oi.quantity, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS cogs_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_sale_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0) - COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS net_sale_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0) - COALESCE(oi.cost_amount * oi.quantity, 0) - COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_profit_amount,
                           orders.completed_at at time zone locations.timezone AS completed_at_tz
                  FROM     order_items oi,
                           orders,
                           locations,
                           products p
                  WHERE    oi.order_id = orders.id
                  AND      oi.product_id = p.id
                  AND      oi.calculated_price_amount > 0
                  AND      locations.id = orders.location_id
                  AND      oi.merchant_id = $1
                  AND      orders.location_id = ANY ($2)
                  AND      orders.completed_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;
  - changeSet:
      id: 239
      author: Vladyslav Pekker <vlad@paytouch.io>
      changes:
        - addColumn:
            tableName: merchants
            columns:
              - column:
                  name: legal_details
                  type: jsonb
              - column:
                  name: legal_country
                  type: varchar(255)
        - sql:
            sql: >
              update merchants set legal_details = jsonb_build_object('businessName', business_name);
  - changeSet:
      id: 240
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: location_settings
            columns:
              - column:
                  name: online_order
                  type: jsonb
  - changeSet:
      id: 241
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: online_order_attributes
            columns:
              - column:
                  name: accepted_at
                  type: datetime
              - column:
                  name: rejected_at
                  type: datetime
              - column:
                  name: estimated_ready_at
                  type: datetime
              - column:
                  name: estimated_delivered_at
                  type: datetime
  - changeSet:
      id: 242
      author: Vladyslav Pekker <vlad@paytouch.io>
      changes:
        - addColumn:
            tableName: customer_merchants
            columns:
              - column:
                  name: billing_details
                  type: jsonb
  - changeSet:
      id: 243
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: online_order_attributes
            columns:
              - column:
                  name: cancellation_status
                  type: varchar(20)
                  remarks: "io.paytouch.core.entities.enums.CancellationStatus"
              - column:
                  name: cancellation_reason
                  type: varchar(255)
  - changeSet:
      id: 244
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: location_settings
            columns:
              - column:
                  name: rapido_enabled
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
  - changeSet:
      id: 245
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: orders
            columns:
              - column:
                  name: is_fiscal
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
  - changeSet:
      id: 246
      author: Vladyslav Pekker <vlad@paytouch.io>
      changes:
        - addColumn:
            tableName: customer_merchants
            columns:
              - column:
                  name: state_code
                  type: varchar(255)
              - column:
                  name: country_code
                  type: varchar(255)
        - addColumn:
            tableName: customers
            columns:
              - column:
                  name: state_code
                  type: varchar(255)
              - column:
                  name: country_code
                  type: varchar(255)
        - addColumn:
            tableName: location_email_receipts
            columns:
              - column:
                  name: location_state_code
                  type: varchar(255)
              - column:
                  name: location_country_code
                  type: varchar(255)
        - addColumn:
            tableName: location_print_receipts
            columns:
              - column:
                  name: location_state_code
                  type: varchar(255)
              - column:
                  name: location_country_code
                  type: varchar(255)
        - addColumn:
            tableName: location_receipts
            columns:
              - column:
                  name: state_code
                  type: varchar(255)
              - column:
                  name: country_code
                  type: varchar(255)
        - addColumn:
            tableName: locations
            columns:
              - column:
                  name: state_code
                  type: varchar(255)
              - column:
                  name: country_code
                  type: varchar(255)
        - addColumn:
            tableName: order_delivery_addresses
            columns:
              - column:
                  name: state_code
                  type: varchar(255)
              - column:
                  name: country_code
                  type: varchar(255)
        - addColumn:
            tableName: users
            columns:
              - column:
                  name: state_code
                  type: varchar(255)
              - column:
                  name: country_code
                  type: varchar(255)
  - changeSet:
      id: 247
      author: Vladyslav Pekker <vlad@paytouch.io>
      changes:
        - addColumn:
            tableName: cash_drawer_activities
            columns:
              - column:
                  name: order_id
                  type: uuid
  - changeSet:
      id: 248
      author: Vladyslav Pekker <vlad@paytouch.io>
      changes:
        - addColumn:
            tableName: cash_drawers
            columns:
              - column:
                  name: manual_paid_in_amount
                  type: number(12,2)
              - column:
                  name: manual_paid_out_amount
                  type: number(12,2)
  - changeSet:
      id: 249
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: tips_assignments
            columns:
              - column:
                  name: cash_drawer_activity_id
                  type: uuid
                  constraints: { nullable: true }
  - changeSet:
      id: 250
      author: Vladyslav Pekker <vlad@paytouch.io>
      changes:
        - addColumn:
            tableName: tips_assignments
            columns:
              - column:
                  name: deleted_at
                  type: datetime
  - changeSet:
      id: 251
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE merchants SET features = jsonb '{"pos":{"enabled":true}}' || features;
  - changeSet:
      id: 252
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: customer_merchants
            columns:
              - column:
                  name: source
                  type: varchar(20)
        - sql:
            sql: >
              UPDATE customer_merchants SET source = 'pt_register';
        - addNotNullConstraint:
            tableName: customer_merchants
            columnName: source
  - changeSet:
      id: 253
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - modifyDataType:
            tableName: online_order_attributes
            columnName: rejection_reason
            newDataType: text
  - changeSet:
      id: 254
      author: Francesco <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: online_order_attributes
            columns:
              - column:
                  name: prepare_by_date_time
                  type: datetime
  - changeSet:
      id: 255
      author: Vladyslav Pekker <vlad@paytouch.io>
      changes:
        - addColumn:
            tableName: order_items
            columns:
              - column:
                  name: gift_card_pass_recipient_email
                  type: varchar(255)
  - changeSet:
      id: 256
      author: Francesco <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: payment_transactions
            columns:
              - column:
                  name: payment_processor
                  type: varchar(25)
        - sql:
            sql: >
              UPDATE payment_transactions
                SET payment_processor = merchants.payment_processor
                FROM merchants
                WHERE payment_type in ('debit_card', 'credit_card') AND payment_transactions.merchant_id = merchants.id;
              UPDATE payment_transactions SET payment_processor = 'delivery_provider' WHERE payment_type = 'delivery_provider';
              UPDATE payment_transactions SET payment_processor = 'paytouch' WHERE payment_processor is NULL;
        - addNotNullConstraint:
            tableName: payment_transactions
            columnName: payment_processor
  - changeSet:
      id: 257
      author: Francesco <francesco@paytouch.io>
      changes:
        - createTable:
            tableName: feature_groups
            columns:
              - column:
                  name: id
                  type: uuid
                  constraints: { primaryKey: true }
              - column:
                  name: name
                  type: varchar
                  constraints: { nullable: false, unique: true }
              - column:
                  name: description
                  type: text
              - column:
                  name: features
                  type: jsonb
                  defaultValue: "{}"
                  constraints: { nullable: false }
              - column:
                  name: all_enabled
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
              - column:
                  name: created_at
                  type: datetime
                  constraints: { nullable: false }
              - column:
                  name: updated_at
                  type: datetime
                  constraints: { nullable: false }
        - addColumn:
            tableName: merchants
            columns:
              - column:
                  name: setup_type
                  type: varchar(25)
        - sql:
            sql: >
              UPDATE merchants
                SET setup_type = 'dash'
                WHERE (features->>'pos')::json->>'enabled' = 'false';
              UPDATE merchants
                SET setup_type = 'paytouch'
                WHERE setup_type is null;
        - addNotNullConstraint:
            tableName: merchants
            columnName: setup_type
  - changeSet:
      id: 258
      author: Francesco <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              update merchants
                set payment_processor_config = payment_processor_config || jsonb_build_object('jsonClass', CONCAT('PaymentProcessorConfig$', payment_processor_config->>'jsonClass'));
  - changeSet:
      id: 259
      author: Francesco <francesco@paytouch.io>
      changes:
        - sql:
            sql: >
              update orders
              set completed_at_tz = orders.completed_at at time zone locations.timezone
              from locations
              where orders.location_id = locations.id
              and orders.completed_at is not null and orders.completed_at_tz is null;
              SELECT reports_orders_update( ARRAY (SELECT o.id FROM orders o, reports_orders ro WHERE o.id = ro.id AND o.completed_at_tz IS NOT NULL AND ro.completed_at_tz IS NULL) );
  - changeSet:
      id: 260
      author: Vladyslav Pekker <vlad@paytouch.io>
      changes:
        - addColumn:
            tableName: merchants
            columns:
              - column:
                  name: restaurant_type
                  type: varchar(20)
        - sql:
            sql: >
              UPDATE merchants SET restaurant_type = 'casual_dining';
        - addNotNullConstraint:
            tableName: merchants
            columnName: restaurant_type
  - changeSet:
      id: 261
      author: Vladyslav Pekker <vlad@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION random_string(size integer)
              RETURNS TEXT
              AS $body$
              SELECT array_to_string(
                  ARRAY (
                    SELECT substring(
                      '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
                      FROM (ceil(random()*36))::int FOR 1
                    )
                    FROM generate_series(1, size)
                  ),
                  ''
                )
              $body$
              LANGUAGE sql VOLATILE;
        - addColumn:
            tableName: gift_card_passes
            columns:
              - column:
                  name: online_code
                  type: varchar(16)
        - sql:
            sql: >
              UPDATE gift_card_passes SET online_code=random_string(16);
        - addNotNullConstraint:
            tableName: gift_card_passes
            columnName: online_code
        - addUniqueConstraint:
            tableName: gift_card_passes
            columnNames: online_code
  - changeSet:
      id: 262
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: location_settings
            columns:
              - column:
                  name: delivery_providers_enabled
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: false }
        - sql:
            sql: >
              UPDATE location_settings SET delivery_providers_enabled = true WHERE merchant_id IN (SELECT merchant_id FROM payment_transactions WHERE payment_processor = 'delivery_provider' GROUP BY merchant_id);
  - changeSet:
      id: 263
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - createIndex:
            columns:
              - column:
                  name: category_id
            indexName: idx_product_categories_category_id
            tableName: product_categories
        - createIndex:
            columns:
              - column:
                  name: product_id
            indexName: idx_product_categories_product_id
            tableName: product_categories
        - createIndex:
            columns:
              - column:
                  name: product_category_id
            indexName: idx_product_category_options_product_category_id
            tableName: product_category_options
        - createIndex:
            columns:
              - column:
                  name: product_location_id
            indexName: idx_product_location_tax_rates_product_location_id
            tableName: product_location_tax_rates
        - createIndex:
            columns:
              - column:
                  name: merchant_id
            indexName: idx_products_merchant_id
            tableName: products
        - createIndex:
            columns:
              - column:
                  name: is_variant_of_product_id
            indexName: idx_products_is_variant_of_product_id
            tableName: products
        - createIndex:
            columns:
              - column:
                  name: product_id
            indexName: idx_variant_option_types_product_id
            tableName: variant_option_types
        - createIndex:
            columns:
              - column:
                  name: product_id
            indexName: idx_product_variant_options_product_id
            tableName: product_variant_options
        - createIndex:
            columns:
              - column:
                  name: product_id
            indexName: idx_product_locations_product_id
            tableName: product_locations
        - createIndex:
            columns:
              - column:
                  name: product_id
            indexName: idx_modifier_set_products_product_id
            tableName: modifier_set_products
  - changeSet:
      id: 264
      author: Francesco Levorato <francesco@paytouch.io>
      changes:
        - addColumn:
            tableName: catalogs
            columns:
              - column:
                  name: type
                  type: varchar(20)
        - sql:
            sql: >
              UPDATE catalogs SET type = 'menu';
        - addNotNullConstraint:
            tableName: catalogs
            columnName: type
        - sql:
            sql: >
              INSERT INTO catalogs (id, merchant_id, name, type, created_at, updated_at)
               (SELECT gen_random_uuid(), id, 'Default Menu', 'default_menu', NOW(), NOW() FROM merchants);
              UPDATE categories
                SET catalog_id = catalogs.id
                FROM catalogs
                WHERE
                  catalogs.merchant_id = categories.merchant_id
                  AND catalogs.type = 'default_menu'
                  AND categories.catalog_id IS NULL;
        - addNotNullConstraint:
            tableName: categories
            columnName: catalog_id
  - changeSet:
      id: 265
      author: Vladyslav Pekker <vlad@paytouch.io>
      changes:
        - addColumn:
            tableName: modifier_sets
            columns:
              - column:
                  name: minimum_option_count
                  type: int
              - column:
                  name: maximum_option_count
                  type: int
        - sql:
            sql: >
              UPDATE modifier_sets
                 SET minimum_option_count = 0;

              UPDATE modifier_sets
                 SET minimum_option_count = 1
               WHERE modifier_sets.single_choice = false
                 AND modifier_sets.force         = true;

              UPDATE modifier_sets
                 SET minimum_option_count = 0, maximum_option_count = 1
               WHERE modifier_sets.single_choice = true
                 AND modifier_sets.force         = false;

              UPDATE modifier_sets
                 SET minimum_option_count = 1, maximum_option_count = 1
               WHERE modifier_sets.single_choice = true
                 AND modifier_sets.force         = true;
        - addNotNullConstraint:
            tableName: modifier_sets
            columnName: minimum_option_count
            columnDataType: int
            defaultNullValue: 0
        - dropColumn:
            tableName: modifier_sets
            columnName: single_choice
        - dropColumn:
            tableName: modifier_sets
            columnName: force
  - changeSet:
      id: 266
      author: Vladyslav Pekker <vlad@paytouch.io>
      changes:
        - addColumn:
            tableName: modifier_sets
            columns:
              - column:
                  name: maximum_single_option_count
                  type: int
        - sql:
            sql: >
              UPDATE modifier_sets
                 SET maximum_single_option_count = 1;
  - changeSet:
      id: 267
      author: Gabriele Salvini <gabriele@paytouch.io>
      changes:
        - sql:
            sql: >
              UPDATE merchants
                 SET features = features || '{"customers": {"enabled" : true}}'
               WHERE setup_type='dash';
  - changeSet:
      id: 268
      author: Vladyslav Pekker <vlad@paytouch.io>
      changes:
        - addUniqueConstraint:
            tableName: user_locations
            columnNames: merchant_id, user_id, location_id
        - addUniqueConstraint:
            tableName: tax_rate_locations
            columnNames: merchant_id, tax_rate_id, location_id
        - addUniqueConstraint:
            tableName: supplier_locations
            columnNames: merchant_id, supplier_id, location_id
        - addUniqueConstraint:
            tableName: stocks
            columnNames: merchant_id, product_id, location_id
        - addUniqueConstraint:
            tableName: modifier_set_locations
            columnNames: merchant_id, modifier_set_id, location_id
        - addUniqueConstraint:
            tableName: loyalty_program_locations
            columnNames: merchant_id, loyalty_program_id, location_id
        - addUniqueConstraint:
            tableName: discount_locations
            columnNames: merchant_id, discount_id, location_id
        - addUniqueConstraint:
            tableName: category_locations
            columnNames: merchant_id, category_id, location_id
        - addUniqueConstraint:
            tableName: category_locations
            columnNames: merchant_id, category_id, location_id
        - addUniqueConstraint:
            tableName: product_locations
            columnNames: merchant_id, product_id, location_id
  - changeSet:
      id: 269
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: users
            columns:
              - column:
                  name: auth0_user_id
                  type: varchar(255)
                  constraints: { nullable: true, unique: true }
  - changeSet:
      id: 270
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - sql:
            sql: >
              CREATE OR REPLACE FUNCTION reports_product_sales_func(merchant_id uuid, location_ids uuid[], from_date timestamp, to_date timestamp)
              RETURNS TABLE (id uuid,
                             merchant_id uuid,
                             product_id uuid,
                             is_variant_of_product_id uuid,
                             order_id uuid,
                             quantity numeric,
                             location_id uuid,
                             returned_quantity numeric,
                             returned_amount numeric,
                             received_at_tz timestamp,
                             taxable_amount numeric,
                             non_taxable_amount numeric,
                             tax_amount numeric,
                             discount_amount numeric,
                             cogs_amount numeric,
                             gross_sale_amount numeric,
                             net_sale_amount numeric,
                             gross_profit_amount numeric,
                             completed_at_tz timestamp)
              AS $body$
                  SELECT   oi.id              AS id,
                           oi.merchant_id     AS merchant_id,
                           oi.product_id      AS product_id,
                           p.is_variant_of_product_id AS is_variant_of_product_id,
                           oi.order_id        AS order_id,
                           CASE oi.payment_status = 'paid' WHEN TRUE  THEN oi.quantity
                                                           WHEN FALSE THEN 0
                           END AS quantity,
                           orders.location_id AS location_id,
                           CASE oi.payment_status IN ('refunded', 'voided') WHEN TRUE  THEN quantity
                                                                            WHEN FALSE THEN 0
                           END AS returned_quantity,
                           CASE oi.payment_status IN ('refunded', 'voided') WHEN TRUE  THEN total_price_amount
                                                                            WHEN FALSE THEN 0
                           END AS returned_amount,
                           orders.received_at at time zone locations.timezone AS received_at_tz,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) > 0
                                WHEN TRUE  THEN (oi.total_price_amount - oi.tax_amount)
                                WHEN FALSE THEN 0
                             END, 2) AS taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' AND COALESCE(oi.tax_amount, 0) = 0
                                WHEN TRUE  THEN oi.total_price_amount
                                WHEN FALSE THEN 0
                             END, 2) AS non_taxable_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS tax_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.discount_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS discount_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.cost_amount * oi.quantity, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS cogs_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_sale_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0) - COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS net_sale_amount,
                           ROUND(
                             CASE oi.payment_status = 'paid' WHEN TRUE THEN COALESCE(oi.total_price_amount, 0) - COALESCE(oi.cost_amount * oi.quantity, 0) - COALESCE(oi.tax_amount, 0)
                                                             WHEN FALSE THEN 0
                             END, 2) AS gross_profit_amount,
                           orders.completed_at at time zone locations.timezone AS completed_at_tz
                  FROM     order_items oi,
                           orders,
                           locations,
                           products p
                  WHERE    oi.order_id = orders.id
                  AND      oi.product_id = p.id
                  AND      oi.calculated_price_amount > 0
                  AND      locations.id = orders.location_id
                  AND      oi.merchant_id = $1
                  AND      orders.location_id = ANY ($2)
                  AND      orders.received_at BETWEEN ($3 - interval '1 day') AND ($4 + interval '1 day')
              $body$
              language sql;

              DROP FUNCTION reports_loyalty_orders_func(merchant_id uuid);
              CREATE OR REPLACE FUNCTION reports_loyalty_orders_func(merchant_id uuid)
              RETURNS TABLE (
                        id uuid,
                        merchant_id uuid,
                        customer_id uuid,
                        type varchar,
                        order_total_amount numeric,
                        points integer,
                        received_at_tz timestamp,
                        completed_at_tz timestamp)
              AS $body$
                SELECT
                        reports_orders.id AS id,
                        reports_orders.merchant_id AS merchant_id,
                        reports_orders.customer_id AS customer_id,
                        reports_orders.type AS type,
                        reports_orders.order_total_amount AS order_total_amount,
                        loyalty_points_history.points AS points,
                        reports_orders.received_at_tz AS received_at_tz,
                        reports_orders.completed_at_tz AS completed_at_tz
                FROM    reports_orders
                JOIN    payment_transactions
                ON      payment_transactions.order_id = reports_orders.id
                JOIN    loyalty_points_history
                ON      loyalty_points_history.object_id = payment_transactions.id
                WHERE   reports_orders.merchant_id = $1
                AND     loyalty_points_history.type = 'spend_transaction'
                AND     reports_orders.payment_status = 'paid'
              $body$
              language sql;
  - changeSet:
      id: 271
      author: Luca Spiller <luca@paytouch.io>
      changes:
        - addColumn:
            tableName: locations
            columns:
              - column:
                  name: dummy_data
                  type: boolean
                  defaultValueBoolean: false
                  constraints: { nullable: true }
