akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logger-startup-timeout = 30s
  loglevel = "INFO"
  loglevel = ${?LOG_LEVEL}
  stdout-loglevel = "INFO"
  stdout-loglevel = ${?LOG_LEVEL}
}

bcrypt.rounds = 10

cors.allowOrigins = ["*"]
cors.allowOrigins = ${?CORS_ALLOW_ORIGINS}

http {
  host = "0.0.0.0"
  host = ${?HOST}
  port = 7000
  port = ${?PORT}
}

jwt {
  secret = ${JWT_SECRET}
  ordering_secret = ${JWT_ORDERING_SECRET}
}

// From https://stackoverflow.com/questions/37495523/slick-confused-about-numthreads-and-best-practice-for-good-performance
// numThreads (Int, optional, default: 20): The number of concurrent threads in the thread pool for asynchronous execution
// of database actions. See the HikariCP wiki for more imformation about sizing the thread pool correctly. Note that for
// asynchronous execution in Slick you should tune the thread pool size (this parameter) accordingly instead of the
// maximum connection pool size.
// queueSize (Int, optional, default: 1000): The size of the queue for database actions which cannot be executed
// immediately when all threads are busy. Beyond this limit new actions fail immediately. Set to 0 for no queue
// (direct hand-off) or to -1 for an unlimited queue size (not recommended).
// maxConnections (Int, optional, default: numThreads * 5): The maximum number of connections in the pool.
// minConnections (Int, optional, default: same as numThreads): The minimum number of connections to keep in the pool.
//
// From https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
// connections = ((core_count * 2) + effective_spindle_count)
//
// From https://github.com/slick/slick/pull/1855
// it is required that maxThreads <= maxConnections and it is warned that maxConnection > maxThreads can cause locks
// hence maxThreads == minThreads == maxConnections is the way

postgres {
  poolName = core.pool.postgres
  properties {
    ApplicationName = core.postgres
  }

  url = ${POSTGRES_URI}
  user = ${POSTGRES_USER}
  password = ${POSTGRES_PASSWORD}
  driver = org.postgresql.Driver
  numThreads = 20
  numThreads = ${?POSTGRES_NUM_THREADS}
  maxConnections = 20
  maxConnections = ${?POSTGRES_NUM_THREADS}
  connectionTimeout = 2000 // milliseconds
  connectionTimeout = ${?POSTGRES_CONN_TIMEOUT}
  leakDetectionThreshold = 0
  leakDetectionThreshold = ${?POSTGRES_LEAK_DETECTION_THRESHOLD}
  // https://stackoverflow.com/a/60380157 and https://github.com/brettwooldridge/HikariCP#frequently-used
  // suggest to explicitly set maxLifetime
  // Fixes errors like: "Failed to validate connection XYZ (This connection has been closed.). Possibly consider using a shorter maxLifetime value."
  maxLifetime = 600000
  // idleTimeout needs to be at least 1ms shorter than maxLifetime
  idleTimeout = 400000
}

reports.postgres {
  poolName = core.pool.reports
  properties {
    ApplicationName = core.reports
  }

  url = ${POSTGRES_URI}
  user = ${POSTGRES_USER}
  password = ${POSTGRES_PASSWORD}
  driver = org.postgresql.Driver
  numThreads = 3
  numThreads = ${?REPORTS_POSTGRES_NUM_THREADS}
  maxConnections = 3
  maxConnections = ${?REPORTS_POSTGRES_NUM_THREADS}
  connectionTimeout = 5000 // milliseconds
  connectionTimeout = ${?REPORTS_POSTGRES_CONN_TIMEOUT}
  maxLifetime = 600000
  idleTimeout = 400000
}

pusher {
  key = ${PUSHER_KEY}
  secret = ${PUSHER_SECRET}
}

uploads {
  directory = "/tmp"
  directory = ${?IMPORTS_DIRECTORY_UPLOAD}
  images {
    cloudfrontUrl = ${CLOUDFRONT_IMAGES_DISTRIBUTION_URL}
    cloudinaryUrl = ${CLOUDINARY_IMAGES_URL}
    s3 = ${AWS_UPLOADS_BUCKET}
  }
  s3 {
    exports = ${AWS_EXPORTS_BUCKET}
    imports = ${AWS_IMPORTS_BUCKET}
    cash_drawer_activities = ${AWS_CASH_DRAWER_ACTIVITIES_BUCKET}
  }
}

urbanairship {
  host = "wallet-api.urbanairship.com"
  host = ${?URBANAIRSHIP_HOST}
  username = ${URBANAIRSHIP_USER}
  apiKey = ${URBANAIRSHIP_PASS}
  loyaltyProjectId = ${URBANAIRSHIP_LOYALTY_PROJECT_ID}
  giftCardProjectId = ${URBANAIRSHIP_GIFT_CARD_PROJECT_ID}
}

queues {
  ptNotifierName = ${PT_NOTIFIER_SQS_QUEUE_NAME}
  ptCoreName = ${PT_CORE_SQS_QUEUE_NAME}
  ptDeliveryName = ${PT_DELIVERY_SQS_QUEUE_NAME}
  ptOrderingName = ${PT_ORDERING_SQS_QUEUE_NAME}
  msgCount = 10
  msgCount = ${?SQS_MSG_COUNT}
}

hmacSecret = ${HMAC_SECRET}
ptCoreURL = ${PT_CORE_URL}

image.size {
  regular {
    thumbnail = 200
    small = 400
    medium = 800
    large = 1200
  }
}

worldpay.defaults {
  accountId = ${?WORLDPAY_ACCOUNT_ID}
  acceptorId = ${?WORLDPAY_ACCEPTOR_ID}
  terminalId = ${?WORLDPAY_TERMINAL_ID}
  accountToken = ${?WORLDPAY_ACCOUNT_TOKEN}
}

barcodes.email {
  height = 150
  width = 350
}

demoImages.baseUrl = "https://s3.amazonaws.com/demo-image-uploads"

logging {
  postResponse = false
  postResponse = ${?LOG_POST_RESPONSE}
  endpointsToDebug = ""
  endpointsToDebug = ${?LOG_ENDPOINTS_TO_DEBUG} # example setup:'products.create,product.update'
}

ordering {
  url = ${ORDERING_URL}
  user = ${ORDERING_USER}
  password = ${ORDERING_PASSWORD}
}

redis {
  host = ${REDIS_HOST}
  port = ${REDIS_PORT}
}

admin_password_auth {
  enabled = false
  enabled = ${?ADMIN_PASSWORD_AUTH_ENABLED}
}

google_auth {
  client_id = ${GOOGLE_AUTH_CLIENT_ID}
}

stripe {
  base_uri = ${STRIPE_BASE_URI}
  connect_uri = ${STRIPE_CONNECT_URI}
  publishable_key = ${STRIPE_PUBLISHABLE_KEY}
  secret_key = ${STRIPE_SECRET_KEY}
}

auth0 {
  algorithm = "RS256"
  algorithm = ${?AUTH0_ALGORITHM}
  api_identifier = ${AUTH0_API_IDENTIFIER}
  allowed_issuers = ${AUTH0_ALLOWED_ISSUERS}
}
