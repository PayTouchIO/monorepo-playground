package io.paytouch.core.services

import java.util.UUID

import akka.http.scaladsl.model.{ HttpRequest, Uri }
import akka.http.scaladsl.server.RequestContext
import io.paytouch.core.entities.enums.{ PassItemType, PassType }

class PassServiceSpec extends ServiceDaoSpec {

  abstract class PassServiceSpecContext extends ServiceDaoSpecContext {
    val uuid = UUID.fromString("f191ec62-d461-49d7-8568-d7faf920e86a")

    def mockRequest(url: String) = {
      val httpRequest = HttpRequest.apply(uri = Uri(url))

      val requestContext = mock[RequestContext]
      requestContext.request returns httpRequest
    }
  }

  "PassService" in {
    "verifyUrl" should {
      "return true if calculated token matches received token value" in new PassServiceSpecContext {
        val okUrl =
          "http://localhost:7000/v1/public/passes.install?id=f191ec62-d461-49d7-8568-d7faf920e86a&type=android&item_type=gift_card&token=cbbe7740c1b24e61660618e3de49f8913ca24e94"
        val okRequest = mockRequest(okUrl)
        passService.verifyUrl(okRequest) must beTrue
      }

      "return false if calculated token doesn't received token value" in new PassServiceSpecContext {
        val badUrl =
          "http://localhost:7000/v1/public/passes.install?id=f191ec62-d461-49d7-8568-d7faf920e86a&type=android&item_type=gift_card&tbaden=BA"
        val badRequest = mockRequest(badUrl)
        passService.verifyUrl(badRequest) must beFalse
      }

      "return true if verifying an url generated by itself" in new PassServiceSpecContext {
        val url = passService.generateUrl(uuid, PassType.Ios, PassItemType.GiftCard)
        val request = mockRequest(url)
        passService.verifyUrl(request) must beTrue
      }
    }

    "generateUrl" should {
      "return a signed url" in new PassServiceSpecContext {
        val expectedResult =
          "http://localhost:7000/v1/public/passes.install?id=f191ec62-d461-49d7-8568-d7faf920e86a&item_type=gift_card&token=a99f689ec5dd71f160031117589ea02cda3e7730&type=ios"
        passService.generateUrl(uuid, PassType.Ios, PassItemType.GiftCard) ==== expectedResult
      }
    }

    "generatePath" should {
      "return a signed path" in new PassServiceSpecContext {
        val expectedResult =
          "/v1/public/passes.install?id=f191ec62-d461-49d7-8568-d7faf920e86a&item_type=gift_card&token=a99f689ec5dd71f160031117589ea02cda3e7730&type=ios"
        passService.generatePath(uuid, PassType.Ios, PassItemType.GiftCard) ==== expectedResult
      }
    }
  }
}
