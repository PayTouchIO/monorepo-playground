package io.paytouch.ordering.data.model

import java.time.{ LocalTime, ZonedDateTime }
import java.util.{ Currency, UUID }

import io.paytouch.ordering.entities._
import io.paytouch.ordering.entities.enums.{ CartStatus, OrderType, PaymentMethodType, PaymentProcessor }

final case class CartRecord(
    id: UUID,
    merchantId: UUID,
    storeId: UUID,
    orderId: Option[UUID],
    orderNumber: Option[String],
    paymentProcessor: Option[PaymentProcessor],
    paymentMethodType: Option[PaymentMethodType],
    currency: Currency,
    totalAmountWithoutGiftCards: BigDecimal,
    totalAmount: BigDecimal,
    subtotalAmount: BigDecimal,
    taxAmount: BigDecimal,
    tipAmount: BigDecimal,
    deliveryFeeAmount: Option[BigDecimal],
    phoneNumber: Option[String],
    email: Option[String],
    firstName: Option[String],
    lastName: Option[String],
    deliveryAddressLine1: Option[String],
    deliveryAddressLine2: Option[String],
    deliveryCity: Option[String],
    deliveryState: Option[String],
    deliveryCountry: Option[String],
    deliveryPostalCode: Option[String],
    orderType: OrderType,
    prepareBy: Option[LocalTime],
    drivingDistanceInMeters: Option[BigDecimal],
    estimatedDrivingTimeInMins: Option[Int],
    storeAddress: Option[Address],
    status: CartStatus,
    appliedGiftCardPasses: Seq[GiftCardPassApplied],
    createdAt: ZonedDateTime,
    updatedAt: ZonedDateTime,
  ) extends SlickStoreRecord

final case class CartUpdate(
    id: Default[UUID],
    merchantId: Option[UUID],
    storeId: Option[UUID],
    orderId: ResettableUUID,
    orderNumber: ResettableString,
    paymentProcessor: Option[PaymentProcessor],
    paymentMethodType: Option[PaymentMethodType],
    currency: Option[Currency],
    totalAmountWithoutGiftCards: Option[BigDecimal],
    totalAmount: Option[BigDecimal],
    subtotalAmount: Option[BigDecimal],
    taxAmount: Option[BigDecimal],
    tipAmount: Option[BigDecimal],
    deliveryFeeAmount: ResettableBigDecimal,
    phoneNumber: ResettableString,
    email: ResettableString,
    firstName: ResettableString,
    lastName: ResettableString,
    deliveryAddressLine1: ResettableString,
    deliveryAddressLine2: ResettableString,
    deliveryCity: ResettableString,
    deliveryState: ResettableString,
    deliveryCountry: ResettableString,
    deliveryPostalCode: ResettableString,
    orderType: Option[OrderType],
    prepareBy: ResettableLocalTime,
    drivingDistanceInMeters: ResettableBigDecimal,
    estimatedDrivingTimeInMins: ResettableInt,
    storeAddress: Option[Address],
    status: Option[CartStatus],
    appliedGiftCardPasses: Option[Seq[GiftCardPassApplied]],
  ) extends SlickUpdate[CartRecord] {
  def toRecord: CartRecord = {
    requires(
      "merchant id" -> merchantId,
      "store id" -> storeId,
      "currency" -> currency,
      "total amount" -> totalAmount,
      "subtotal amount" -> subtotalAmount,
      "tax amount" -> taxAmount,
      "tip amount" -> tipAmount,
      "order type" -> orderType,
    )

    CartRecord(
      id = id.getOrDefault,
      merchantId = merchantId.get,
      storeId = storeId.get,
      orderId = orderId,
      orderNumber = orderNumber,
      paymentProcessor = paymentProcessor,
      paymentMethodType = paymentMethodType,
      currency = currency.get,
      totalAmountWithoutGiftCards = totalAmountWithoutGiftCards.get,
      totalAmount = totalAmount.get,
      subtotalAmount = subtotalAmount.get,
      taxAmount = taxAmount.get,
      tipAmount = tipAmount.get,
      deliveryFeeAmount = deliveryFeeAmount,
      phoneNumber = phoneNumber,
      email = email,
      firstName = firstName,
      lastName = lastName,
      deliveryAddressLine1 = deliveryAddressLine1,
      deliveryAddressLine2 = deliveryAddressLine2,
      deliveryCity = deliveryCity,
      deliveryState = deliveryState,
      deliveryCountry = deliveryCountry,
      deliveryPostalCode = deliveryPostalCode,
      orderType = orderType.get,
      prepareBy = prepareBy,
      drivingDistanceInMeters = drivingDistanceInMeters,
      estimatedDrivingTimeInMins = estimatedDrivingTimeInMins,
      storeAddress = storeAddress,
      status = status.getOrElse(CartStatus.New),
      appliedGiftCardPasses = appliedGiftCardPasses.getOrElse(Seq.empty),
      createdAt = now,
      updatedAt = now,
    )
  }

  def updateRecord(record: CartRecord): CartRecord =
    CartRecord(
      id = id.getOrElse(record.id),
      merchantId = merchantId.getOrElse(record.merchantId),
      storeId = storeId.getOrElse(record.storeId),
      orderId = orderId.getOrElse(record.orderId),
      orderNumber = orderNumber.getOrElse(record.orderNumber),
      paymentProcessor = paymentProcessor.orElse(record.paymentProcessor),
      paymentMethodType = paymentMethodType.orElse(record.paymentMethodType),
      currency = currency.getOrElse(record.currency),
      totalAmountWithoutGiftCards = totalAmountWithoutGiftCards.getOrElse(record.totalAmountWithoutGiftCards),
      totalAmount = totalAmount.getOrElse(record.totalAmount),
      subtotalAmount = subtotalAmount.getOrElse(record.subtotalAmount),
      taxAmount = taxAmount.getOrElse(record.taxAmount),
      tipAmount = tipAmount.getOrElse(record.tipAmount),
      deliveryFeeAmount = deliveryFeeAmount.getOrElse(record.deliveryFeeAmount),
      phoneNumber = phoneNumber.getOrElse(record.phoneNumber),
      email = email.getOrElse(record.email),
      firstName = firstName.getOrElse(record.firstName),
      lastName = lastName.getOrElse(record.lastName),
      deliveryAddressLine1 = deliveryAddressLine1.getOrElse(record.deliveryAddressLine1),
      deliveryAddressLine2 = deliveryAddressLine2.getOrElse(record.deliveryAddressLine2),
      deliveryCity = deliveryCity.getOrElse(record.deliveryCity),
      deliveryState = deliveryState.getOrElse(record.deliveryState),
      deliveryCountry = deliveryCountry.getOrElse(record.deliveryCountry),
      deliveryPostalCode = deliveryPostalCode.getOrElse(record.deliveryPostalCode),
      orderType = orderType.getOrElse(record.orderType),
      prepareBy = prepareBy.getOrElse(record.prepareBy),
      drivingDistanceInMeters = drivingDistanceInMeters.getOrElse(record.drivingDistanceInMeters),
      estimatedDrivingTimeInMins = estimatedDrivingTimeInMins.getOrElse(record.estimatedDrivingTimeInMins),
      storeAddress = storeAddress.orElse(record.storeAddress),
      status = status.getOrElse(record.status),
      appliedGiftCardPasses = appliedGiftCardPasses.getOrElse(record.appliedGiftCardPasses),
      createdAt = record.createdAt,
      updatedAt = now,
    )
}

object CartUpdate {
  val empty: CartUpdate = CartUpdate(
    id = None,
    merchantId = None,
    storeId = None,
    orderId = None,
    orderNumber = None,
    paymentProcessor = None,
    paymentMethodType = None,
    currency = None,
    totalAmountWithoutGiftCards = None,
    totalAmount = None,
    subtotalAmount = None,
    taxAmount = None,
    tipAmount = None,
    deliveryFeeAmount = None,
    phoneNumber = None,
    email = None,
    firstName = None,
    lastName = None,
    deliveryAddressLine1 = None,
    deliveryAddressLine2 = None,
    deliveryCity = None,
    deliveryState = None,
    deliveryCountry = None,
    deliveryPostalCode = None,
    orderType = None,
    prepareBy = None,
    drivingDistanceInMeters = None,
    estimatedDrivingTimeInMins = None,
    storeAddress = None,
    status = None,
    appliedGiftCardPasses = None,
  )
}
