akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logger-startup-timeout = 30s
  loglevel = "INFO"
  loglevel = ${?LOG_LEVEL}
  stdout-loglevel = "INFO"
  stdout-loglevel = ${?LOG_LEVEL}
}

cors.allowOrigins = ["*"]
cors.allowOrigins = ${?CORS_ALLOW_ORIGINS}

http {
  host = "0.0.0.0"
  host = ${?HOST}
  port = 7005
  port = ${?PORT}
}

postgres {
  poolName = ordering.pool.postgres
  properties {
    ApplicationName = ordering.postgres
  }

  url = ${?POSTGRES_URI}
  user = ${?POSTGRES_USER}
  password = ${?POSTGRES_PASSWORD}
  driver = org.postgresql.Driver
  numThreads = 20
  numThreads = ${?POSTGRES_NUM_THREADS}
  maxConnections = 20
  maxConnections = ${?POSTGRES_NUM_THREADS}
  connectionTimeout = 2000 # milliseconds
  connectionTimeout = ${?POSTGRES_CONN_TIMEOUT}
  leakDetectionThreshold = 0
  leakDetectionThreshold = ${?POSTGRES_LEAK_DETECTION_THRESHOLD}
  // https://stackoverflow.com/a/60380157 and https://github.com/brettwooldridge/HikariCP#frequently-used
  // suggest to explicitly set maxLifetime
  // Fixes errors like: "Failed to validate connection XYZ (This connection has been closed.). Possibly consider using a shorter maxLifetime value."
  maxLifetime = 600000
  // idleTimeout needs to be at least 1ms shorter than maxLifetime
  idleTimeout = 400000
}

logging {
  postResponse = false
  postResponse = ${?LOG_POST_RESPONSE}
  endpointsToDebug = ""
  endpointsToDebug = ${?LOG_ENDPOINTS_TO_DEBUG} # example setup:'products.create,product.update'
}

core {
  user = ${?CORE_USER}
  password = ${?CORE_PASSWORD}
  uri = ${?PT_CORE_URL}
  jwt_ordering_secret = ${?JWT_ORDERING_SECRET}
}

ordering.uri = ${?PT_ORDERING_URL}

storefront {
  user = ${?STOREFRONT_USER}
  password = ${?STOREFRONT_PASSWORD}
}

queues {
  ptOrderingName = ${?PT_ORDERING_SQS_QUEUE_NAME}
  ptCoreName = ${?PT_CORE_SQS_QUEUE_NAME}
  msgCount = 10
  msgCount = ${?SQS_MSG_COUNT}
}

google.key = ${?GOOGLE_API_KEY}

worldpay {
  transaction_endpoint_uri = ${?WORLDPAY_TRANSACTION_ENDPOINT_URI}
  reporting_endpoint_uri = ${?WORLDPAY_REPORTING_ENDPOINT_URI}
  checkout_uri = ${?WORLDPAY_CHECKOUT_URI}
  application_id = ${?WORLDPAY_APPLICATION_ID}
  return_uri = ${?WORLDPAY_RETURN_URI}
}

stripe {
  application_fee_base_points = 40
  base_uri = ${?STRIPE_BASE_URI}
  secret_key = ${?STRIPE_SECRET_KEY}
  webhook_secret = ${?STRIPE_WEBHOOK_SECRET}
  livemode = ${?STRIPE_LIVEMODE}
}

is_development = false
is_development = ${?IS_DEVELOPMENT}

feature {
  useStorePaymentTransaction = false
  useStorePaymentTransaction = ${?FEATURE_USE_STORE_PAYMENT_TRANSACTION}
}

redis {
  host = ${REDIS_HOST}
  port = ${REDIS_PORT}
}
