swagger: "2.0"
info:
  description: This is Paytouch Ordering API documentation.
  version: 0.1.0
  title: Paytouch Ordering
  contact: { name: apiteam@paytouch.io }
  license:
    { name: Apache 2.0, url: "http://www.apache.org/licenses/LICENSE-2.0.html" }
host: example.com
basePath: /v1
schemes: [https]
securityDefinitions:
  bearer: { type: apiKey, name: Authorization, in: header }
  basicAuth: { type: basic }
paths:
  /ping:
    get:
      tags: [utils]
      summary: Checks if API responds something.
      consumes: [application/json]
      produces: [application/json]
      responses:
        "200": { description: API is alive }
  /carts.add_product:
    post:
      tags: [carts]
      parameters:
        - name: cart
          in: body
          description: The product item you want to add to the cart.
          required: true
          schema: { $ref: "definitions.yml#/definitions/ProductCartItemCreation" }
      summary: Adds a product to the cart
      description: It will create a new item or merge quantity to an existing matching item.
      operationId: cartsAddProduct
      consumes: [application/json]
      produces: [application/json]
      security:
        - basicAuth: []
      responses:
        "200":
          description: Updated - entity has been updated
          schema: { $ref: "definitions.yml#/definitions/CartResponse" }
  /carts.add_gift_card:
    post:
      tags: [carts]
      parameters:
        - name: cart
          in: body
          description: The gift card item you want to add to the cart.
          required: true
          schema:
            { $ref: "definitions.yml#/definitions/GiftCardCartItemCreation" }
      summary: Adds a product to the cart
      description: It will create a new item or merge quantity to an existing matching item.
      operationId: cartsAddGiftCard
      consumes: [application/json]
      produces: [application/json]
      security:
        - basicAuth: []
      responses:
        "200":
          description: Updated - entity has been updated
          schema: { $ref: "definitions.yml#/definitions/CartResponse" }
  /carts.get:
    get:
      tags: [carts]
      summary: Returns a cart
      description: Returns a cart by id
      operationId: cartById
      parameters:
        - {
            name: cart_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart,
            required: true,
          }
      consumes: [application/json]
      produces: [application/json]
      security:
        - basicAuth: []
      responses:
        "200":
          description: OK
          schema: { $ref: "definitions.yml#/definitions/CartResponse" }
  /carts.apply_gift_card:
    post:
      tags: [carts]
      parameters:
        - {
            name: cart_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart to check out,
            required: true,
          }
        - name: cart
          in: body
          description: The cart you want to check out
          required: false
          schema: { $ref: "definitions.yml#/definitions/ApplyGiftCard" }
      summary: Applies gift card
      description: "Applied gift card unless it's already used."
      operationId: applyGiftCard
      consumes: [application/json]
      produces: [application/json]
      security:
        - basicAuth: []
      responses:
        "200":
          description: OK
          schema: { $ref: "definitions.yml#/definitions/CartResponse" }
  /carts.unapply_gift_card:
    post:
      tags: [carts]
      parameters:
        - {
            name: cart_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart to check out,
            required: true,
          }
        - name: cart
          in: body
          description: The cart you want to check out
          required: false
          schema: { $ref: "definitions.yml#/definitions/UnapplyGiftCard" }
      summary: Unapplies gift card
      description: "Unapplied gift card unless it's already used."
      operationId: unapplyGiftCard
      consumes: [application/json]
      produces: [application/json]
      security:
        - basicAuth: []
      responses:
        "200":
          description: OK
          schema: { $ref: "definitions.yml#/definitions/CartResponse" }
        "400":
          description: Bad Request. Gift card is already charged.
  /carts.checkout:
    post:
      tags: [carts]
      parameters:
        - {
            name: cart_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart to check out,
            required: true,
          }
        - name: cart
          in: body
          description: The cart you want to check out
          required: false
          schema: { $ref: "definitions.yml#/definitions/CartUpdate" }
      summary: Checks out a cart
      description: "This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched."
      operationId: checkoutCart
      consumes: [application/json]
      produces: [application/json]
      security:
        - basicAuth: []
      responses:
        "200":
          description: OK
          schema: { $ref: "definitions.yml#/definitions/CartResponse" }
  /carts.create:
    post:
      tags: [carts]
      parameters:
        - {
            name: cart_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart to create,
            required: true,
          }
        - name: cart
          in: body
          description: The cart you want to create
          required: true
          schema: { $ref: "definitions.yml#/definitions/CartCreation" }
      summary: Creates a cart
      description: ""
      operationId: createCart
      consumes: [application/json]
      produces: [application/json]
      security:
        - basicAuth: []
      responses:
        "201":
          description: Created - entity has been created
          schema: { $ref: "definitions.yml#/definitions/CartResponse" }
  /carts.remove_item:
    post:
      tags: [carts]
      parameters:
        - {
            name: cart_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart,
          }
        - {
            name: cart_item_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart item,
          }
      summary: Adds a product to the cart
      description: It will remove an item from the cart
      operationId: cartsRemoveItem
      consumes: [application/json]
      produces: [application/json]
      security:
        - basicAuth: []
      responses:
        "200":
          description: Updated - entity has been updated
          schema: { $ref: "definitions.yml#/definitions/CartResponse" }
  /carts.update:
    post:
      tags: [carts]
      parameters:
        - {
            name: cart_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart,
          }
        - name: cart
          in: body
          description: The cart you want to update
          required: true
          schema: { $ref: "definitions.yml#/definitions/CartUpdate" }
      summary: Updates a cart
      description: "This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched."
      operationId: updateCart
      consumes: [application/json]
      produces: [application/json]
      security:
        - basicAuth: []
      responses:
        "200":
          description: OK - entity has been updated
          schema: { $ref: "definitions.yml#/definitions/CartResponse" }
  /carts.update_item:
    post:
      tags: [carts]
      parameters:
        - {
            name: cart_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart,
          }
        - {
            name: cart_item_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart item,
          }
        - name: cart
          in: body
          description: The data you want to change in the item.
          required: true
          schema: { $ref: "definitions.yml#/definitions/ProductCartItemUpdate" }
      summary: Updates a cart item
      description: It will change the data for the given item. This endpoint supports partial updates. If modifier_options are not specified, ordering won't have to call core. This endpoint is maintained for backwards compatibility only. It behaves the same as the /carts.update_product_item endpoint.
      operationId: cartsUpdateItem
      consumes: [application/json]
      produces: [application/json]
      security:
        - basicAuth: []
      responses:
        "200":
          description: Updated - entity has been updated
          schema: { $ref: "definitions.yml#/definitions/CartResponse" }
  /carts.update_product_item:
    post:
      tags: [carts]
      parameters:
        - {
            name: cart_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart,
          }
        - {
            name: cart_item_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart item,
          }
        - name: cart
          in: body
          description: The data you want to change in the product
          required: true
          schema: { $ref: "definitions.yml#/definitions/ProductCartItemUpdate" }
      summary: Updates a cart product
      description: It will change the data for the given product. This endpoint supports partial updates. If modifier_options are not specified, ordering won't have to call core.
      operationId: cartsUpdateProductItem
      consumes: [application/json]
      produces: [application/json]
      security:
        - basicAuth: []
      responses:
        "200":
          description: Updated - entity has been updated
          schema: { $ref: "definitions.yml#/definitions/CartResponse" }
  /carts.update_gift_card_item:
    post:
      tags: [carts]
      parameters:
        - {
            name: cart_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart,
          }
        - {
            name: cart_item_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart item,
          }
        - name: cart
          in: body
          description: The data you want to change in the gift card
          required: true
          schema:
            { $ref: "definitions.yml#/definitions/GiftCardCartItemUpdate" }
      summary: Updates a cart gift card
      description: It will change the data for the given gift card. This endpoint supports partial updates. If modifier_options are not specified, ordering won't have to call core.
      operationId: cartsUpdateGiftCardItem
      consumes: [application/json]
      produces: [application/json]
      security:
        - basicAuth: []
      responses:
        "200":
          description: Updated - entity has been updated
          schema: { $ref: "definitions.yml#/definitions/CartResponse" }
  /carts.sync:
    post:
      tags: [carts]
      parameters:
        - {
            name: cart_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the cart to sync,
            required: true,
          }
      summary: Sync a cart to core without marking it as paid. Will return errors if products are out of stock.
      description: ""
      operationId: syncCart
      consumes: [application/json]
      produces: [application/json]
      security:
        - basicAuth: []
      responses:
        "200":
          description: OK
          schema: { $ref: "definitions.yml#/definitions/CartResponse" }
  /stores.get:
    get:
      tags: [stores]
      summary: Returns a store
      description: Returns a store by id
      operationId: storeById
      parameters:
        - {
            name: store_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the store,
            required: true,
          }
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        "200":
          description: OK
          schema: { $ref: "definitions.yml#/definitions/StoreResponse" }
  /stores.list:
    get:
      tags: [stores]
      summary: Returns a paginated list of stores for the current merchant
      description: ""
      operationId: storesList
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        "200":
          description: OK
          schema: { $ref: "definitions.yml#/definitions/StoreListResponse" }
  /stores.create:
    post:
      tags: [stores]
      parameters:
        - {
            name: store_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the store to create,
            required: true,
          }
        - name: store
          in: body
          description: The store you want to create
          required: true
          schema: { $ref: "definitions.yml#/definitions/StoreCreation" }
      summary: Creates a store
      description: ""
      operationId: createStore
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        "201":
          description: Created - entity has been created
          schema: { $ref: "definitions.yml#/definitions/StoreResponse" }
  /stores.update:
    post:
      tags: [stores]
      parameters:
        - {
            name: store_id,
            in: query,
            type: string,
            format: uuid,
            description: the UUID of the store,
          }
        - name: store
          in: body
          description: The store you want to update
          required: true
          schema: { $ref: "definitions.yml#/definitions/StoreUpdate" }
      summary: Updates a store
      description: "This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched."
      operationId: updateStore
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        "200":
          description: OK - entity has been updated
          schema: { $ref: "definitions.yml#/definitions/StoreResponse" }
  /stores.update_active:
    post:
      tags: [stores]
      parameters:
        - name: body
          in: body
          description:
            An object mapping store ids to the desired boolean active state. Stores not included will not
            change.
          schema: { $ref: "definitions.yml#/definitions/UpdateActiveItemList" }
      summary: Sets the global active flag for each store provided. Leaves all the other stores untouched.
      description: ""
      operationId: storesUpdateActive
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        "204": { description: No Content - stores were enabled/disabled }
  /merchants.me:
    get:
      tags: [merchants]
      summary: Returns a merchant data
      description: Returns a merchant data associated to the authenticated user
      operationId: merchantsMe
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        "200":
          description: OK
          schema: { $ref: "definitions.yml#/definitions/MerchantResponse" }
  /merchants.update:
    post:
      tags: [merchants]
      parameters:
        - name: merchant
          in: body
          description: The merchant data you want to update
          required: true
          schema: { $ref: "definitions.yml#/definitions/MerchantUpdate" }
      summary: Updates a merchant data
      description: "This endpoint supports partial updates: only the fields sent will be changed, the others will remain untouched."
      operationId: updateMerchant
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        "200":
          description: OK - entity has been updated
          schema: { $ref: "definitions.yml#/definitions/MerchantResponse" }
  /merchants.validate_url_slug:
    get:
      tags: [merchants]
      parameters:
        - {
            name: url_slug,
            in: query,
            type: string,
            description: the merchant url slug to validate,
          }
      summary: Checks if a merchant url slug is valid
      description: ""
      operationId: merchantsValidateUrlSlug
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        "204": { description: No Content - the slug is valid }
  /ids.check_usage:
    post:
      tags: [ids]
      parameters:
        - name: ids
          in: body
          description: The ids you want to check
          required: true
          schema: { $ref: "definitions.yml#/definitions/Ids" }
      summary: Gives information of which ids are in use, which are not, which are used but not accessible
      description: "This endpoint is used by core to get information of relations in ordering"
      operationId: checkUsageId
      consumes: [application/json]
      produces: [application/json]
      security:
        - bearer: []
      responses:
        "200":
          description: OK
          schema: { $ref: "definitions.yml#/definitions/IdsUsageResponse" }
