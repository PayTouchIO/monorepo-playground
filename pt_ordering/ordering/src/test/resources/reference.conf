core {
  user = "core"
  password = "password"
  uri = "https://my.core.com"
  jwt_ordering_secret = "myorderingsecret"
}

postgres = {
  db-name = ordering_unit_tests
  url = "jdbc:postgresql://localhost:5432/"${postgres.db-name}
  user = "paytouch"
  password = "paytouch"

  driver = org.postgresql.Driver
  connectionTimeout = 2000 # milliseconds

  skipRebuild = false
  skipRebuild = ${?SKIP_DB_REBUILD}
}

storefront {
  user = "storefront"
  password = "password"
}

ordering.uri = "https://my.ordering.com"

queues {
  ptOrderingName = "my-pt-ordering-SQS-queue"
  ptCoreName = "my-pt-core-SQS-queue"
  msgCount = 10
}

google.key = "my-google-key"

worldpay {
  transaction_endpoint_uri = "http://tx-endpoint.worldpay"
  reporting_endpoint_uri = "http://report-endpoint.worldpay"
  checkout_uri = "http://checkout.worldpay"
  application_id = "1234"
  return_uri = "http://ordering/receive"
}

logging {
  postResponse = false
  postResponse = ${?LOG_POST_RESPONSE}
  endpointsToDebug = ""
  endpointsToDebug = ${?LOG_ENDPOINTS_TO_DEBUG} # example setup:'products.create,product.update'
}

stripe {
  application_fee_base_points = 40 // 40 base points means 0.4%
  base_uri = "https://stripe/"
  secret_key = "secret"
  webhook_secret = "webhook"
  livemode = false
}

test {
  after_a_while_repetitions = 5
  after_a_while_repetitions = ${?AFTER_A_WHILE_REPETITIONS}
}

feature {
  useStorePaymentTransaction = false
  useStorePaymentTransaction = ${?FEATURE_USE_STORE_PAYMENT_TRANSACTION}
}

redis {
  host = ${REDIS_HOST}
  port = ${REDIS_PORT}
}
